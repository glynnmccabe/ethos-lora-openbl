
OpenBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a30  08006a30  00020378  2**0
                  CONTENTS
  4 .ARM          00000000  08006a30  08006a30  00020378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a30  08006a30  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08006a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000ad0  20000378  08006db8  00020378  2**2
                  ALLOC
 10 RAM1_region   00000000  20000e48  20000e48  00020378  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020378  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000e48  20000e48  00020e48  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000203a2  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000efc2  00000000  00000000  000203e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e4b  00000000  00000000  0002f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001418  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ebf  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00020081  00000000  00000000  000354cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018861  00000000  00000000  00055550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b718a  00000000  00000000  0006ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004dcc  00000000  00000000  00124f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000bd  00000000  00000000  00129d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000378 	.word	0x20000378
 8000154:	00000000 	.word	0x00000000
 8000158:	08006910 	.word	0x08006910

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000037c 	.word	0x2000037c
 8000174:	08006910 	.word	0x08006910

08000178 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
             timer for example or other time source), keeping in mind that Time base
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 800017c:	f001 f920 	bl	80013c0 <HAL_Init>

  /* Configure the System clock */
  SystemClock_Config();
 8000180:	f000 f806 	bl	8000190 <SystemClock_Config>

  OpenBootloader_Init();
 8000184:	f000 f8aa 	bl	80002dc <OpenBootloader_Init>

  /* Infinite loop */
  while (1)
  {
    OpenBootloader_ProtocolDetection();
 8000188:	f000 f8fe 	bl	8000388 <OpenBootloader_ProtocolDetection>
 800018c:	e7fc      	b.n	8000188 <main+0x10>
	...

08000190 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b09a      	sub	sp, #104	; 0x68
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0320 	add.w	r3, r7, #32
 800019a:	2248      	movs	r2, #72	; 0x48
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f006 fb8a 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]
 80001b2:	615a      	str	r2, [r3, #20]
 80001b4:	619a      	str	r2, [r3, #24]

  /* Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001b6:	4b26      	ldr	r3, [pc, #152]	; (8000250 <SystemClock_Config+0xc0>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001be:	4a24      	ldr	r2, [pc, #144]	; (8000250 <SystemClock_Config+0xc0>)
 80001c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001c4:	6013      	str	r3, [r2, #0]
 80001c6:	4b22      	ldr	r3, [pc, #136]	; (8000250 <SystemClock_Config+0xc0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001ce:	603b      	str	r3, [r7, #0]
 80001d0:	683b      	ldr	r3, [r7, #0]

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80001d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001dc:	2340      	movs	r3, #64	; 0x40
 80001de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80001e4:	2302      	movs	r3, #2
 80001e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM            = RCC_PLLM_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN            = 6;
 80001ec:	2306      	movs	r3, #6
 80001ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 80001f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80001f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 80001f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80001fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV2;
 80001fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000200:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0320 	add.w	r3, r7, #32
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fe00 	bl	8002e0c <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000212:	f000 f833 	bl	800027c <Error_Handler>
  }

  /* Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK2
 8000216:	236f      	movs	r3, #111	; 0x6f
 8000218:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800021a:	2303      	movs	r3, #3
 800021c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f003 f984 	bl	8003544 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000242:	f000 f81b 	bl	800027c <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3768      	adds	r7, #104	; 0x68
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	58000400 	.word	0x58000400

08000254 <System_DeInit>:
/**
  * @brief  This function is used to de-initialized the clock.
  * @retval None
  */
void System_DeInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  USARTx_DeInit();
 8000258:	4806      	ldr	r0, [pc, #24]	; (8000274 <System_DeInit+0x20>)
 800025a:	f004 f8d1 	bl	8004400 <LL_USART_DeInit>
  SPIx_DeInit();
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <System_DeInit+0x24>)
 8000260:	f003 ff66 	bl	8004130 <LL_SPI_DeInit>
  HAL_RCC_DeInit();
 8000264:	f002 fd3c 	bl	8002ce0 <HAL_RCC_DeInit>
  HAL_NVIC_DisableIRQ(SPIx_IRQn);
 8000268:	2022      	movs	r0, #34	; 0x22
 800026a:	f001 fa48 	bl	80016fe <HAL_NVIC_DisableIRQ>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40013800 	.word	0x40013800
 8000278:	40013000 	.word	0x40013000

0800027c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  while (1)
 8000280:	e7fe      	b.n	8000280 <Error_Handler+0x4>

08000282 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  while (1)
 8000286:	e7fe      	b.n	8000286 <NMI_Handler+0x4>

08000288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  while (1)
 800028c:	e7fe      	b.n	800028c <HardFault_Handler+0x4>

0800028e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
  while (1)
 8000292:	e7fe      	b.n	8000292 <MemManage_Handler+0x4>

08000294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  while (1)
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler+0x4>

0800029a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  while (1)
 800029e:	e7fe      	b.n	800029e <UsageFault_Handler+0x4>

080002a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80002c8:	f001 f8da 	bl	8001480 <HAL_IncTick>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPIx global interrupt.
 */
void SPI1_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  OPENBL_SPI_IRQHandler();
 80002d4:	f006 fb30 	bl	8006938 <__OPENBL_SPI_IRQHandler_veneer>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <OpenBootloader_Init>:
  * @brief  Initialize open Bootloader.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* Register USART interfaces */
  USART_Handle.p_Ops = &USART_Ops;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <OpenBootloader_Init+0x70>)
 80002e2:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <OpenBootloader_Init+0x74>)
 80002e4:	601a      	str	r2, [r3, #0]
  USART_Handle.p_Cmd =  OPENBL_USART_GetCommandsList();
 80002e6:	f005 fd7b 	bl	8005de0 <OPENBL_USART_GetCommandsList>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <OpenBootloader_Init+0x70>)
 80002ee:	6053      	str	r3, [r2, #4]

  OPENBL_RegisterInterface(&USART_Handle);
 80002f0:	4816      	ldr	r0, [pc, #88]	; (800034c <OpenBootloader_Init+0x70>)
 80002f2:	f004 f963 	bl	80045bc <OPENBL_RegisterInterface>


  /* Register SPI interfaces */
  SPI_Handle.p_Ops = &SPI_Ops;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <OpenBootloader_Init+0x78>)
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <OpenBootloader_Init+0x7c>)
 80002fa:	601a      	str	r2, [r3, #0]
  SPI_Handle.p_Cmd = OPENBL_SPI_GetCommandsList();
 80002fc:	f004 ffe4 	bl	80052c8 <OPENBL_SPI_GetCommandsList>
 8000300:	4603      	mov	r3, r0
 8000302:	4a14      	ldr	r2, [pc, #80]	; (8000354 <OpenBootloader_Init+0x78>)
 8000304:	6053      	str	r3, [r2, #4]

  OPENBL_RegisterInterface(&SPI_Handle);
 8000306:	4813      	ldr	r0, [pc, #76]	; (8000354 <OpenBootloader_Init+0x78>)
 8000308:	f004 f958 	bl	80045bc <OPENBL_RegisterInterface>


  /* Register IWDG interfaces */
  IWDG_Handle.p_Ops = &IWDG_Ops;
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <OpenBootloader_Init+0x80>)
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <OpenBootloader_Init+0x84>)
 8000310:	601a      	str	r2, [r3, #0]
  IWDG_Handle.p_Cmd = NULL;
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <OpenBootloader_Init+0x80>)
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]

  OPENBL_RegisterInterface(&IWDG_Handle);
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <OpenBootloader_Init+0x80>)
 800031a:	f004 f94f 	bl	80045bc <OPENBL_RegisterInterface>

  /* Initialize interfaces */
  OPENBL_Init();
 800031e:	f004 f8ff 	bl	8004520 <OPENBL_Init>

  /* Initialize memories */
  OPENBL_MEM_RegisterMemory(&FLASH_Descriptor);
 8000322:	4810      	ldr	r0, [pc, #64]	; (8000364 <OpenBootloader_Init+0x88>)
 8000324:	f004 fd4c 	bl	8004dc0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&RAM_Descriptor);
 8000328:	480f      	ldr	r0, [pc, #60]	; (8000368 <OpenBootloader_Init+0x8c>)
 800032a:	f004 fd49 	bl	8004dc0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&ICP1_Descriptor);
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <OpenBootloader_Init+0x90>)
 8000330:	f004 fd46 	bl	8004dc0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OB1_Descriptor);
 8000334:	480e      	ldr	r0, [pc, #56]	; (8000370 <OpenBootloader_Init+0x94>)
 8000336:	f004 fd43 	bl	8004dc0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OTP_Descriptor);
 800033a:	480e      	ldr	r0, [pc, #56]	; (8000374 <OpenBootloader_Init+0x98>)
 800033c:	f004 fd40 	bl	8004dc0 <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&EB_Descriptor);
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <OpenBootloader_Init+0x9c>)
 8000342:	f004 fd3d 	bl	8004dc0 <OPENBL_MEM_RegisterMemory>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000394 	.word	0x20000394
 8000350:	20000000 	.word	0x20000000
 8000354:	2000039c 	.word	0x2000039c
 8000358:	20000014 	.word	0x20000014
 800035c:	200003a4 	.word	0x200003a4
 8000360:	20000028 	.word	0x20000028
 8000364:	20000070 	.word	0x20000070
 8000368:	200000f4 	.word	0x200000f4
 800036c:	20000120 	.word	0x20000120
 8000370:	2000009c 	.word	0x2000009c
 8000374:	200000c8 	.word	0x200000c8
 8000378:	20000044 	.word	0x20000044

0800037c <OpenBootloader_DeInit>:
  * @brief  DeInitialize open Bootloader.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_DeInit(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  System_DeInit();
 8000380:	f7ff ff68 	bl	8000254 <System_DeInit>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}

08000388 <OpenBootloader_ProtocolDetection>:
  * @brief  This function is used to select which protocol will be used when communicating with the host.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_ProtocolDetection(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  static uint32_t interface_detected = 0;

  if (interface_detected == 0)
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <OpenBootloader_ProtocolDetection+0x34>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d10a      	bne.n	80003aa <OpenBootloader_ProtocolDetection+0x22>
  {
    interface_detected = OPENBL_InterfaceDetection();
 8000394:	f004 f93e 	bl	8004614 <OPENBL_InterfaceDetection>
 8000398:	4603      	mov	r3, r0
 800039a:	4a08      	ldr	r2, [pc, #32]	; (80003bc <OpenBootloader_ProtocolDetection+0x34>)
 800039c:	6013      	str	r3, [r2, #0]

    /* De-initialize the interfaces that are not detected */
    if (interface_detected == 1U)
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <OpenBootloader_ProtocolDetection+0x34>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d101      	bne.n	80003aa <OpenBootloader_ProtocolDetection+0x22>
    {
      OPENBL_InterfacesDeInit();
 80003a6:	f004 f8e5 	bl	8004574 <OPENBL_InterfacesDeInit>
    }
  }

  if (interface_detected == 1)
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <OpenBootloader_ProtocolDetection+0x34>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d101      	bne.n	80003b6 <OpenBootloader_ProtocolDetection+0x2e>
  {
    OPENBL_CommandProcess();
 80003b2:	f004 f963 	bl	800467c <OPENBL_CommandProcess>
  }
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200003ac 	.word	0x200003ac

080003c0 <Common_SetMsp>:
  * @brief  Assigns the given value to the Main Stack Pointer (MSP).
  * @param  TopOfMainStack  Main Stack Pointer value to set.
  * @retval None.
  */
void Common_SetMsp(uint32_t TopOfMainStack)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f383 8808 	msr	MSP, r3
}
 80003d2:	bf00      	nop
  __set_MSP(TopOfMainStack);
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <Common_EnableIrq>:
/**
  * @brief  Enable IRQ Interrupts.
  * @retval None.
  */
void Common_EnableIrq(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80003e2:	b662      	cpsie	i
}
 80003e4:	bf00      	nop
  __enable_irq();
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <Common_GetProtectionStatus>:
/**
  * @brief  Checks whether the target Protection Status is set or not.
  * @retval Returns SET if protection is enabled else return RESET.
  */
FlagStatus Common_GetProtectionStatus(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
  FlagStatus status;

  if (OPENBL_FLASH_GetReadOutProtectionLevel() != RDP_LEVEL_0)
 80003f4:	f000 f8e2 	bl	80005bc <OPENBL_FLASH_GetReadOutProtectionLevel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2baa      	cmp	r3, #170	; 0xaa
 80003fc:	d002      	beq.n	8000404 <Common_GetProtectionStatus+0x16>
  {
    status = SET;
 80003fe:	2301      	movs	r3, #1
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	e001      	b.n	8000408 <Common_GetProtectionStatus+0x1a>
  }
  else
  {
    status = RESET;
 8000404:	2300      	movs	r3, #0
 8000406:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000408:	79fb      	ldrb	r3, [r7, #7]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <Common_SetPostProcessingCallback>:
/**
  * @brief  Register a callback function to be called at the end of commands processing.
  * @retval None.
  */
void Common_SetPostProcessingCallback(Function_Pointer Callback)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  ResetCallback = Callback;
 800041c:	4a03      	ldr	r2, [pc, #12]	; (800042c <Common_SetPostProcessingCallback+0x18>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6013      	str	r3, [r2, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	200003b0 	.word	0x200003b0

08000430 <Common_StartPostProcessing>:
/**
  * @brief  Start post processing task.
  * @retval None.
  */
void Common_StartPostProcessing()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  if (ResetCallback != NULL)
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <Common_StartPostProcessing+0x1c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d005      	beq.n	8000448 <Common_StartPostProcessing+0x18>
  {
    ResetCallback();
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <Common_StartPostProcessing+0x1c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4798      	blx	r3

    /* In case there is no system reset, we must reset the callback */
    ResetCallback = NULL;
 8000442:	4b02      	ldr	r3, [pc, #8]	; (800044c <Common_StartPostProcessing+0x1c>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
  }
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200003b0 	.word	0x200003b0

08000450 <OPENBL_EB_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_EB_Read(uint32_t Address)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <OPENBL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval None.
  */
void OPENBL_FLASH_Unlock(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 800046a:	f001 f9a7 	bl	80017bc <HAL_FLASH_Unlock>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}

08000472 <OPENBL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval None.
  */
void OPENBL_FLASH_Lock(void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 8000476:	f001 f9c3 	bl	8001800 <HAL_FLASH_Lock>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}

0800047e <OPENBL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval None.
  */
void OPENBL_FLASH_OB_Unlock(void)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 8000482:	f001 f99b 	bl	80017bc <HAL_FLASH_Unlock>

  HAL_FLASH_OB_Unlock();
 8000486:	f001 f9d5 	bl	8001834 <HAL_FLASH_OB_Unlock>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}

0800048e <OPENBL_FLASH_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_FLASH_Read(uint32_t Address)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	781b      	ldrb	r3, [r3, #0]
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <OPENBL_FLASH_Write>:
  * @param  pData The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_FLASH_Write(uint32_t Address, uint8_t *pData, uint32_t DataLength)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  uint32_t index;
  __ALIGNED(4) uint8_t data[FLASH_PROG_STEP_SIZE] = {0x0U};
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
  uint8_t remaining;

  if ((pData != NULL) && (DataLength != 0U))
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d063      	beq.n	8000586 <OPENBL_FLASH_Write+0xe2>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d060      	beq.n	8000586 <OPENBL_FLASH_Write+0xe2>
  {
    /* Unlock the flash memory for write operation */
    OPENBL_FLASH_Unlock();
 80004c4:	f7ff ffcf 	bl	8000466 <OPENBL_FLASH_Unlock>

    /* Program double-word by double-word (8 bytes) */
    while ((DataLength >> 3U) > 0U)
 80004c8:	e022      	b.n	8000510 <OPENBL_FLASH_Write+0x6c>
    {
      for (index = 0U; index < FLASH_PROG_STEP_SIZE; index++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
 80004ce:	e00c      	b.n	80004ea <OPENBL_FLASH_Write+0x46>
      {
        data[index] = *(pData + index);
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	4413      	add	r3, r2
 80004d6:	7819      	ldrb	r1, [r3, #0]
 80004d8:	f107 0210 	add.w	r2, r7, #16
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	4413      	add	r3, r2
 80004e0:	460a      	mov	r2, r1
 80004e2:	701a      	strb	r2, [r3, #0]
      for (index = 0U; index < FLASH_PROG_STEP_SIZE; index++)
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	3301      	adds	r3, #1
 80004e8:	61fb      	str	r3, [r7, #28]
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	2b07      	cmp	r3, #7
 80004ee:	d9ef      	bls.n	80004d0 <OPENBL_FLASH_Write+0x2c>
      }

      OPENBL_FLASH_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)data))));
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f000 f915 	bl	8000728 <OPENBL_FLASH_Program>

      Address    += FLASH_PROG_STEP_SIZE;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3308      	adds	r3, #8
 8000502:	60fb      	str	r3, [r7, #12]
      pData      += FLASH_PROG_STEP_SIZE;
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3308      	adds	r3, #8
 8000508:	60bb      	str	r3, [r7, #8]
      DataLength -= FLASH_PROG_STEP_SIZE;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3b08      	subs	r3, #8
 800050e:	607b      	str	r3, [r7, #4]
    while ((DataLength >> 3U) > 0U)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	08db      	lsrs	r3, r3, #3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1d8      	bne.n	80004ca <OPENBL_FLASH_Write+0x26>
    }

    /* If remaining count, go back to fill the rest with 0xFF */
    if (DataLength > 0U)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d031      	beq.n	8000582 <OPENBL_FLASH_Write+0xde>
    {
      remaining = FLASH_PROG_STEP_SIZE - DataLength;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	f1c3 0308 	rsb	r3, r3, #8
 8000526:	76fb      	strb	r3, [r7, #27]

      /* Copy the remaining bytes */
      for (index = 0U; index < DataLength; index++)
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
 800052c:	e00c      	b.n	8000548 <OPENBL_FLASH_Write+0xa4>
      {
        data[index] = *(pData + index);
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	4413      	add	r3, r2
 8000534:	7819      	ldrb	r1, [r3, #0]
 8000536:	f107 0210 	add.w	r2, r7, #16
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	4413      	add	r3, r2
 800053e:	460a      	mov	r2, r1
 8000540:	701a      	strb	r2, [r3, #0]
      for (index = 0U; index < DataLength; index++)
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	3301      	adds	r3, #1
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	69fa      	ldr	r2, [r7, #28]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	d3ee      	bcc.n	800052e <OPENBL_FLASH_Write+0x8a>
      }

      /* Fill the upper bytes with 0xFF */
      for (index = 0U; index < remaining; index++)
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	e00a      	b.n	800056c <OPENBL_FLASH_Write+0xc8>
      {
        data[index + DataLength] = 0xFFU;
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	3320      	adds	r3, #32
 800055e:	443b      	add	r3, r7
 8000560:	22ff      	movs	r2, #255	; 0xff
 8000562:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (index = 0U; index < remaining; index++)
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3301      	adds	r3, #1
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	7efb      	ldrb	r3, [r7, #27]
 800056e:	69fa      	ldr	r2, [r7, #28]
 8000570:	429a      	cmp	r2, r3
 8000572:	d3f0      	bcc.n	8000556 <OPENBL_FLASH_Write+0xb2>
      }

      /* FLASH word program */
      OPENBL_FLASH_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)data))));
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f000 f8d3 	bl	8000728 <OPENBL_FLASH_Program>
    }

    /* Lock the Flash to disable the flash control register access */
    OPENBL_FLASH_Lock();
 8000582:	f7ff ff76 	bl	8000472 <OPENBL_FLASH_Lock>
  }
}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <OPENBL_FLASH_JumpToAddress>:
  * @brief  This function is used to jump to a given address.
  * @param  Address The address where the function will jump.
  * @retval None.
  */
void OPENBL_FLASH_JumpToAddress(uint32_t Address)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  Function_Pointer jump_to_address;

  /* De-initialize all HW resources used by the Open Bootloader to their reset values */
  OPENBL_DeInit();
 8000596:	f003 ffe7 	bl	8004568 <OPENBL_DeInit>

  /* Enable IRQ */
  Common_EnableIrq();
 800059a:	f7ff ff20 	bl	80003de <Common_EnableIrq>

  jump_to_address = (Function_Pointer)(*(__IO uint32_t *)(Address + 4U));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3304      	adds	r3, #4
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Initialize user application's stack pointer */
  Common_SetMsp(*(__IO uint32_t *) Address);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff08 	bl	80003c0 <Common_SetMsp>

  jump_to_address();
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4798      	blx	r3
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <OPENBL_FLASH_GetReadOutProtectionLevel>:
  *         @arg OB_RDP_LEVEL_0: No protection
  *         @arg OB_RDP_LEVEL_1: Read protection of the memory
  *         @arg OB_RDP_LEVEL_2: Full chip protection
  */
uint32_t OPENBL_FLASH_GetReadOutProtectionLevel(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Get the Option bytes configuration */
  HAL_FLASHEx_OBGetConfig(&flash_ob);
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fb41 	bl	8001c4c <HAL_FLASHEx_OBGetConfig>

  return flash_ob.RDPLevel;
 80005ca:	693b      	ldr	r3, [r7, #16]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3758      	adds	r7, #88	; 0x58
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <OPENBL_FLASH_SetReadOutProtectionLevel>:
  *         @arg OB_RDP_LEVEL_1: Read protection of the memory
  *         @arg OB_RDP_LEVEL_2: Full chip protection
  * @retval None.
  */
void OPENBL_FLASH_SetReadOutProtectionLevel(uint32_t Level)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b098      	sub	sp, #96	; 0x60
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  FLASH_OBProgramInitTypeDef flash_ob;

  if (Level != OB_RDP_LEVEL2)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2bcc      	cmp	r3, #204	; 0xcc
 80005e0:	d017      	beq.n	8000612 <OPENBL_FLASH_SetReadOutProtectionLevel+0x3e>
  {
    flash_ob.OptionType = OPTIONBYTE_RDP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	60bb      	str	r3, [r7, #8]
    flash_ob.RDPLevel   = Level;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	61bb      	str	r3, [r7, #24]

    /* Unlock the FLASH registers & Option Bytes registers access */
    OPENBL_FLASH_OB_Unlock();
 80005ea:	f7ff ff48 	bl	800047e <OPENBL_FLASH_OB_Unlock>

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <OPENBL_FLASH_SetReadOutProtectionLevel+0x48>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <OPENBL_FLASH_SetReadOutProtectionLevel+0x48>)
 80005f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <OPENBL_FLASH_SetReadOutProtectionLevel+0x48>)
 80005fc:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000600:	611a      	str	r2, [r3, #16]

    /* Change the RDP level */
    HAL_FLASHEx_OBProgram(&flash_ob);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fa84 	bl	8001b14 <HAL_FLASHEx_OBProgram>

    /* Register system reset callback */
    Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <OPENBL_FLASH_SetReadOutProtectionLevel+0x4c>)
 800060e:	f7ff ff01 	bl	8000414 <Common_SetPostProcessingCallback>
  }
}
 8000612:	bf00      	nop
 8000614:	3760      	adds	r7, #96	; 0x60
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58004000 	.word	0x58004000
 8000620:	080008d5 	.word	0x080008d5

08000624 <OPENBL_FLASH_SetWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
ErrorStatus OPENBL_FLASH_SetWriteProtection(FunctionalState State, uint8_t *ListOfPages, uint32_t Length)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	73fb      	strb	r3, [r7, #15]
  ErrorStatus status = SUCCESS;
 8000632:	2301      	movs	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]

  if (State == ENABLE)
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d107      	bne.n	800064c <OPENBL_FLASH_SetWriteProtection+0x28>
  {
    OPENBL_FLASH_EnableWriteProtection(ListOfPages, Length);
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	68b8      	ldr	r0, [r7, #8]
 8000640:	f000 f88e 	bl	8000760 <OPENBL_FLASH_EnableWriteProtection>

    /* Register system reset callback */
    Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <OPENBL_FLASH_SetWriteProtection+0x48>)
 8000646:	f7ff fee5 	bl	8000414 <Common_SetPostProcessingCallback>
 800064a:	e00a      	b.n	8000662 <OPENBL_FLASH_SetWriteProtection+0x3e>
  }
  else if (State == DISABLE)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <OPENBL_FLASH_SetWriteProtection+0x3a>
  {
    OPENBL_FLASH_DisableWriteProtection();
 8000652:	f000 f8c7 	bl	80007e4 <OPENBL_FLASH_DisableWriteProtection>

    /* Register system reset callback */
    Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <OPENBL_FLASH_SetWriteProtection+0x48>)
 8000658:	f7ff fedc 	bl	8000414 <Common_SetPostProcessingCallback>
 800065c:	e001      	b.n	8000662 <OPENBL_FLASH_SetWriteProtection+0x3e>
  }
  else
  {
    status = ERROR;
 800065e:	2300      	movs	r3, #0
 8000660:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000662:	7dfb      	ldrb	r3, [r7, #23]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	080008d5 	.word	0x080008d5

08000670 <OPENBL_FLASH_Erase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Erase operation done
  *          - ERROR:   Erase operation failed or the value of one parameter is not ok
  */
ErrorStatus OPENBL_FLASH_Erase(uint8_t *p_Data, uint32_t DataLength)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t counter;
  uint32_t pages_number;
  uint32_t page_error   = 0U;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  uint32_t errors       = 0U;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  ErrorStatus status    = SUCCESS;
 8000682:	2301      	movs	r3, #1
 8000684:	77fb      	strb	r3, [r7, #31]
  FLASH_EraseInitTypeDef erase_init_struct;

  /* Unlock the flash memory for erase operation */
  OPENBL_FLASH_Unlock();
 8000686:	f7ff feee 	bl	8000466 <OPENBL_FLASH_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <OPENBL_FLASH_Erase+0xb4>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a25      	ldr	r2, [pc, #148]	; (8000724 <OPENBL_FLASH_Erase+0xb4>)
 8000690:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <OPENBL_FLASH_Erase+0xb4>)
 8000698:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800069c:	611a      	str	r2, [r3, #16]

  pages_number  = (uint32_t)(*(uint16_t *)(p_Data));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	61bb      	str	r3, [r7, #24]

  /* The sector number size is 2 bytes */
  p_Data += 2U;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3302      	adds	r3, #2
 80006a8:	607b      	str	r3, [r7, #4]

  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60bb      	str	r3, [r7, #8]
  erase_init_struct.NbPages   = 1U;
 80006ae:	2301      	movs	r3, #1
 80006b0:	613b      	str	r3, [r7, #16]

  for (counter = 0U; ((counter < pages_number) && (counter < (DataLength / 2U))) ; counter++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
 80006b6:	e01c      	b.n	80006f2 <OPENBL_FLASH_Erase+0x82>
  {
    erase_init_struct.Page = ((uint32_t)(*(uint16_t *)(p_Data)));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]

    if (status != ERROR)
 80006be:	7ffb      	ldrb	r3, [r7, #31]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00e      	beq.n	80006e2 <OPENBL_FLASH_Erase+0x72>
    {
      if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK)
 80006c4:	f107 0214 	add.w	r2, r7, #20
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f9c8 	bl	8001a64 <HAL_FLASHEx_Erase>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d005      	beq.n	80006e6 <OPENBL_FLASH_Erase+0x76>
      {
        errors++;
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	3301      	adds	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e001      	b.n	80006e6 <OPENBL_FLASH_Erase+0x76>
      }
    }
    else
    {
      /* Reset the status for next erase operation */
      status = SUCCESS;
 80006e2:	2301      	movs	r3, #1
 80006e4:	77fb      	strb	r3, [r7, #31]
    }

    /* The page number size is 2 bytes */
    p_Data += 2U;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
  for (counter = 0U; ((counter < pages_number) && (counter < (DataLength / 2U))) ; counter++)
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	3301      	adds	r3, #1
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
 80006f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d204      	bcs.n	8000704 <OPENBL_FLASH_Erase+0x94>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000700:	429a      	cmp	r2, r3
 8000702:	d3d9      	bcc.n	80006b8 <OPENBL_FLASH_Erase+0x48>
  }

  /* Lock the Flash to disable the flash control register access */
  OPENBL_FLASH_Lock();
 8000704:	f7ff feb5 	bl	8000472 <OPENBL_FLASH_Lock>

  if (errors > 0)
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <OPENBL_FLASH_Erase+0xa4>
  {
    status = ERROR;
 800070e:	2300      	movs	r3, #0
 8000710:	77fb      	strb	r3, [r7, #31]
 8000712:	e001      	b.n	8000718 <OPENBL_FLASH_Erase+0xa8>
  }
  else
  {
    status = SUCCESS;
 8000714:	2301      	movs	r3, #1
 8000716:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8000718:	7ffb      	ldrb	r3, [r7, #31]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58004000 	.word	0x58004000

08000728 <OPENBL_FLASH_Program>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None.
  */
static void OPENBL_FLASH_Program(uint32_t Address, uint64_t Data)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	e9c7 2300 	strd	r2, r3, [r7]
  /* Clear all FLASH errors flags before starting write operation */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <OPENBL_FLASH_Program+0x34>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <OPENBL_FLASH_Program+0x34>)
 800073a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <OPENBL_FLASH_Program+0x34>)
 8000742:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000746:	611a      	str	r2, [r3, #16]

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8000748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fff0 	bl	8001734 <HAL_FLASH_Program>
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58004000 	.word	0x58004000

08000760 <OPENBL_FLASH_EnableWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
static ErrorStatus OPENBL_FLASH_EnableWriteProtection(uint8_t *ListOfPages, uint32_t Length)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b09a      	sub	sp, #104	; 0x68
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  ErrorStatus status       = SUCCESS;
 800076a:	2301      	movs	r3, #1
 800076c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Unlock the FLASH registers & Option Bytes registers access */
  OPENBL_FLASH_OB_Unlock();
 8000770:	f7ff fe85 	bl	800047e <OPENBL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <OPENBL_FLASH_EnableWriteProtection+0x80>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <OPENBL_FLASH_EnableWriteProtection+0x80>)
 800077a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <OPENBL_FLASH_EnableWriteProtection+0x80>)
 8000782:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000786:	611a      	str	r2, [r3, #16]

  flash_ob.OptionType = OPTIONBYTE_WRP;
 8000788:	2301      	movs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]

  /* Write protection of bank 1 area WRPA 1 area */
  if (Length >= 2U)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d90d      	bls.n	80007ae <OPENBL_FLASH_EnableWriteProtection+0x4e>
  {
    flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAA;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
    flash_ob.WRPStartOffset = *(ListOfPages);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	617b      	str	r3, [r7, #20]
    flash_ob.WRPEndOffset   = *(ListOfPages + 1U);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	61bb      	str	r3, [r7, #24]

    HAL_FLASHEx_OBProgram(&flash_ob);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f9b3 	bl	8001b14 <HAL_FLASHEx_OBProgram>
  }

  /* Write protection of bank 1 area WRPA 2 area */
  if (Length >= 4U)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d90e      	bls.n	80007d2 <OPENBL_FLASH_EnableWriteProtection+0x72>
  {
    flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAB;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
    flash_ob.WRPStartOffset = *(ListOfPages + 2U);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3302      	adds	r3, #2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	617b      	str	r3, [r7, #20]
    flash_ob.WRPEndOffset   = *(ListOfPages + 3U);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3303      	adds	r3, #3
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	61bb      	str	r3, [r7, #24]

    HAL_FLASHEx_OBProgram(&flash_ob);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f9a1 	bl	8001b14 <HAL_FLASHEx_OBProgram>
  }

  return status;
 80007d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3768      	adds	r7, #104	; 0x68
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	58004000 	.word	0x58004000

080007e4 <OPENBL_FLASH_DisableWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
static ErrorStatus OPENBL_FLASH_DisableWriteProtection(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b098      	sub	sp, #96	; 0x60
 80007e8:	af00      	add	r7, sp, #0
  ErrorStatus status       = SUCCESS;
 80007ea:	2301      	movs	r3, #1
 80007ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Unlock the FLASH registers & Option Bytes registers access */
  OPENBL_FLASH_OB_Unlock();
 80007f0:	f7ff fe45 	bl	800047e <OPENBL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <OPENBL_FLASH_DisableWriteProtection+0x5c>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a11      	ldr	r2, [pc, #68]	; (8000840 <OPENBL_FLASH_DisableWriteProtection+0x5c>)
 80007fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <OPENBL_FLASH_DisableWriteProtection+0x5c>)
 8000802:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000806:	611a      	str	r2, [r3, #16]

  flash_ob.OptionType = OPTIONBYTE_WRP;
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]

  /* Disable write protection of bank 1 area WRPA 1 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAA;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPStartOffset = FLASH_PAGE_MAX_NUMBER;
 8000810:	237f      	movs	r3, #127	; 0x7f
 8000812:	60fb      	str	r3, [r7, #12]
  flash_ob.WRPEndOffset   = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]

  HAL_FLASHEx_OBProgram(&flash_ob);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f97a 	bl	8001b14 <HAL_FLASHEx_OBProgram>

  /* Disable write protection of bank 1 area WRPA 2 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAB;
 8000820:	2301      	movs	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPStartOffset = FLASH_PAGE_MAX_NUMBER;
 8000824:	237f      	movs	r3, #127	; 0x7f
 8000826:	60fb      	str	r3, [r7, #12]
  flash_ob.WRPEndOffset   = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]

  HAL_FLASHEx_OBProgram(&flash_ob);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f970 	bl	8001b14 <HAL_FLASHEx_OBProgram>

  return status;
 8000834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8000838:	4618      	mov	r0, r3
 800083a:	3760      	adds	r7, #96	; 0x60
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58004000 	.word	0x58004000

08000844 <OPENBL_IWDG_Configuration>:
/**
  * @brief  This function is used to configure the watchdog.
  * @retval None.
  */
void OPENBL_IWDG_Configuration(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  IWDGHandle.Instance       = IWDG;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <OPENBL_IWDG_Configuration+0x40>)
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <OPENBL_IWDG_Configuration+0x44>)
 800084c:	601a      	str	r2, [r3, #0]
  IWDGHandle.Init.Prescaler = IWDG_PRESCALER_256;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <OPENBL_IWDG_Configuration+0x40>)
 8000850:	2206      	movs	r2, #6
 8000852:	605a      	str	r2, [r3, #4]
  IWDGHandle.Init.Window    = IWDG_WINDOW_DISABLE;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <OPENBL_IWDG_Configuration+0x40>)
 8000856:	f640 72ff 	movw	r2, #4095	; 0xfff
 800085a:	60da      	str	r2, [r3, #12]
  IWDGHandle.Init.Reload    = IWDG_KEY_RELOAD;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <OPENBL_IWDG_Configuration+0x40>)
 800085e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000862:	609a      	str	r2, [r3, #8]

  /* In case the user has enabled the IWDG through HW before entering the Open Bootloader */
  IWDG->KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <OPENBL_IWDG_Configuration+0x44>)
 8000866:	f245 5255 	movw	r2, #21845	; 0x5555
 800086a:	601a      	str	r2, [r3, #0]
  IWDG->PR = IWDG_PRESCALER_256;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <OPENBL_IWDG_Configuration+0x44>)
 800086e:	2206      	movs	r2, #6
 8000870:	605a      	str	r2, [r3, #4]
  IWDG->KR = IWDG_KEY_RELOAD;
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <OPENBL_IWDG_Configuration+0x44>)
 8000874:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000878:	601a      	str	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200003b4 	.word	0x200003b4
 8000888:	40003000 	.word	0x40003000

0800088c <OPENBL_IWDG_Refresh>:
/**
  * @brief  This function is used to refresh the watchdog.
  * @retval None.
  */
void OPENBL_IWDG_Refresh(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Refresh IWDG: reload counter */
  if (HAL_IWDG_Refresh(&IWDGHandle) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <OPENBL_IWDG_Refresh+0x18>)
 8000892:	f001 ff47 	bl	8002724 <HAL_IWDG_Refresh>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <OPENBL_IWDG_Refresh+0x14>
  {
    Error_Handler();
 800089c:	f7ff fcee 	bl	800027c <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003b4 	.word	0x200003b4

080008a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ac:	f3bf 8f4f 	dsb	sy
}
 80008b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <__NVIC_SystemReset+0x24>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008ba:	4904      	ldr	r1, [pc, #16]	; (80008cc <__NVIC_SystemReset+0x24>)
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_SystemReset+0x28>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c2:	f3bf 8f4f 	dsb	sy
}
 80008c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <__NVIC_SystemReset+0x20>
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	05fa0004 	.word	0x05fa0004

080008d4 <OPENBL_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval None.
  */
void OPENBL_OB_Launch(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* Set the option start bit */
  HAL_FLASH_OB_Launch();
 80008d8:	f000 ffee 	bl	80018b8 <HAL_FLASH_OB_Launch>

  /* Set the option lock bit and Lock the flash */
  HAL_FLASH_OB_Lock();
 80008dc:	f000 ffd0 	bl	8001880 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 80008e0:	f000 ff8e 	bl	8001800 <HAL_FLASH_Lock>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <OPENBL_OB_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_OB_Read(uint32_t Address)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
	...

08000900 <OPENBL_OB_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_OB_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t timeout = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

  /* Unlock the FLASH & Option Bytes Registers access */
  HAL_FLASH_Unlock();
 8000910:	f000 ff54 	bl	80017bc <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 8000914:	f000 ff8e 	bl	8001834 <HAL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000918:	4b58      	ldr	r3, [pc, #352]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a57      	ldr	r2, [pc, #348]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 800091e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000926:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800092a:	611a      	str	r2, [r3, #16]

  /* Write USER OPT + RDP level */
  if (DataLength >= 1U)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d013      	beq.n	800095a <OPENBL_OB_Write+0x5a>
  {
    WRITE_REG(FLASH->OPTR, (*(Data) | (*(Data + 1U) << 8U) | (*(Data + 2U) << 16U) | (*(Data + 3U) << 24U)));
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3301      	adds	r3, #1
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	431a      	orrs	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	3302      	adds	r3, #2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	041b      	lsls	r3, r3, #16
 800094a:	431a      	orrs	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3303      	adds	r3, #3
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	061b      	lsls	r3, r3, #24
 8000954:	431a      	orrs	r2, r3
 8000956:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000958:	621a      	str	r2, [r3, #32]
  }

  /* Write PCROP1ASR */
  if (DataLength > 8U)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b08      	cmp	r3, #8
 800095e:	d904      	bls.n	800096a <OPENBL_OB_Write+0x6a>
  {
    WRITE_REG(FLASH->PCROP1ASR, (*(Data + 8U)));
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3308      	adds	r3, #8
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Write PCROP1AER */
  if (DataLength > 16U)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b10      	cmp	r3, #16
 800096e:	d90a      	bls.n	8000986 <OPENBL_OB_Write+0x86>
  {
    WRITE_REG(FLASH->PCROP1AER, (*(Data + 16U) | (*(Data + 19U) << 24U)));
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3310      	adds	r3, #16
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3313      	adds	r3, #19
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	061b      	lsls	r3, r3, #24
 8000980:	431a      	orrs	r2, r3
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write WRP1AR */
  if (DataLength > 24U)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b18      	cmp	r3, #24
 800098a:	d90a      	bls.n	80009a2 <OPENBL_OB_Write+0xa2>
  {
    WRITE_REG(FLASH->WRP1AR, (*(Data + 24U) | (*(Data + 26U) << 16U)));
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3318      	adds	r3, #24
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	331a      	adds	r3, #26
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	041b      	lsls	r3, r3, #16
 800099c:	431a      	orrs	r2, r3
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Write WRP1BR */
  if (DataLength > 32U)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b20      	cmp	r3, #32
 80009a6:	d90a      	bls.n	80009be <OPENBL_OB_Write+0xbe>
  {
    WRITE_REG(FLASH->WRP1BR, (*(Data + 32U) | (*(Data + 34U) << 16U)));
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3320      	adds	r3, #32
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3322      	adds	r3, #34	; 0x22
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	041b      	lsls	r3, r3, #16
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Write PCROP1BSR */
  if (DataLength > 40U)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b28      	cmp	r3, #40	; 0x28
 80009c2:	d904      	bls.n	80009ce <OPENBL_OB_Write+0xce>
  {
    WRITE_REG(FLASH->PCROP1BSR, (*(Data + 40U)));
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3328      	adds	r3, #40	; 0x28
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Write PCROP1BER */
  if (DataLength > 48U)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b30      	cmp	r3, #48	; 0x30
 80009d2:	d904      	bls.n	80009de <OPENBL_OB_Write+0xde>
  {
    WRITE_REG(FLASH->PCROP1BER, (*(Data + 48U)));
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	3330      	adds	r3, #48	; 0x30
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Write IPCCBR */
  if (DataLength > 104U)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b68      	cmp	r3, #104	; 0x68
 80009e2:	d913      	bls.n	8000a0c <OPENBL_OB_Write+0x10c>
  {
    WRITE_REG(FLASH->IPCCBR, (*(Data + 104U) | (*(Data + 105U) << 8U)));
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	3368      	adds	r3, #104	; 0x68
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	3369      	adds	r3, #105	; 0x69
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	431a      	orrs	r2, r3
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 80009f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Check the BSY bit for potential FLASH on going operation */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80009fa:	e007      	b.n	8000a0c <OPENBL_OB_Write+0x10c>
  {
    if ((timeout++) >= OPENBL_OB_TIMEOUT)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	617a      	str	r2, [r7, #20]
 8000a02:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8000a06:	d301      	bcc.n	8000a0c <OPENBL_OB_Write+0x10c>
    {
      NVIC_SystemReset();
 8000a08:	f7ff ff4e 	bl	80008a8 <__NVIC_SystemReset>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a18:	d0f0      	beq.n	80009fc <OPENBL_OB_Write+0xfc>
    }
  }
  timeout = 0U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  /* Check the PESD bit*/
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PESD))
 8000a1e:	e007      	b.n	8000a30 <OPENBL_OB_Write+0x130>
  {
    if ((timeout++) >= OPENBL_OB_TIMEOUT)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	617a      	str	r2, [r7, #20]
 8000a26:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8000a2a:	d301      	bcc.n	8000a30 <OPENBL_OB_Write+0x130>
    {
      NVIC_SystemReset();
 8000a2c:	f7ff ff3c 	bl	80008a8 <__NVIC_SystemReset>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PESD))
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a3c:	d0f0      	beq.n	8000a20 <OPENBL_OB_Write+0x120>
    }
  }
  timeout = 0U;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]

  /* Trigger options bytes programming operation */
  SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6153      	str	r3, [r2, #20]

  /* Check the BSY bit for potential FLASH on going operation */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a4e:	e007      	b.n	8000a60 <OPENBL_OB_Write+0x160>
  {
    if ((timeout++) >= OPENBL_OB_TIMEOUT)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	617a      	str	r2, [r7, #20]
 8000a56:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8000a5a:	d301      	bcc.n	8000a60 <OPENBL_OB_Write+0x160>
    {
      NVIC_SystemReset();
 8000a5c:	f7ff ff24 	bl	80008a8 <__NVIC_SystemReset>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <OPENBL_OB_Write+0x17c>)
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a6c:	d0f0      	beq.n	8000a50 <OPENBL_OB_Write+0x150>
    }
  }

  /* Register system reset callback */
  Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <OPENBL_OB_Write+0x180>)
 8000a70:	f7ff fcd0 	bl	8000414 <Common_SetPostProcessingCallback>
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000
 8000a80:	080008d5 	.word	0x080008d5

08000a84 <OPENBL_OTP_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_OTP_Read(uint32_t Address)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <OPENBL_OTP_Write>:
  * @param  pData The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_OTP_Write(uint32_t Address, uint8_t *pData, uint32_t DataLength)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b088      	sub	sp, #32
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  uint32_t index;
  uint8_t remaining_data[OTP_PROG_STEP_SIZE] = {0x0};
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  uint8_t remaining;

  if ((pData != NULL) && (DataLength != 0U))
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d04f      	beq.n	8000b54 <OPENBL_OTP_Write+0xba>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d04c      	beq.n	8000b54 <OPENBL_OTP_Write+0xba>
  {
    /* Unlock the flash memory for write operation */
    HAL_FLASH_Unlock();
 8000aba:	f000 fe7f 	bl	80017bc <HAL_FLASH_Unlock>

    /* Program double-word by double-word (8 bytes) */
    while ((DataLength >> 3U) > 0U)
 8000abe:	e00e      	b.n	8000ade <OPENBL_OTP_Write+0x44>
    {
      OPENBL_OTP_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)pData))));
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 f84a 	bl	8000b60 <OPENBL_OTP_Program>

      Address    += OTP_PROG_STEP_SIZE;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3308      	adds	r3, #8
 8000ad0:	60fb      	str	r3, [r7, #12]
      pData      += OTP_PROG_STEP_SIZE;
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
      DataLength -= OTP_PROG_STEP_SIZE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b08      	subs	r3, #8
 8000adc:	607b      	str	r3, [r7, #4]
    while ((DataLength >> 3U) > 0U)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1ec      	bne.n	8000ac0 <OPENBL_OTP_Write+0x26>
    }

    /* If remaining count, go back to fill the rest with 0xFF */
    if (DataLength > 0U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d031      	beq.n	8000b50 <OPENBL_OTP_Write+0xb6>
    {
      remaining = OTP_PROG_STEP_SIZE - DataLength;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f1c3 0308 	rsb	r3, r3, #8
 8000af4:	76fb      	strb	r3, [r7, #27]

      /* copy the remaining bytes */
      for (index = 0U; index < DataLength; index++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	e00c      	b.n	8000b16 <OPENBL_OTP_Write+0x7c>
      {
        remaining_data[index] = *(pData + index);
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	4413      	add	r3, r2
 8000b02:	7819      	ldrb	r1, [r3, #0]
 8000b04:	f107 0210 	add.w	r2, r7, #16
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
      for (index = 0U; index < DataLength; index++)
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3301      	adds	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3ee      	bcc.n	8000afc <OPENBL_OTP_Write+0x62>
      }

      /* Fill the upper bytes with 0xFF */
      for (index = 0U; index < remaining; index++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	e00a      	b.n	8000b3a <OPENBL_OTP_Write+0xa0>
      {
        remaining_data[index + DataLength] = 0xFFU;
 8000b24:	69fa      	ldr	r2, [r7, #28]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	443b      	add	r3, r7
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (index = 0U; index < remaining; index++)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	3301      	adds	r3, #1
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	7efb      	ldrb	r3, [r7, #27]
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3f0      	bcc.n	8000b24 <OPENBL_OTP_Write+0x8a>
      }

      /* FLASH word program */
      OPENBL_OTP_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)remaining_data))));
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f000 f808 	bl	8000b60 <OPENBL_OTP_Program>
    }

    /* Lock the Flash to disable the flash control register access */
    HAL_FLASH_Lock();
 8000b50:	f000 fe56 	bl	8001800 <HAL_FLASH_Lock>
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 8000b54:	f000 fe54 	bl	8001800 <HAL_FLASH_Lock>
}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <OPENBL_OTP_Program>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None.
  */
static void OPENBL_OTP_Program(uint32_t Address, uint64_t Data)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Clear all FLASH errors flags before starting write operation */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <OPENBL_OTP_Program+0x34>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <OPENBL_OTP_Program+0x34>)
 8000b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <OPENBL_OTP_Program+0x34>)
 8000b7a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000b7e:	611a      	str	r2, [r3, #16]

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8000b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b84:	68f9      	ldr	r1, [r7, #12]
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fdd4 	bl	8001734 <HAL_FLASH_Program>
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58004000 	.word	0x58004000

08000b98 <OPENBL_RAM_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_RAM_Read(uint32_t Address)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <OPENBL_RAM_Write>:
  * @param  pData The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_RAM_Write(uint32_t Address, uint8_t *pData, uint32_t DataLength)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b087      	sub	sp, #28
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  uint32_t index;
  uint32_t aligned_length = DataLength;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	613b      	str	r3, [r7, #16]

  if (aligned_length & 0x3)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <OPENBL_RAM_Write+0x24>
  {
    aligned_length = (aligned_length & 0xFCU) + 4U;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000bce:	3304      	adds	r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
  }

  for (index = 0U; index < aligned_length; index += 4U)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e00a      	b.n	8000bee <OPENBL_RAM_Write+0x40>
  {
    *(__IO uint32_t *)(Address + index) = *(__IO uint32_t *)(pData + index);
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	4413      	add	r3, r2
 8000bde:	68f9      	ldr	r1, [r7, #12]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	440a      	add	r2, r1
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < aligned_length; index += 4U)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3304      	adds	r3, #4
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3f0      	bcc.n	8000bd8 <OPENBL_RAM_Write+0x2a>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <OPENBL_RAM_JumpToAddress>:
  * @brief  This function is used to jump to a given address.
  * @param  Address The address where the function will jump.
  * @retval None.
  */
void OPENBL_RAM_JumpToAddress(uint32_t Address)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  Function_Pointer jump_to_address;

  /* De-initialize all HW resources used by the Open Bootloader to their reset values */
  OPENBL_DeInit();
 8000c0a:	f003 fcad 	bl	8004568 <OPENBL_DeInit>

  /* Enable IRQ */
  Common_EnableIrq();
 8000c0e:	f7ff fbe6 	bl	80003de <Common_EnableIrq>

  jump_to_address = (Function_Pointer)(*(__IO uint32_t *)(Address + 4U));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Initialize user application's stack pointer */
  Common_SetMsp(*(__IO uint32_t *) Address);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fbce 	bl	80003c0 <Common_SetMsp>

  jump_to_address();
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4798      	blx	r3
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c54:	68fb      	ldr	r3, [r7, #12]
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c84:	68fb      	ldr	r3, [r7, #12]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	605a      	str	r2, [r3, #4]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d101      	bne.n	8000d2c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <LL_SPI_EnableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_EnableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	605a      	str	r2, [r3, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	330c      	adds	r3, #12
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <OPENBL_SPI_Init>:
/**
 * @brief  This function is used to initialize the SPI peripheral
 * @retval None.
 */
static void OPENBL_SPI_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2228      	movs	r2, #40	; 0x28
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fd9b 	bl	80068b8 <memset>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
  SPI_InitStruct.Mode              = LL_SPI_MODE_SLAVE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  SPI_InitStruct.DataWidth         = LL_SPI_DATAWIDTH_8BIT;
 8000d8a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d8e:	60bb      	str	r3, [r7, #8]
  SPI_InitStruct.ClockPolarity     = LL_SPI_POLARITY_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  SPI_InitStruct.ClockPhase        = LL_SPI_PHASE_1EDGE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  SPI_InitStruct.NSS               = LL_SPI_NSS_SOFT;
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	617b      	str	r3, [r7, #20]
  SPI_InitStruct.BaudRate          = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.BitOrder          = LL_SPI_MSB_FIRST;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.CRCCalculation    = LL_SPI_CRCCALCULATION_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.CRCPoly           = 7U;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24

  LL_SPI_Init(SPIx, &SPI_InitStruct);
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <OPENBL_SPI_Init+0x70>)
 8000db4:	f003 f9e8 	bl	8004188 <LL_SPI_Init>
  LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <OPENBL_SPI_Init+0x70>)
 8000dbe:	f7ff ff97 	bl	8000cf0 <LL_SPI_SetRxFIFOThreshold>

  HAL_NVIC_SetPriority(SPIx_IRQn, 0U, 0U);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f000 fc71 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPIx_IRQn);
 8000dcc:	2022      	movs	r0, #34	; 0x22
 8000dce:	f000 fc88 	bl	80016e2 <HAL_NVIC_EnableIRQ>

  LL_SPI_Enable(SPIx);
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <OPENBL_SPI_Init+0x70>)
 8000dd4:	f7ff ff6e 	bl	8000cb4 <LL_SPI_Enable>
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000

08000de4 <OPENBL_SPI_Configuration>:
/**
 * @brief  This function is used to configure SPI pins and then initialize the used SPI instance.
 * @retval None.
 */
void OPENBL_SPI_Configuration(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /* Enable all resources clocks --------------------------------------------*/
  /* Enable used GPIOx clocks */
  SPIx_GPIO_CLK_SCK_ENABLE();
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ff19 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
  SPIx_GPIO_CLK_MISO_ENABLE();
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ff16 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
  SPIx_GPIO_CLK_MOSI_ENABLE();
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff ff13 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
  SPIx_GPIO_CLK_NSS_ENABLE();
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff ff10 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>

  /* Enable SPI clock */
  SPIx_CLK_ENABLE();
 8000e10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e14:	f7ff ff24 	bl	8000c60 <LL_APB2_GRP1_EnableClock>
     | SCK |     PA5     |
     +-----+-------------+
     | NSS |     PA4     |
     +-----+-------------+ */

  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = SPIx_ALTERNATE;
 8000e24:	2305      	movs	r3, #5
 8000e26:	617b      	str	r3, [r7, #20]

  /* SPI MOSI pin configuration */
  GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(SPIx_MOSI_PIN_PORT, &GPIO_InitStruct);
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f001 fb16 	bl	8002464 <HAL_GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8000e38:	2340      	movs	r3, #64	; 0x40
 8000e3a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(SPIx_MISO_PIN_PORT, &GPIO_InitStruct);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f001 fb0e 	bl	8002464 <HAL_GPIO_Init>

  /* SPI SCK pin configuration */
  GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(SPIx_SCK_PIN_PORT, &GPIO_InitStruct);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 fb06 	bl	8002464 <HAL_GPIO_Init>

  /* SPI NSS pin configuration */
  GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(SPIx_NSS_PIN_PORT, &GPIO_InitStruct);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f001 fafe 	bl	8002464 <HAL_GPIO_Init>

  OPENBL_SPI_Init();
 8000e68:	f7ff ff82 	bl	8000d70 <OPENBL_SPI_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <OPENBL_SPI_DeInit>:
/**
 * @brief  This function is used to De-initialize the SPI pins and instance.
 * @retval None.
 */
void OPENBL_SPI_DeInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Only de-initialize the SPI if it is not the current detected interface */
  if (SpiDetected == 0U)
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <OPENBL_SPI_DeInit+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <OPENBL_SPI_DeInit+0x1a>
  {
    LL_SPI_Disable(SPIx);
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <OPENBL_SPI_DeInit+0x24>)
 8000e82:	f7ff ff26 	bl	8000cd2 <LL_SPI_Disable>

    SPIx_CLK_DISABLE();
 8000e86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e8a:	f7ff ff01 	bl	8000c90 <LL_APB2_GRP1_DisableClock>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200003c6 	.word	0x200003c6
 8000e98:	40013000 	.word	0x40013000

08000e9c <OPENBL_SPI_ProtocolDetection>:
/**
 * @brief  This function is used to detect if there is any activity on SPI protocol.
 * @retval None.
 */
uint8_t OPENBL_SPI_ProtocolDetection(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Check if there is any activity on SPI */
  if (LL_SPI_IsActiveFlag_RXNE(SPIx) != 0)
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <OPENBL_SPI_ProtocolDetection+0x4c>)
 8000ea2:	f7ff ff37 	bl	8000d14 <LL_SPI_IsActiveFlag_RXNE>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d016      	beq.n	8000eda <OPENBL_SPI_ProtocolDetection+0x3e>
  {
    /* Check that Synchronization byte has been received on SPI */
    if (LL_SPI_ReceiveData8(SPIx) == SPI_SYNC_BYTE)
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <OPENBL_SPI_ProtocolDetection+0x4c>)
 8000eae:	f7ff ff52 	bl	8000d56 <LL_SPI_ReceiveData8>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b5a      	cmp	r3, #90	; 0x5a
 8000eb6:	d10c      	bne.n	8000ed2 <OPENBL_SPI_ProtocolDetection+0x36>
    {
      SpiDetected = 1U;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <OPENBL_SPI_ProtocolDetection+0x50>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]

      /* Enable the interrupt of Rx not empty buffer */
      LL_SPI_EnableIT_RXNE(SPIx);
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <OPENBL_SPI_ProtocolDetection+0x4c>)
 8000ec0:	f7ff ff3a 	bl	8000d38 <LL_SPI_EnableIT_RXNE>

      /* Send synchronization byte */
      OPENBL_SPI_SendByte(SYNC_BYTE);
 8000ec4:	20a5      	movs	r0, #165	; 0xa5
 8000ec6:	f005 fd2f 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

      /* Send acknowledgment */
      OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8000eca:	2079      	movs	r0, #121	; 0x79
 8000ecc:	f000 f832 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
 8000ed0:	e006      	b.n	8000ee0 <OPENBL_SPI_ProtocolDetection+0x44>
    }
    else
    {
      SpiDetected = 0U;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <OPENBL_SPI_ProtocolDetection+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <OPENBL_SPI_ProtocolDetection+0x44>
    }
  }
  else
  {
    SpiDetected = 0U;
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <OPENBL_SPI_ProtocolDetection+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
  }

  return SpiDetected;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <OPENBL_SPI_ProtocolDetection+0x50>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	200003c6 	.word	0x200003c6

08000ef0 <OPENBL_SPI_GetCommandOpcode>:
/**
 * @brief  This function is used to get the command opcode from the host.
 * @retval Returns the command.
 */
uint8_t OPENBL_SPI_GetCommandOpcode(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  uint8_t command_opc;

  /* Disable busy byte */
  BusyState = 0U;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <OPENBL_SPI_GetCommandOpcode+0x40>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]

  /* Check if there is any activity on SPI */
  while (OPENBL_SPI_ReadByte() != SPI_SYNC_BYTE)
 8000efc:	bf00      	nop
 8000efe:	f005 fd17 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b5a      	cmp	r3, #90	; 0x5a
 8000f06:	d1fa      	bne.n	8000efe <OPENBL_SPI_GetCommandOpcode+0xe>
  {}

  /* Get the command opcode */
  command_opc = OPENBL_SPI_ReadByte();
 8000f08:	f005 fd12 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]

  /* Check the data integrity */
  if ((command_opc ^ OPENBL_SPI_ReadByte()) != 0xFFU)
 8000f10:	f005 fd0e 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4053      	eors	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d001      	beq.n	8000f26 <OPENBL_SPI_GetCommandOpcode+0x36>
  {
    command_opc = ERROR_COMMAND;
 8000f22:	23ec      	movs	r3, #236	; 0xec
 8000f24:	71fb      	strb	r3, [r7, #7]
  }

  return command_opc;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200003c5 	.word	0x200003c5

08000f34 <OPENBL_SPI_SendAcknowledgeByte>:
/**
  * @brief  This function is used to send acknowledge byte through SPI pipe.
  * @retval None.
  */
void OPENBL_SPI_SendAcknowledgeByte(uint8_t Byte)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the AN4286 for the acknowledge procedure */
  OPENBL_SPI_SendByte(SPI_DUMMY_BYTE);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f005 fcf2 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  OPENBL_SPI_SendByte(Byte);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fcee 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  /* Wait for the host to send ACK synchronization byte */
  while (OPENBL_SPI_ReadByte() != ACK_BYTE)
 8000f4c:	bf00      	nop
 8000f4e:	f005 fcef 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b79      	cmp	r3, #121	; 0x79
 8000f56:	d1fa      	bne.n	8000f4e <OPENBL_SPI_SendAcknowledgeByte+0x1a>
  {}

  OPENBL_SPI_SendByte(SPI_DUMMY_BYTE);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f005 fce5 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <OPENBL_SPI_EnableBusyState>:
/**
  * @brief  This function enables the send of busy state.
  * @retval None.
  */
void OPENBL_SPI_EnableBusyState(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  BusyState = 1U;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <OPENBL_SPI_EnableBusyState+0x14>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200003c5 	.word	0x200003c5

08000f80 <OPENBL_SPI_DisableBusyState>:
/**
  * @brief  This function disables the send of busy state.
  * @retval None.
  */
void OPENBL_SPI_DisableBusyState(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  BusyState = 0U;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <OPENBL_SPI_DisableBusyState+0x14>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200003c5 	.word	0x200003c5

08000f98 <OPENBL_SPI_SpecialCommandProcess>:
 *         The user must define the special commands routine here.
 * @param  SpecialCmd Pointer to the OPENBL_SpecialCmdTypeDef structure.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
void OPENBL_SPI_SpecialCommandProcess(OPENBL_SpecialCmdTypeDef *SpecialCmd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  switch (SpecialCmd->OpCode)
  {
    /* Unknown command opcode */
    default:
      if (SpecialCmd->CmdType == OPENBL_SPECIAL_CMD)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d10c      	bne.n	8000fc2 <OPENBL_SPI_SpecialCommandProcess+0x2a>
      {
        /* Send NULL data size */
        OPENBL_SPI_SendByte(0x00U);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f005 fcbd 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
        OPENBL_SPI_SendByte(0x00U);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f005 fcba 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

        /* Send NULL status size */
        OPENBL_SPI_SendByte(0x00U);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f005 fcb7 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
        OPENBL_SPI_SendByte(0x00U);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f005 fcb4 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
      {
        /* Send NULL status size */
        OPENBL_SPI_SendByte(0x00U);
        OPENBL_SPI_SendByte(0x00U);
      }
      break;
 8000fc0:	e009      	b.n	8000fd6 <OPENBL_SPI_SpecialCommandProcess+0x3e>
      else if (SpecialCmd->CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d105      	bne.n	8000fd6 <OPENBL_SPI_SpecialCommandProcess+0x3e>
        OPENBL_SPI_SendByte(0x00U);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f005 fcac 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
        OPENBL_SPI_SendByte(0x00U);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f005 fca9 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
      break;
 8000fd6:	bf00      	nop
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <OPENBL_ICP_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_ICP_Read(uint32_t Address)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <LL_AHB2_GRP1_EnableClock>:
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b085      	sub	sp, #20
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4313      	orrs	r3, r2
 800100c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4013      	ands	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <LL_APB2_GRP1_EnableClock>:
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4313      	orrs	r3, r2
 800103c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4013      	ands	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <LL_APB2_GRP1_DisableClock>:
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800105e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001062:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	43db      	mvns	r3, r3
 8001068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800106c:	4013      	ands	r3, r2
 800106e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 0201 	bic.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <LL_USART_EnableAutoBaudRate>:
  * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_ABREN);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <LL_USART_SetAutoBaudRateMode>:
  *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
  *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	605a      	str	r2, [r3, #4]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	2b20      	cmp	r3, #32
 800110a:	d101      	bne.n	8001110 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112c:	2b40      	cmp	r3, #64	; 0x40
 800112e:	d101      	bne.n	8001134 <LL_USART_IsActiveFlag_TC+0x18>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <LL_USART_IsActiveFlag_TC+0x1a>
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <OPENBL_USART_Init>:
/**
 * @brief  This function is used to initialize the used USART instance.
 * @retval None.
 */
static void OPENBL_USART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct;

  USART_InitStruct.PrescalerValue      = LL_USART_PRESCALER_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
  USART_InitStruct.BaudRate            = 115200U;
 800117e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001182:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth           = LL_USART_DATAWIDTH_9B;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits            = LL_USART_STOPBITS_1;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity              = LL_USART_PARITY_EVEN;
 800118e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001192:	613b      	str	r3, [r7, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8001198:	230c      	movs	r3, #12
 800119a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.OverSampling        = LL_USART_OVERSAMPLING_16;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]

  if (IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx))
  {
    LL_USART_EnableAutoBaudRate(USARTx);
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <OPENBL_USART_Init+0x54>)
 80011a2:	f7ff ff88 	bl	80010b6 <LL_USART_EnableAutoBaudRate>
    LL_USART_SetAutoBaudRateMode(USARTx, LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME);
 80011a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <OPENBL_USART_Init+0x54>)
 80011ac:	f7ff ff92 	bl	80010d4 <LL_USART_SetAutoBaudRateMode>
  {
    LL_USART_DisableAutoBaudRate(USARTx);
    USART_InitStruct.BaudRate = 115200U;
  }

  LL_USART_Init(USARTx, &USART_InitStruct);
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <OPENBL_USART_Init+0x54>)
 80011b6:	f003 f94f 	bl	8004458 <LL_USART_Init>
  LL_USART_Enable(USARTx);
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <OPENBL_USART_Init+0x54>)
 80011bc:	f7ff ff5d 	bl	800107a <LL_USART_Enable>
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013800 	.word	0x40013800

080011cc <OPENBL_USART_Configuration>:
/**
 * @brief  This function is used to configure USART pins and then initialize the used USART instance.
 * @retval None.
 */
void OPENBL_USART_Configuration(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable all resources clocks --------------------------------------------*/
  /* Enable used GPIOx clocks */
  USARTx_GPIO_CLK_TX_ENABLE();
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff ff0f 	bl	8000ff6 <LL_AHB2_GRP1_EnableClock>
  USARTx_GPIO_CLK_RX_ENABLE();
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff ff0c 	bl	8000ff6 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  USARTx_CLK_ENABLE();
 80011de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011e2:	f7ff ff20 	bl	8001026 <LL_APB2_GRP1_EnableClock>
    +-----+-------------+
    | TX  |     PA9     |
    +-----+-------------+
    | RX  |     PA10    |
    +-----+-------------+ */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2302      	movs	r3, #2
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = USARTx_ALTERNATE;
 80011f6:	2307      	movs	r3, #7
 80011f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <OPENBL_USART_Configuration+0x54>)
 8001200:	f001 f930 	bl	8002464 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <OPENBL_USART_Configuration+0x54>)
 800120e:	f001 f929 	bl	8002464 <HAL_GPIO_Init>

  OPENBL_USART_Init();
 8001212:	f7ff ffaf 	bl	8001174 <OPENBL_USART_Init>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	48000400 	.word	0x48000400

08001224 <OPENBL_USART_DeInit>:
/**
 * @brief  This function is used to De-initialize the USART pins and instance.
 * @retval None.
 */
void OPENBL_USART_DeInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Only de-initialize the USART if it is not the current detected interface */
  if (UsartDetected == 0U)
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <OPENBL_USART_DeInit+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <OPENBL_USART_DeInit+0x1a>
  {
    LL_USART_Disable(USARTx);
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <OPENBL_USART_DeInit+0x24>)
 8001232:	f7ff ff31 	bl	8001098 <LL_USART_Disable>

    USARTx_CLK_DISABLE();
 8001236:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800123a:	f7ff ff0c 	bl	8001056 <LL_APB2_GRP1_DisableClock>
  }
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200003c7 	.word	0x200003c7
 8001248:	40013800 	.word	0x40013800

0800124c <OPENBL_USART_ProtocolDetection>:
/**
 * @brief  This function is used to detect if there is any activity on USART protocol.
 * @retval Returns 1 if interface is detected else 0.
 */
uint8_t OPENBL_USART_ProtocolDetection(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Check if the USARTx is addressed */
  if (((USARTx->ISR & LL_USART_ISR_ABRF) != 0) && ((USARTx->ISR & LL_USART_ISR_ABRE) == 0))
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <OPENBL_USART_ProtocolDetection+0x3c>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <OPENBL_USART_ProtocolDetection+0x2e>
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <OPENBL_USART_ProtocolDetection+0x3c>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <OPENBL_USART_ProtocolDetection+0x2e>
  {
    /* Read byte in order to flush the 0x7F synchronization byte */
    OPENBL_USART_ReadByte();
 8001268:	f000 f82a 	bl	80012c0 <OPENBL_USART_ReadByte>

    /* Acknowledge the host */
    OPENBL_USART_SendByte(ACK_BYTE);
 800126c:	2079      	movs	r0, #121	; 0x79
 800126e:	f000 f83b 	bl	80012e8 <OPENBL_USART_SendByte>

    UsartDetected = 1U;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <OPENBL_USART_ProtocolDetection+0x40>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e002      	b.n	8001280 <OPENBL_USART_ProtocolDetection+0x34>
  }
  else
  {
    UsartDetected = 0U;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <OPENBL_USART_ProtocolDetection+0x40>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
  }

  return UsartDetected;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <OPENBL_USART_ProtocolDetection+0x40>)
 8001282:	781b      	ldrb	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40013800 	.word	0x40013800
 800128c:	200003c7 	.word	0x200003c7

08001290 <OPENBL_USART_GetCommandOpcode>:
/**
 * @brief  This function is used to get the command opcode from the host.
 * @retval Returns the command.
 */
uint8_t OPENBL_USART_GetCommandOpcode(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
  uint8_t command_opc;

  /* Get the command opcode */
  command_opc = OPENBL_USART_ReadByte();
 8001296:	f000 f813 	bl	80012c0 <OPENBL_USART_ReadByte>
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]

  /* Check the data integrity */
  if ((command_opc ^ OPENBL_USART_ReadByte()) != 0xFFU)
 800129e:	f000 f80f 	bl	80012c0 <OPENBL_USART_ReadByte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	4053      	eors	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2bff      	cmp	r3, #255	; 0xff
 80012ae:	d001      	beq.n	80012b4 <OPENBL_USART_GetCommandOpcode+0x24>
  {
    command_opc = ERROR_COMMAND;
 80012b0:	23ec      	movs	r3, #236	; 0xec
 80012b2:	71fb      	strb	r3, [r7, #7]
  }

  return command_opc;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <OPENBL_USART_ReadByte>:
/**
  * @brief  This function is used to read one byte from USART pipe.
  * @retval Returns the read byte.
  */
uint8_t OPENBL_USART_ReadByte(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  while (!LL_USART_IsActiveFlag_RXNE(USARTx))
 80012c4:	e001      	b.n	80012ca <OPENBL_USART_ReadByte+0xa>
  {
    OPENBL_IWDG_Refresh();
 80012c6:	f7ff fae1 	bl	800088c <OPENBL_IWDG_Refresh>
  while (!LL_USART_IsActiveFlag_RXNE(USARTx))
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <OPENBL_USART_ReadByte+0x24>)
 80012cc:	f7ff ff14 	bl	80010f8 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f7      	beq.n	80012c6 <OPENBL_USART_ReadByte+0x6>
  }

  return LL_USART_ReceiveData8(USARTx);
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <OPENBL_USART_ReadByte+0x24>)
 80012d8:	f7ff ff32 	bl	8001140 <LL_USART_ReceiveData8>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40013800 	.word	0x40013800

080012e8 <OPENBL_USART_SendByte>:
  * @brief  This function is used to send one byte through USART pipe.
  * @param  Byte The byte to be sent.
  * @retval None.
  */
void OPENBL_USART_SendByte(uint8_t Byte)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  LL_USART_TransmitData8(USARTx, (Byte & 0xFFU));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <OPENBL_USART_SendByte+0x2c>)
 80012f8:	f7ff ff2e 	bl	8001158 <LL_USART_TransmitData8>

  while (!LL_USART_IsActiveFlag_TC(USARTx))
 80012fc:	bf00      	nop
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <OPENBL_USART_SendByte+0x2c>)
 8001300:	f7ff ff0c 	bl	800111c <LL_USART_IsActiveFlag_TC>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f9      	beq.n	80012fe <OPENBL_USART_SendByte+0x16>
  {
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40013800 	.word	0x40013800

08001318 <OPENBL_USART_SpecialCommandProcess>:
 *         The user must define the special commands routine here.
 * @param  SpecialCmd Pointer to the OPENBL_SpecialCmdTypeDef structure.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
void OPENBL_USART_SpecialCommandProcess(OPENBL_SpecialCmdTypeDef *SpecialCmd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  switch (SpecialCmd->OpCode)
  {
    /* Unknown command opcode */
    default:
      if (SpecialCmd->CmdType == OPENBL_SPECIAL_CMD)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d10c      	bne.n	8001342 <OPENBL_USART_SpecialCommandProcess+0x2a>
      {
        /* Send NULL data size */
        OPENBL_USART_SendByte(0x00U);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ffdd 	bl	80012e8 <OPENBL_USART_SendByte>
        OPENBL_USART_SendByte(0x00U);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ffda 	bl	80012e8 <OPENBL_USART_SendByte>

        /* Send NULL status size */
        OPENBL_USART_SendByte(0x00U);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffd7 	bl	80012e8 <OPENBL_USART_SendByte>
        OPENBL_USART_SendByte(0x00U);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ffd4 	bl	80012e8 <OPENBL_USART_SendByte>
      {
        /* Send NULL status size */
        OPENBL_USART_SendByte(0x00U);
        OPENBL_USART_SendByte(0x00U);
      }
      break;
 8001340:	e009      	b.n	8001356 <OPENBL_USART_SpecialCommandProcess+0x3e>
      else if (SpecialCmd->CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d105      	bne.n	8001356 <OPENBL_USART_SpecialCommandProcess+0x3e>
        OPENBL_USART_SendByte(0x00U);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff ffcc 	bl	80012e8 <OPENBL_USART_SendByte>
        OPENBL_USART_SendByte(0x00U);
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ffc9 	bl	80012e8 <OPENBL_USART_SendByte>
      break;
 8001356:	bf00      	nop
  }
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001362:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001364:	f000 f825 	bl	80013b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800138e:	f005 fa9b 	bl	80068c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7fe fef1 	bl	8000178 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   r0, =_estack
 8001398:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80013a4:	08006a40 	.word	0x08006a40
  ldr r2, =_sbss
 80013a8:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80013ac:	20000e48 	.word	0x20000e48

080013b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>

080013b2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f964 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80013d0:	f002 fa9a 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_Init+0x3c>)
 80013d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f816 	bl	800140c <HAL_InitTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	e001      	b.n	80013f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013ec:	f000 f808 	bl	8001400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000014c 	.word	0x2000014c

08001400 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_InitTick+0x6c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d024      	beq.n	800146a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001420:	f002 fa72 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_InitTick+0x6c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	fbb3 f3f1 	udiv	r3, r3, r1
 8001434:	fbb2 f3f3 	udiv	r3, r2, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f96e 	bl	800171a <HAL_SYSTICK_Config>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10f      	bne.n	8001464 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d809      	bhi.n	800145e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144a:	2200      	movs	r2, #0
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	f04f 30ff 	mov.w	r0, #4294967295
 8001452:	f000 f92c 	bl	80016ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <HAL_InitTick+0x70>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e007      	b.n	800146e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e004      	b.n	800146e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e001      	b.n	800146e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000154 	.word	0x20000154
 800147c:	20000150 	.word	0x20000150

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x1c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x20>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <HAL_IncTick+0x20>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000154 	.word	0x20000154
 80014a0:	200003c8 	.word	0x200003c8

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_GetTick+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	200003c8 	.word	0x200003c8

080014b8 <__NVIC_SetPriorityGrouping>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4906      	ldr	r1, [pc, #24]	; (8001550 <__NVIC_EnableIRQ+0x34>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_DisableIRQ>:
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db12      	blt.n	800158c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	490a      	ldr	r1, [pc, #40]	; (8001598 <__NVIC_DisableIRQ+0x44>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	3320      	adds	r3, #32
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001586:	f3bf 8f6f 	isb	sy
}
 800158a:	bf00      	nop
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff90 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff09 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff20 	bl	8001500 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff92 	bl	80015f0 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff61 	bl	800159c <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff13 	bl	800151c <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff21 	bl	8001554 <__NVIC_DisableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff96 	bl	8001654 <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_FLASH_Program+0x80>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_FLASH_Program+0x1a>
 800174a:	2302      	movs	r3, #2
 800174c:	e02d      	b.n	80017aa <HAL_FLASH_Program+0x76>
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_FLASH_Program+0x80>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_FLASH_Program+0x80>)
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800175a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175e:	f000 f8bb 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001762:	4603      	mov	r3, r0
 8001764:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11a      	bne.n	80017a2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f000 f910 	bl	800199c <FLASH_Program_DoubleWord>
 800177c:	e004      	b.n	8001788 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f000 f930 	bl	80019e8 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178c:	f000 f8a4 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001790:	4603      	mov	r3, r0
 8001792:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_FLASH_Program+0x84>)
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <HAL_FLASH_Program+0x84>)
 800179e:	4013      	ands	r3, r2
 80017a0:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_FLASH_Program+0x80>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200003cc 	.word	0x200003cc
 80017b8:	58004000 	.word	0x58004000

080017bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_FLASH_Unlock+0x38>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0b      	bge.n	80017e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_FLASH_Unlock+0x38>)
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_FLASH_Unlock+0x3c>)
 80017d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_FLASH_Unlock+0x38>)
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_FLASH_Unlock+0x40>)
 80017d8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_FLASH_Unlock+0x38>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da01      	bge.n	80017e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	58004000 	.word	0x58004000
 80017f8:	45670123 	.word	0x45670123
 80017fc:	cdef89ab 	.word	0xcdef89ab

08001800 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_FLASH_Lock+0x30>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_FLASH_Lock+0x30>)
 8001810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001814:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_FLASH_Lock+0x30>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db01      	blt.n	8001822 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001822:	79fb      	ldrb	r3, [r7, #7]
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	58004000 	.word	0x58004000

08001834 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	71fb      	strb	r3, [r7, #7]

  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_FLASH_OB_Unlock+0x40>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_FLASH_OB_Unlock+0x40>)
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_FLASH_OB_Unlock+0x44>)
 800184e:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_FLASH_OB_Unlock+0x40>)
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_FLASH_OB_Unlock+0x48>)
 8001854:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_FLASH_OB_Unlock+0x40>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001866:	79fb      	ldrb	r3, [r7, #7]
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	58004000 	.word	0x58004000
 8001878:	08192a3b 	.word	0x08192a3b
 800187c:	4c5d6e7f 	.word	0x4c5d6e7f

08001880 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_FLASH_OB_Lock+0x34>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_FLASH_OB_Lock+0x34>)
 8001890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001894:	6153      	str	r3, [r2, #20]

  /* verify option bytes are lock */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_FLASH_OB_Lock+0x34>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	58004000 	.word	0x58004000

080018b8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  /* The OB launch is done from the same register either from CPU1 or CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_FLASH_OB_Launch+0x1c>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_FLASH_OB_Launch+0x1c>)
 80018c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018c6:	6153      	str	r3, [r2, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	58004000 	.word	0x58004000

080018d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fde0 	bl	80014a4 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80018e6:	e009      	b.n	80018fc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80018e8:	f7ff fddc 	bl	80014a4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d801      	bhi.n	80018fc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e047      	b.n	800198c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d0ee      	beq.n	80018e8 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 800191c:	2201      	movs	r2, #1
 800191e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001926:	4013      	ands	r3, r2
 8001928:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <FLASH_WaitForLastOperation+0x6c>
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 8001936:	699a      	ldr	r2, [r3, #24]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800193e:	4915      	ldr	r1, [pc, #84]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 8001940:	4313      	orrs	r3, r2
 8001942:	618b      	str	r3, [r1, #24]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <FLASH_WaitForLastOperation+0x80>
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001956:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00e      	beq.n	800197c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <FLASH_WaitForLastOperation+0xc0>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e011      	b.n	800198c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001968:	f7ff fd9c 	bl	80014a4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d801      	bhi.n	800197c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e007      	b.n	800198c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <FLASH_WaitForLastOperation+0xbc>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001988:	d0ee      	beq.n	8001968 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	58004000 	.word	0x58004000
 8001998:	200003cc 	.word	0x200003cc

0800199c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <FLASH_Program_DoubleWord+0x48>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <FLASH_Program_DoubleWord+0x48>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80019ba:	f3bf 8f6f 	isb	sy
}
 80019be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80019c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	000a      	movs	r2, r1
 80019ce:	2300      	movs	r3, #0
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	3104      	adds	r1, #4
 80019d4:	4613      	mov	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	58004000 	.word	0x58004000

080019e8 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80019f2:	2340      	movs	r3, #64	; 0x40
 80019f4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <FLASH_Program_Fast+0x78>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <FLASH_Program_Fast+0x78>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a10:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8001a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	3304      	adds	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	617b      	str	r3, [r7, #20]
    row_index--;
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ef      	bne.n	8001a18 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8001a38:	bf00      	nop
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <FLASH_Program_Fast+0x78>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d0f8      	beq.n	8001a3a <FLASH_Program_Fast+0x52>
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f383 8810 	msr	PRIMASK, r3
}
 8001a52:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001a54:	bf00      	nop
 8001a56:	3724      	adds	r7, #36	; 0x24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	58004000 	.word	0x58004000

08001a64 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_FLASHEx_Erase+0xac>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_FLASHEx_Erase+0x16>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e046      	b.n	8001b08 <HAL_FLASHEx_Erase+0xa4>
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_FLASHEx_Erase+0xac>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_FLASHEx_Erase+0xac>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8a:	f7ff ff25 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d133      	bne.n	8001b00 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d108      	bne.n	8001ab2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8001aa0:	f000 f944 	bl	8001d2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa8:	f7ff ff16 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e024      	b.n	8001afc <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	e012      	b.n	8001ae8 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001ac2:	68b8      	ldr	r0, [r7, #8]
 8001ac4:	f000 f942 	bl	8001d4c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001acc:	f7ff ff04 	bl	80018d8 <FLASH_WaitForLastOperation>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	601a      	str	r2, [r3, #0]
          break;
 8001ae0:	e00a      	b.n	8001af8 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3e4      	bcc.n	8001ac2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001af8:	f000 f984 	bl	8001e04 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001afc:	f000 f93e 	bl	8001d7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_FLASHEx_Erase+0xac>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]

  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200003cc 	.word	0x200003cc

08001b14 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b1c:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_FLASHEx_OBProgram+0x130>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_FLASHEx_OBProgram+0x14>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e089      	b.n	8001c3c <HAL_FLASHEx_OBProgram+0x128>
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_FLASHEx_OBProgram+0x130>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_FLASHEx_OBProgram+0x130>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_FLASHEx_OBProgram+0x3e>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6858      	ldr	r0, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f000 f969 	bl	8001e24 <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0306 	and.w	r3, r3, #6
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d109      	bne.n	8001b72 <HAL_FLASHEx_OBProgram+0x5e>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, pOBInit->RDPLevel);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6958      	ldr	r0, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6999      	ldr	r1, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f000 f982 	bl	8001e74 <FLASH_OB_OptrConfig>
 8001b70:	e025      	b.n	8001bbe <HAL_FLASHEx_OBProgram+0xaa>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <HAL_FLASHEx_OBProgram+0x88>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 8001b7e:	f000 fb03 	bl	8002188 <FLASH_OB_GetUser>
 8001b82:	60f8      	str	r0, [r7, #12]

    /* Remove BOR LEVEL User Type*/
    optr &= ~OB_USER_BOR_LEV;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001b8a:	60fb      	str	r3, [r7, #12]

    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	461a      	mov	r2, r3
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f96d 	bl	8001e74 <FLASH_OB_OptrConfig>
 8001b9a:	e010      	b.n	8001bbe <HAL_FLASHEx_OBProgram+0xaa>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00a      	beq.n	8001bbe <HAL_FLASHEx_OBProgram+0xaa>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 8001ba8:	f000 fad6 	bl	8002158 <FLASH_OB_GetRDP>
 8001bac:	60f8      	str	r0, [r7, #12]
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, optr);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6958      	ldr	r0, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f000 f95b 	bl	8001e74 <FLASH_OB_OptrConfig>
  {
    /* Do Nothing */
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01c      	beq.n	8001c04 <HAL_FLASHEx_OBProgram+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_OB_PCROP_CONFIG(pOBInit->PCROPConfig));

    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_FLASHEx_OBProgram+0x134>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_FLASHEx_OBProgram+0xd4>
    {
      /* Configure the Zone 1A Proprietary code readout protection */
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69d8      	ldr	r0, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a19      	ldr	r1, [r3, #32]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	461a      	mov	r2, r3
 8001be4:	f000 f964 	bl	8001eb0 <FLASH_OB_PCROP1AConfig>
    }

    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_FLASHEx_OBProgram+0xf0>
    {
      /* Configure the Zone 1B Proprietary code readout protection */
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 f98a 	bl	8001f18 <FLASH_OB_PCROP1BConfig>
    }
  }

#if defined(DUAL_CORE)
  /*  Secure mode and CPU2 Boot Vector */
  if ((pOBInit->OptionType & (OPTIONBYTE_SECURE_MODE | OPTIONBYTE_C2_BOOT_VECT | OPTIONBYTE_C2_DEBUG_ACCESS | OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS)) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_FLASHEx_OBProgram+0x102>
  {
    /* Set the secure flash, SRAM memory start address, CPU2 boot reset vector or CPU2 debug access */
    FLASH_OB_SecureConfig(pOBInit);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f9af 	bl	8001f74 <FLASH_OB_SecureConfig>
  }

  /* IPCC mailbox data buffer address */
  if ((pOBInit->OptionType & OPTIONBYTE_IPCC_BUF_ADDR) != 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <HAL_FLASHEx_OBProgram+0x118>
  {
    /* Configure the IPCC data buffer address */
    FLASH_OB_IPCCBufferAddrConfig(pOBInit->IPCCdataBufAddr);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f992 	bl	8001f50 <FLASH_OB_IPCCBufferAddrConfig>
  }
#endif /* DUAL_CORE */

  /* Proceed the OB Write Operation */
  status = FLASH_OB_ProceedWriteOperation();
 8001c2c:	f000 fbc6 	bl	80023bc <FLASH_OB_ProceedWriteOperation>
 8001c30:	4603      	mov	r3, r0
 8001c32:	72fb      	strb	r3, [r7, #11]

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_FLASHEx_OBProgram+0x130>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200003cc 	.word	0x200003cc
 8001c48:	80000001 	.word	0x80000001

08001c4c <HAL_FLASHEx_OBGetConfig>:
  *                  pOBInit->PCROPConfig should indicate which area is requested
  *                  for the WRP and PCROP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f640 721f 	movw	r2, #3871	; 0xf1f
 8001c5a:	601a      	str	r2, [r3, #0]

  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_FLASHEx_OBGetConfig+0x20>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d109      	bne.n	8001c80 <HAL_FLASHEx_OBGetConfig+0x34>
  {
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6858      	ldr	r0, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f103 0108 	add.w	r1, r3, #8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f000 fa40 	bl	8002100 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001c80:	f000 fa6a 	bl	8002158 <FLASH_OB_GetRDP>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->UserConfig = FLASH_OB_GetUser();
 8001c8a:	f000 fa7d 	bl	8002188 <FLASH_OB_GetUser>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  pOBInit->UserType = OB_USER_ALL;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_FLASHEx_OBGetConfig+0xdc>)
 8001c98:	615a      	str	r2, [r3, #20]

  /* Get the Zone 1A and 1B Proprietary code readout protection */
  FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr), &(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f103 001c 	add.w	r0, r3, #28
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f103 0120 	add.w	r1, r3, #32
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	332c      	adds	r3, #44	; 0x2c
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4623      	mov	r3, r4
 8001cba:	f000 fa7d 	bl	80021b8 <FLASH_OB_GetPCROP>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f043 0203 	orr.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	61da      	str	r2, [r3, #28]

#if defined(DUAL_CORE)
  /* Get the IPCC start Address */
  pOBInit->IPCCdataBufAddr = FLASH_OB_GetIPCCBufferAddr();
 8001cca:	f000 fab1 	bl	8002230 <FLASH_OB_GetIPCCBufferAddr>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the Secure Flash start address, Secure Hide Protection start address Secure Backup SRAM2 start address, Secure non-Backup SRAM1 start address and the Security Mode, */
  FLASH_OB_GetSecureMemoryConfig(&(pOBInit->SecureFlashStartAddr), &(pOBInit->HideProtectionStartAddr), &(pOBInit->SecureSRAM2StartAddr), &(pOBInit->SecureSRAM1StartAddr), &(pOBInit->SecureMode));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3340      	adds	r3, #64	; 0x40
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	f000 faae 	bl	8002254 <FLASH_OB_GetSecureMemoryConfig>

  /* Get the M0+ Secure Boot reset vector address and Secure Boot memory selection */
  FLASH_OB_GetC2BootResetConfig(&(pOBInit->C2SecureBootVectAddr), &(pOBInit->C2BootRegion));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	334c      	adds	r3, #76	; 0x4c
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f000 fb0d 	bl	8002324 <FLASH_OB_GetC2BootResetConfig>

  /* Get the Sub-GHz radio SPI Secure Access */
  pOBInit->SUBGHZSPISecureAccess = FLASH_OB_GetSUBGHZSPISecureAccess();
 8001d0a:	f000 fb3b 	bl	8002384 <FLASH_OB_GetSUBGHZSPISecureAccess>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the CPU2 Debug Access Mode */
  pOBInit->C2DebugAccessMode = FLASH_OB_GetC2DebugAccessMode();
 8001d14:	f000 fb44 	bl	80023a0 <FLASH_OB_GetC2DebugAccessMode>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* DUAL_CORE */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	cf8f7e00 	.word	0xcf8f7e00

08001d2c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <FLASH_MassErase+0x1c>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <FLASH_MassErase+0x1c>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6153      	str	r3, [r2, #20]
#endif
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	58004000 	.word	0x58004000

08001d4c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <FLASH_PageErase+0x2c>)
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <FLASH_PageErase+0x2c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6153      	str	r3, [r2, #20]
#endif
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	58004000 	.word	0x58004000

08001d7c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d117      	bne.n	8001dbc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001d92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001d9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d117      	bne.n	8001df8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <FLASH_FlushCaches+0x84>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	58004000 	.word	0x58004000

08001e04 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <FLASH_AcknowledgePageErase+0x1c>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <FLASH_AcknowledgePageErase+0x1c>)
 8001e0e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	6153      	str	r3, [r2, #20]
#endif
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	58004000 	.word	0x58004000

08001e24 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset Specifies the end page of the write protected area
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the Flash - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <FLASH_OB_WRPConfig+0x2a>
  {
    MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <FLASH_OB_WRPConfig+0x4c>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f023 127f 	bic.w	r2, r3, #8323199	; 0x7f007f
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0419      	lsls	r1, r3, #16
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	490a      	ldr	r1, [pc, #40]	; (8001e70 <FLASH_OB_WRPConfig+0x4c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	62cb      	str	r3, [r1, #44]	; 0x2c
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
               (WRPStartOffset | (WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos)));
  }
}
 8001e4c:	e00a      	b.n	8001e64 <FLASH_OB_WRPConfig+0x40>
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <FLASH_OB_WRPConfig+0x4c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f023 127f 	bic.w	r2, r3, #8323199	; 0x7f007f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0419      	lsls	r1, r3, #16
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	4904      	ldr	r1, [pc, #16]	; (8001e70 <FLASH_OB_WRPConfig+0x4c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	58004000 	.word	0x58004000

08001e74 <FLASH_OB_OptrConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @retval None
  */
#endif
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <FLASH_OB_OptrConfig+0x38>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	4904      	ldr	r1, [pc, #16]	; (8001eac <FLASH_OB_OptrConfig+0x38>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	620b      	str	r3, [r1, #32]
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	58004000 	.word	0x58004000

08001eb0 <FLASH_OB_PCROP1AConfig>:
  * @param  PCROP1AEndAddr Specifies the Zone 1A end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1AStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1AConfig(uint32_t PCROPConfig, uint32_t PCROP1AStartAddr, uint32_t PCROP1AEndAddr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_CONFIG(PCROPConfig));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AEndAddr));

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <FLASH_OB_PCROP1AConfig+0x64>)
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	61fb      	str	r3, [r7, #28]

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <FLASH_OB_PCROP1AConfig+0x46>
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	61bb      	str	r3, [r7, #24]
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001edc:	0a9b      	lsrs	r3, r3, #10
 8001ede:	617b      	str	r3, [r7, #20]

    /* Set Zone A start offset */
    WRITE_REG(FLASH->PCROP1ASR, startoffset);
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <FLASH_OB_PCROP1AConfig+0x64>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6253      	str	r3, [r2, #36]	; 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eec:	61fb      	str	r3, [r7, #28]
    pcrop1aend |= endoffset;
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da03      	bge.n	8001f04 <FLASH_OB_PCROP1AConfig+0x54>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f02:	61fb      	str	r3, [r7, #28]
  }

  /* set 1A End register */
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 8001f04:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <FLASH_OB_PCROP1AConfig+0x64>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	58004000 	.word	0x58004000

08001f18 <FLASH_OB_PCROP1BConfig>:
  * @param  PCROP1BEndAddr Specifies the Zone 1B end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1BStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1BConfig(uint32_t PCROP1BStartAddr, uint32_t PCROP1BEndAddr)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BEndAddr));

  /* Compute offset depending on pcrop granularity */
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f28:	0a9b      	lsrs	r3, r3, #10
 8001f2a:	60fb      	str	r3, [r7, #12]
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	60bb      	str	r3, [r7, #8]

  /* Configure the Proprietary code readout protection start address */
  WRITE_REG(FLASH->PCROP1BSR, startoffset);
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <FLASH_OB_PCROP1BConfig+0x34>)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6353      	str	r3, [r2, #52]	; 0x34

  /* Configure the Proprietary code readout protection end address */
  WRITE_REG(FLASH->PCROP1BER, endoffset);
 8001f3c:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <FLASH_OB_PCROP1BConfig+0x34>)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	58004000 	.word	0x58004000

08001f50 <FLASH_OB_IPCCBufferAddrConfig>:
  * @param  IPCCDataBufAddr IPCC data buffer start address area in SRAM1 or SRAM2
  *         This parameter must be the double-word aligned
  * @retval None
  */
static void FLASH_OB_IPCCBufferAddrConfig(uint32_t IPCCDataBufAddr)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_IPCC_BUF_ADDR(IPCCDataBufAddr));

  /* Configure the option bytes register */
  WRITE_REG(FLASH->IPCCBR, (uint32_t)((IPCCDataBufAddr - SRAM1_BASE) >> 4));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <FLASH_OB_IPCCBufferAddrConfig+0x20>)
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	58004000 	.word	0x58004000

08001f74 <FLASH_OB_SecureConfig>:
  * @param  pOBParam Pointer to an @ref FLASH_OBProgramInitTypeDef structure that
  *         contains the configuration information for the programming
  * @retval void
  */
static void FLASH_OB_SecureConfig(FLASH_OBProgramInitTypeDef *pOBParam)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8001f7c:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <FLASH_OB_SecureConfig+0x184>)
 8001f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f82:	60fb      	str	r3, [r7, #12]
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <FLASH_OB_SecureConfig+0x184>)
 8001f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8a:	60bb      	str	r3, [r7, #8]

  if ((pOBParam->OptionType & OPTIONBYTE_SECURE_MODE) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d063      	beq.n	8002060 <FLASH_OB_SecureConfig+0xec>
    assert_param(IS_OB_SNBRSA_START_ADDR(pOBParam->SecureSRAM1StartAddr));
    assert_param(IS_OB_HDPSA_START_ADDR(pOBParam->HideProtectionStartAddr));
    assert_param(IS_OB_SECURE_MODE(pOBParam->SecureMode));

    /* Configure SFR register content with start FLASH PAGE index to secure and start FLASH PAGE index for hide protection area */
    MODIFY_REG(sfr_reg_val, (FLASH_SFR_SFSA | FLASH_SFR_HDPSA), \
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 127f 	bic.w	r2, r3, #8323199	; 0x7f007f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001fa6:	0ad9      	lsrs	r1, r3, #11
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001fb0:	0adb      	lsrs	r3, r3, #11
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
               ((((pOBParam->SecureFlashStartAddr - FLASH_BASE) / FLASH_PAGE_SIZE) << FLASH_SFR_SFSA_Pos) | \
                (((pOBParam->HideProtectionStartAddr - FLASH_BASE) / FLASH_PAGE_SIZE) << FLASH_SFR_HDPSA_Pos)));

    /* Configure SRRVR register */
    MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRSA | FLASH_SRRVR_SNBRSA), \
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f023 5379 	bic.w	r3, r3, #1044381696	; 0x3e400000
 8001fc0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fc8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001fcc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8001fd0:	0a92      	lsrs	r2, r2, #10
 8001fd2:	0491      	lsls	r1, r2, #18
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001fdc:	0a92      	lsrs	r2, r2, #10
 8001fde:	0652      	lsls	r2, r2, #25
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60bb      	str	r3, [r7, #8]
               (((((pOBParam->SecureSRAM2StartAddr - SRAM2_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SBRSA_Pos)) | \
                ((((pOBParam->SecureSRAM1StartAddr - SRAM1_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SNBRSA_Pos))));

    /* If Full System Secure mode is requested, clear all the corresponding bit */
    /* Else set the corresponding bit */
    if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	d108      	bne.n	8002000 <FLASH_OB_SecureConfig+0x8c>
    {
      CLEAR_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f023 1380 	bic.w	r3, r3, #8388736	; 0x800080
 8001ff4:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f023 4381 	bic.w	r3, r3, #1082130432	; 0x40800000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	e02f      	b.n	8002060 <FLASH_OB_SecureConfig+0xec>
    }
    else if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2bf0      	cmp	r3, #240	; 0xf0
 8002006:	d108      	bne.n	800201a <FLASH_OB_SecureConfig+0xa6>
    {
      SET_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 1380 	orr.w	r3, r3, #8388736	; 0x800080
 800200e:	60fb      	str	r3, [r7, #12]
      SET_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f043 4381 	orr.w	r3, r3, #1082130432	; 0x40800000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	e022      	b.n	8002060 <FLASH_OB_SecureConfig+0xec>
    }
    else /* Enable Secure Area bit per bit */
    {
      /* Set Flash Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800201e:	f107 010c 	add.w	r1, r7, #12
 8002022:	2301      	movs	r3, #1
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	f000 f9e9 	bl	80023fc <FLASH_OB_ConfigSecureMode>

      /* Set Hide Protection Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800202e:	f107 010c 	add.w	r1, r7, #12
 8002032:	2302      	movs	r3, #2
 8002034:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002038:	f000 f9e0 	bl	80023fc <FLASH_OB_ConfigSecureMode>

      /* Set SRAM1 Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002040:	f107 0108 	add.w	r1, r7, #8
 8002044:	2304      	movs	r3, #4
 8002046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800204a:	f000 f9d7 	bl	80023fc <FLASH_OB_ConfigSecureMode>

      /* Set SRAM2 Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002052:	f107 0108 	add.w	r1, r7, #8
 8002056:	2308      	movs	r3, #8
 8002058:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800205c:	f000 f9ce 	bl	80023fc <FLASH_OB_ConfigSecureMode>
    }
  }

  /* Boot vector */
  if ((pOBParam->OptionType & OPTIONBYTE_C2_BOOT_VECT) != 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01f      	beq.n	80020ac <FLASH_OB_SecureConfig+0x138>
    /* Check the parameters */
    assert_param(IS_OB_BOOT_VECTOR_ADDR(pOBParam->C2SecureBootVectAddr));
    assert_param(IS_OB_BOOT_REGION(pOBParam->C2BootRegion));

    /* Set the boot vector */
    if (pOBParam->C2BootRegion == OB_C2_BOOT_FROM_FLASH)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002074:	d10d      	bne.n	8002092 <FLASH_OB_SecureConfig+0x11e>
    {
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <FLASH_OB_SecureConfig+0x188>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002080:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8002084:	0891      	lsrs	r1, r2, #2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800208a:	430a      	orrs	r2, r1
 800208c:	4313      	orrs	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	e00c      	b.n	80020ac <FLASH_OB_SecureConfig+0x138>
    }
    else
    {
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <FLASH_OB_SecureConfig+0x188>)
 8002096:	4013      	ands	r3, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800209c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80020a0:	0891      	lsrs	r1, r2, #2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020a6:	430a      	orrs	r2, r1
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
    }
  }

  /* CPU2 Debug Access */
  if ((pOBParam->OptionType & OPTIONBYTE_C2_DEBUG_ACCESS) != 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <FLASH_OB_SecureConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_OB_C2_DEBUG_MODE(pOBParam->C2DebugAccessMode));

    /* Set the CPU2 Debug Access */
    MODIFY_REG(sfr_reg_val, FLASH_SFR_DDS, (uint32_t)pOBParam->C2DebugAccessMode);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  /* Sub-GHz radio SPI Access */
  if ((pOBParam->OptionType & OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS) != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <FLASH_OB_SecureConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_OB_SUBGHZSPI_SECURE_ACCESS(pOBParam->SUBGHZSPISecureAccess));

    /* Set the Sub-GHz radio SPI Secure Access */
    MODIFY_REG(sfr_reg_val, FLASH_SFR_SUBGHZSPISD, (uint32_t)pOBParam->SUBGHZSPISecureAccess);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Update Flash registers */
  WRITE_REG(FLASH->SFR, sfr_reg_val);
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <FLASH_OB_SecureConfig+0x184>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  WRITE_REG(FLASH->SRRVR, srrvr_reg_val);
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <FLASH_OB_SecureConfig+0x184>)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	58004000 	.word	0x58004000
 80020fc:	7fff0000 	.word	0x7fff0000

08002100 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset Specifies the address where to copied the end page of
  *                            the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <FLASH_OB_GetWRP+0x54>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <FLASH_OB_GetWRP+0x54>)
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	601a      	str	r2, [r3, #0]
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 800212c:	e00c      	b.n	8002148 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <FLASH_OB_GetWRP+0x54>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <FLASH_OB_GetWRP+0x54>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	58004000 	.word	0x58004000

08002158 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <FLASH_OB_GetRDP+0x2c>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2baa      	cmp	r3, #170	; 0xaa
 800216a:	d004      	beq.n	8002176 <FLASH_OB_GetRDP+0x1e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2bcc      	cmp	r3, #204	; 0xcc
 8002170:	d001      	beq.n	8002176 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002172:	23bb      	movs	r3, #187	; 0xbb
 8002174:	e000      	b.n	8002178 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdplvl;
 8002176:	687b      	ldr	r3, [r7, #4]
  }
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	58004000 	.word	0x58004000

08002188 <FLASH_OB_GetUser>:
  *         @arg @ref OB_BOOT0_RESET or @ref OB_BOOT0_SET
  *         @arg @ref OB_BOOT_LOCK_DISABLE or @ref OB_BOOT_LOCK_ENABLE
  */
#endif
static uint32_t FLASH_OB_GetUser(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <FLASH_OB_GetUser+0x28>)
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <FLASH_OB_GetUser+0x2c>)
 8002194:	4013      	ands	r3, r2
 8002196:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, (FLASH_OPTR_RDP | FLASH_OPTR_ESE));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	607b      	str	r3, [r7, #4]

  return user_config;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	58004000 	.word	0x58004000
 80021b4:	cf8f7e00 	.word	0xcf8f7e00

080021b8 <FLASH_OB_GetPCROP>:
  * @param PCROP1BEndAddr [out] Specifies the address where to copied the end address of
  *                       the Zone 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr, uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  uint32_t pcrop;

  pcrop             = (READ_BIT(FLASH->PCROP1BSR, FLASH_PCROP1BSR_PCROP1B_STRT));
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <FLASH_OB_GetPCROP+0x74>)
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	617b      	str	r3, [r7, #20]
  *PCROP1BStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1BER, FLASH_PCROP1BER_PCROP1B_END));
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <FLASH_OB_GetPCROP+0x74>)
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	617b      	str	r3, [r7, #20]
  *PCROP1BEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	601a      	str	r2, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1ASR, FLASH_PCROP1ASR_PCROP1A_STRT));
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <FLASH_OB_GetPCROP+0x74>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	617b      	str	r3, [r7, #20]
  *PCROP1AStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	029b      	lsls	r3, r3, #10
 80021fa:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	601a      	str	r2, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1AER, FLASH_PCROP1AER_PCROP1A_END));
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <FLASH_OB_GetPCROP+0x74>)
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	b2db      	uxtb	r3, r3
 8002208:	617b      	str	r3, [r7, #20]
  *PCROP1AEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]

  *PCROPConfig      = (READ_REG(FLASH->PCROP1AER) & FLASH_PCROP1AER_PCROP_RDP);
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <FLASH_OB_GetPCROP+0x74>)
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	58004000 	.word	0x58004000

08002230 <FLASH_OB_GetIPCCBufferAddr>:
  *           Value return between Min_Data = 0x0 and Max_Data = 0x3FFF
  *           This value correspond to the first double-word of the IPCC mailbox data buffer area
  *           in SRAM starting from 0x20000000 (SRAM1 start address to SRAM2 end address).
  */
static uint32_t FLASH_OB_GetIPCCBufferAddr(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA) << 4) + SRAM1_BASE);
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <FLASH_OB_GetIPCCBufferAddr+0x1c>)
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	011a      	lsls	r2, r3, #4
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <FLASH_OB_GetIPCCBufferAddr+0x20>)
 800223c:	4013      	ands	r3, r2
 800223e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	58004000 	.word	0x58004000
 8002250:	0003fff0 	.word	0x0003fff0

08002254 <FLASH_OB_GetSecureMemoryConfig>:
  *                               @arg @ref OB_SECURE_SRAM2_DISABLE : SRAM2 Security disabled
  *                               @arg @ref OB_SECURE_SYSTEM_AND_ALL_AREAS_ENABLE : All System Security enabled
  * @retval None
  */
static void FLASH_OB_GetSecureMemoryConfig(uint32_t *SecureFlashStartAddr, uint32_t *HideProtectionStartAddr, uint32_t *SecureSRAM2StartAddr, uint32_t *SecureSRAM1StartAddr, uint32_t *SecureMode)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <FLASH_OB_GetSecureMemoryConfig+0xcc>)
 8002264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002268:	61fb      	str	r3, [r7, #28]
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <FLASH_OB_GetSecureMemoryConfig+0xcc>)
 800226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002270:	61bb      	str	r3, [r7, #24]

  /* Get Secure Flash start address */
  uint32_t user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002278:	617b      	str	r3, [r7, #20]

  *SecureFlashStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002280:	02da      	lsls	r2, r3, #11
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

  /* Get Hide Protection Area start address */
  user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_HDPSA) >> FLASH_SFR_HDPSA_Pos);
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228e:	617b      	str	r3, [r7, #20]

  *HideProtectionStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002296:	02da      	lsls	r2, r3, #11
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	601a      	str	r2, [r3, #0]

  /* Get Secure SRAM2 start address */
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SBRSA) >> FLASH_SRRVR_SBRSA_Pos);
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	617b      	str	r3, [r7, #20]

  *SecureSRAM2StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2_BASE);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	029b      	lsls	r3, r3, #10
 80022aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]

  /* Get Secure SRAM1 start address */
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SNBRSA) >> FLASH_SRRVR_SNBRSA_Pos);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	0e5b      	lsrs	r3, r3, #25
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	617b      	str	r3, [r7, #20]

  *SecureSRAM1StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM1_BASE);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get Secure Area mode */
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 80022cc:	2310      	movs	r3, #16
 80022ce:	2201      	movs	r2, #1
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	69f8      	ldr	r0, [r7, #28]
 80022d4:	f000 f8b2 	bl	800243c <FLASH_OB_GetSecureMode>
 80022d8:	4604      	mov	r4, r0
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 80022da:	2320      	movs	r3, #32
 80022dc:	2202      	movs	r2, #2
 80022de:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80022e2:	69f8      	ldr	r0, [r7, #28]
 80022e4:	f000 f8aa 	bl	800243c <FLASH_OB_GetSecureMode>
 80022e8:	4603      	mov	r3, r0
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 80022ea:	431c      	orrs	r4, r3
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 80022ec:	2340      	movs	r3, #64	; 0x40
 80022ee:	2204      	movs	r2, #4
 80022f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022f4:	69b8      	ldr	r0, [r7, #24]
 80022f6:	f000 f8a1 	bl	800243c <FLASH_OB_GetSecureMode>
 80022fa:	4603      	mov	r3, r0
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 80022fc:	431c      	orrs	r4, r3
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE, OB_SECURE_SRAM2_DISABLE));
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	2208      	movs	r2, #8
 8002302:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002306:	69b8      	ldr	r0, [r7, #24]
 8002308:	f000 f898 	bl	800243c <FLASH_OB_GetSecureMode>
 800230c:	4603      	mov	r3, r0
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 800230e:	ea44 0203 	orr.w	r2, r4, r3
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	58004000 	.word	0x58004000

08002324 <FLASH_OB_GetC2BootResetConfig>:
  * @param  C2BootResetVectAddr Specifies the address where to copied the CPU2 Secure Boot reset vector address
  * @param  C2BootResetRegion   Specifies the Secure Boot reset memory region
  * @retval None
  */
static void FLASH_OB_GetC2BootResetConfig(uint32_t *C2BootResetVectAddr, uint32_t *C2BootResetRegion)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  *C2BootResetRegion = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_C2OPT));
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <FLASH_OB_GetC2BootResetConfig+0x58>)
 8002330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002334:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	601a      	str	r2, [r3, #0]

  if (*C2BootResetRegion == OB_C2_BOOT_FROM_FLASH)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002344:	d10a      	bne.n	800235c <FLASH_OB_GetC2BootResetConfig+0x38>
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <FLASH_OB_GetC2BootResetConfig+0x58>)
 8002348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234c:	009a      	lsls	r2, r3, #2
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <FLASH_OB_GetC2BootResetConfig+0x5c>)
 8002350:	4013      	ands	r3, r2
 8002352:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
  }
}
 800235a:	e009      	b.n	8002370 <FLASH_OB_GetC2BootResetConfig+0x4c>
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <FLASH_OB_GetC2BootResetConfig+0x58>)
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002362:	009a      	lsls	r2, r3, #2
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <FLASH_OB_GetC2BootResetConfig+0x5c>)
 8002366:	4013      	ands	r3, r2
 8002368:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	58004000 	.word	0x58004000
 8002380:	0003fffc 	.word	0x0003fffc

08002384 <FLASH_OB_GetSUBGHZSPISecureAccess>:
  * @retval Returned value can be one of the following values:
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_DISABLE : Sub-GHz radio SPI Secure access disabled
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_ENABLE : Sub-GHz radio SPI Secure access enabled
  */
static uint32_t FLASH_OB_GetSUBGHZSPISecureAccess(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return (READ_BIT(FLASH->SFR, FLASH_SFR_SUBGHZSPISD));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <FLASH_OB_GetSUBGHZSPISecureAccess+0x18>)
 800238a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800238e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	58004000 	.word	0x58004000

080023a0 <FLASH_OB_GetC2DebugAccessMode>:
  * @retval Returned value can be one of the following values:
  *           @arg @ref OB_C2_DEBUG_ACCESS_DISABLE : CPU2 debug access disabled
  *           @arg @ref OB_C2_DEBUG_ACCESS_ENABLE : CPU2 debug access enabled
  */
static uint32_t FLASH_OB_GetC2DebugAccessMode(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return (READ_BIT(FLASH->SFR, FLASH_SFR_DDS));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <FLASH_OB_GetC2DebugAccessMode+0x18>)
 80023a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	58004000 	.word	0x58004000

080023bc <FLASH_OB_ProceedWriteOperation>:
/**
  * @brief  Proceed the OB Write Operation.
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_ProceedWriteOperation(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c6:	f7ff fa87 	bl	80018d8 <FLASH_WaitForLastOperation>
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]

  if (status == HAL_OK)
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <FLASH_OB_ProceedWriteOperation+0x30>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <FLASH_OB_ProceedWriteOperation+0x3c>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <FLASH_OB_ProceedWriteOperation+0x3c>)
 80023da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023de:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e4:	f7ff fa78 	bl	80018d8 <FLASH_WaitForLastOperation>
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	58004000 	.word	0x58004000

080023fc <FLASH_OB_ConfigSecureMode>:
  * @param Bit Bit in FLASH register to update
  * @param ValueEnable Constant to check in comparison with SecureMode as enabled
  * @retval None
  */
static void FLASH_OB_ConfigSecureMode(uint32_t SecureMode, uint32_t *Reg, uint32_t Bit, uint32_t ValueEnable)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  /* Check if SecureMode is requested */
  if ((SecureMode & ValueEnable) == ValueEnable)
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4013      	ands	r3, r2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d107      	bne.n	8002426 <FLASH_OB_ConfigSecureMode+0x2a>
  {
    CLEAR_BIT(*Reg, Bit);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SET_BIT(*Reg, Bit);
  }
}
 8002424:	e005      	b.n	8002432 <FLASH_OB_ConfigSecureMode+0x36>
    SET_BIT(*Reg, Bit);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <FLASH_OB_GetSecureMode>:
  *                               ValueEnable
  *                               ValueDisable
  *                               Null
  */
static uint32_t FLASH_OB_GetSecureMode(uint32_t Reg, uint32_t Bit, uint32_t ValueEnable, uint32_t ValueDisable)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  /* Return status of bit (set as enable, set as disable) */
  if (READ_BIT(Reg, Bit) == 0U)
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <FLASH_OB_GetSecureMode+0x1c>
  {
    return ValueEnable;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	e000      	b.n	800245a <FLASH_OB_GetSecureMode+0x1e>
  }
  else
  {
    return ValueDisable;
 8002458:	683b      	ldr	r3, [r7, #0]
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	e140      	b.n	80026f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8132 	beq.w	80026f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d005      	beq.n	80024a4 <HAL_GPIO_Init+0x40>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d130      	bne.n	8002506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024da:	2201      	movs	r2, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 0201 	and.w	r2, r3, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b03      	cmp	r3, #3
 8002510:	d017      	beq.n	8002542 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d123      	bne.n	8002596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	6939      	ldr	r1, [r7, #16]
 8002592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0203 	and.w	r2, r3, #3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 808c 	beq.w	80026f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_GPIO_Init+0x2b0>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	2207      	movs	r2, #7
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_Init+0x1bc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a44      	ldr	r2, [pc, #272]	; (8002718 <HAL_GPIO_Init+0x2b4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x1b8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a43      	ldr	r2, [pc, #268]	; (800271c <HAL_GPIO_Init+0x2b8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_Init+0x1b4>
 8002614:	2302      	movs	r3, #2
 8002616:	e004      	b.n	8002622 <HAL_GPIO_Init+0x1be>
 8002618:	2307      	movs	r3, #7
 800261a:	e002      	b.n	8002622 <HAL_GPIO_Init+0x1be>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_GPIO_Init+0x1be>
 8002620:	2300      	movs	r3, #0
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	f002 0203 	and.w	r2, r2, #3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4093      	lsls	r3, r2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002632:	4938      	ldr	r1, [pc, #224]	; (8002714 <HAL_GPIO_Init+0x2b0>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 8002642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002646:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002674:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <HAL_GPIO_Init+0x2bc>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3301      	adds	r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	f47f aeb7 	bne.w	8002474 <HAL_GPIO_Init+0x10>
  }
}
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010000 	.word	0x40010000
 8002718:	48000400 	.word	0x48000400
 800271c:	48000800 	.word	0x48000800
 8002720:	58000800 	.word	0x58000800

08002724 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002734:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_PWR_EnableBkUpAccess+0x18>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <HAL_PWR_EnableBkUpAccess+0x18>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	58000400 	.word	0x58000400

08002760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_PWREx_GetVoltageRange+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002788:	d101      	bne.n	800278e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	58000400 	.word	0x58000400

0800279c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e6:	d101      	bne.n	80027ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002840:	d101      	bne.n	8002846 <LL_RCC_HSE_IsReady+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_RCC_HSE_IsReady+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d101      	bne.n	80028a0 <LL_RCC_HSI_IsReady+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_RCC_HSI_IsReady+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d101      	bne.n	80028ea <LL_RCC_LSE_IsReady+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_RCC_LSE_IsReady+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d101      	bne.n	800294c <LL_RCC_LSI_IsReady+0x18>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_RCC_LSI_IsReady+0x1a>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6013      	str	r3, [r2, #0]
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6013      	str	r3, [r2, #0]
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d101      	bne.n	80029a4 <LL_RCC_MSI_IsReady+0x16>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_RCC_MSI_IsReady+0x18>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d101      	bne.n	80029c4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 0203 	bic.w	r2, r3, #3
 8002a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ae6:	f023 020f 	bic.w	r2, r3, #15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bac:	6013      	str	r3, [r2, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc8:	d101      	bne.n	8002bce <LL_RCC_PLL_IsReady+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_RCC_PLL_IsReady+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d101      	bne.n	8002c4a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c68:	d101      	bne.n	8002c6e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d101      	bne.n	8002c92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cae:	d101      	bne.n	8002cb4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cd0:	d101      	bne.n	8002cd6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ce6:	f7fe fbdd 	bl	80014a4 <HAL_GetTick>
 8002cea:	6078      	str	r0, [r7, #4]

  /* Set MSION bit */
  LL_RCC_MSI_Enable();
 8002cec:	f7ff fe33 	bl	8002956 <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_DeInit+0x24>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fbd7 	bl	80014a4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_DeInit+0x24>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e074      	b.n	8002dee <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_MSI_IsReady() == 0U)
 8002d04:	f7ff fe43 	bl	800298e <LL_RCC_MSI_IsReady>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f1      	beq.n	8002cf2 <HAL_RCC_DeInit+0x12>
    }
  }

  /* Set MSIRANGE default value */
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8002d0e:	2060      	movs	r0, #96	; 0x60
 8002d10:	f7ff fe5d 	bl	80029ce <LL_RCC_MSI_SetRange>

  /* Set MSITRIM bits to the reset value*/
  LL_RCC_MSI_SetCalibTrimming(RCC_MSICALIBRATION_DEFAULT);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7ff fe84 	bl	8002a22 <LL_RCC_MSI_SetCalibTrimming>

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(RCC_HSICALIBRATION_DEFAULT);
 8002d1a:	2040      	movs	r0, #64	; 0x40
 8002d1c:	f7ff fdc5 	bl	80028aa <LL_RCC_HSI_SetCalibTrimming>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d20:	f7fe fbc0 	bl	80014a4 <HAL_GetTick>
 8002d24:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]

  /* Wait till MSI oscillator used as system clock */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_DeInit+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fe fbb8 	bl	80014a4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_DeInit+0x66>
    {
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e053      	b.n	8002dee <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8002d46:	f7ff fe93 	bl	8002a70 <LL_RCC_GetSysClkSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ef      	bne.n	8002d30 <HAL_RCC_DeInit+0x50>
    }
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, PLLON, HSEPRE bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_DeInit+0x118>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d60:	f7fe fba0 	bl	80014a4 <HAL_GetTick>
 8002d64:	6078      	str	r0, [r7, #4]

  /* Wait till HSE is disabled */
  while (LL_RCC_HSE_IsReady() != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fb9c 	bl	80014a4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e039      	b.n	8002dee <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_HSE_IsReady() != 0U)
 8002d7a:	f7ff fd58 	bl	800282e <LL_RCC_HSE_IsReady>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f1      	bne.n	8002d68 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Reset HSEBYPPWR bit once HSE is OFF */
  LL_RCC_HSE_DisableTcxo();
 8002d84:	f7ff fd18 	bl	80027b8 <LL_RCC_HSE_DisableTcxo>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d88:	f7fe fb8c 	bl	80014a4 <HAL_GetTick>
 8002d8c:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is fully stopped */
  while (LL_RCC_PLL_IsReady() != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_DeInit+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fb88 	bl	80014a4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b0a      	cmp	r3, #10
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_DeInit+0xc2>
    {
      return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e025      	b.n	8002dee <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_PLL_IsReady() != 0U)
 8002da2:	f7ff ff08 	bl	8002bb6 <LL_RCC_PLL_IsReady>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f1      	bne.n	8002d90 <HAL_RCC_DeInit+0xb0>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, RCC_PLLCFR_RESET_VALUE);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <HAL_RCC_DeInit+0x11c>)
 8002db2:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	621a      	str	r2, [r3, #32]

  /* EXTCFGR reset*/
  WRITE_REG(RCC->EXTCFGR, RCC_EXTCFGR_RESET_VALUE);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002dce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_DeInit+0x120>)
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <HAL_RCC_DeInit+0x124>)
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_DeInit+0x128>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fb15 	bl	800140c <HAL_InitTick>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_DeInit+0x10c>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_DeInit+0x10e>
  }
  else
  {
    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	feeef4ff 	.word	0xfeeef4ff
 8002dfc:	22040100 	.word	0x22040100
 8002e00:	2000014c 	.word	0x2000014c
 8002e04:	003d0900 	.word	0x003d0900
 8002e08:	20000150 	.word	0x20000150

08002e0c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e38b      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1e:	f7ff fe27 	bl	8002a70 <LL_RCC_GetSysClkSource>
 8002e22:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e24:	f7ff fefa 	bl	8002c1c <LL_RCC_PLL_GetMainSource>
 8002e28:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80c9 	beq.w	8002fca <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x3e>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d17b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d178      	bne.n	8002f3c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4a:	f7ff fda0 	bl	800298e <LL_RCC_MSI_IsReady>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_OscConfig+0x54>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e36a      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x72>
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	e006      	b.n	8002e8c <HAL_RCC_OscConfig+0x80>
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d222      	bcs.n	8002ed6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fd4b 	bl	8003930 <RCC_SetFlashLatencyFromMSIRange>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e348      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fda7 	bl	8002a22 <LL_RCC_MSI_SetCalibTrimming>
 8002ed4:	e021      	b.n	8002f1a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fd8e 	bl	8002a22 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd10 	bl	8003930 <RCC_SetFlashLatencyFromMSIRange>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e30d      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f1a:	f000 fcf5 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4aa1      	ldr	r2, [pc, #644]	; (80031a8 <HAL_RCC_OscConfig+0x39c>)
 8002f22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f24:	4ba1      	ldr	r3, [pc, #644]	; (80031ac <HAL_RCC_OscConfig+0x3a0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fa6f 	bl	800140c <HAL_InitTick>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d047      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	e2fc      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f44:	f7ff fd07 	bl	8002956 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f48:	f7fe faac 	bl	80014a4 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f50:	f7fe faa8 	bl	80014a4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e2e9      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f62:	f7ff fd14 	bl	800298e <LL_RCC_MSI_IsReady>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f1      	beq.n	8002f50 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fd43 	bl	8002a22 <LL_RCC_MSI_SetCalibTrimming>
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f9e:	f7ff fce8 	bl	8002972 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fa7f 	bl	80014a4 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002faa:	f7fe fa7b 	bl	80014a4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e2bc      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fbc:	f7ff fce7 	bl	800298e <LL_RCC_MSI_IsReady>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f1      	bne.n	8002faa <HAL_RCC_OscConfig+0x19e>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d05f      	beq.n	8003096 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1dc>
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d10d      	bne.n	8002ffe <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d10a      	bne.n	8002ffe <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	f7ff fc21 	bl	800282e <LL_RCC_HSE_IsReady>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d050      	beq.n	8003094 <HAL_RCC_OscConfig+0x288>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d14c      	bne.n	8003094 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e29b      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301c:	d102      	bne.n	8003024 <HAL_RCC_OscConfig+0x218>
 800301e:	f7ff fbea 	bl	80027f6 <LL_RCC_HSE_Enable>
 8003022:	e00d      	b.n	8003040 <HAL_RCC_OscConfig+0x234>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800302c:	d104      	bne.n	8003038 <HAL_RCC_OscConfig+0x22c>
 800302e:	f7ff fbb5 	bl	800279c <LL_RCC_HSE_EnableTcxo>
 8003032:	f7ff fbe0 	bl	80027f6 <LL_RCC_HSE_Enable>
 8003036:	e003      	b.n	8003040 <HAL_RCC_OscConfig+0x234>
 8003038:	f7ff fbeb 	bl	8002812 <LL_RCC_HSE_Disable>
 800303c:	f7ff fbbc 	bl	80027b8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe fa2c 	bl	80014a4 <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fa28 	bl	80014a4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e269      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003062:	f7ff fbe4 	bl	800282e <LL_RCC_HSE_IsReady>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f1      	beq.n	8003050 <HAL_RCC_OscConfig+0x244>
 800306c:	e013      	b.n	8003096 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fa19 	bl	80014a4 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003076:	f7fe fa15 	bl	80014a4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e256      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003088:	f7ff fbd1 	bl	800282e <LL_RCC_HSE_IsReady>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f1      	bne.n	8003076 <HAL_RCC_OscConfig+0x26a>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d04b      	beq.n	800313a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2a8>
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d113      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d110      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b4:	f7ff fbe8 	bl	8002888 <LL_RCC_HSI_IsReady>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x2be>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e235      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fbeb 	bl	80028aa <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d4:	e031      	b.n	800313a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030de:	f7ff fbb7 	bl	8002850 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe f9df 	bl	80014a4 <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fe f9db 	bl	80014a4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e21c      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030fc:	f7ff fbc4 	bl	8002888 <LL_RCC_HSI_IsReady>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f1      	beq.n	80030ea <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fbcd 	bl	80028aa <LL_RCC_HSI_SetCalibTrimming>
 8003110:	e013      	b.n	800313a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003112:	f7ff fbab 	bl	800286c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe f9c5 	bl	80014a4 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7fe f9c1 	bl	80014a4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e202      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003130:	f7ff fbaa 	bl	8002888 <LL_RCC_HSI_IsReady>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d06f      	beq.n	8003226 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d057      	beq.n	80031fe <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	429a      	cmp	r2, r3
 8003164:	d036      	beq.n	80031d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e1db      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d018      	beq.n	80031ba <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8003188:	f7ff fbc4 	bl	8002914 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318c:	f7fe f98a 	bl	80014a4 <HAL_GetTick>
 8003190:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003192:	e00d      	b.n	80031b0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe f986 	bl	80014a4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b11      	cmp	r3, #17
 80031a0:	d906      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1c7      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
 80031a6:	bf00      	nop
 80031a8:	2000014c 	.word	0x2000014c
 80031ac:	20000150 	.word	0x20000150
          while (LL_RCC_LSI_IsReady() != 0U)
 80031b0:	f7ff fbc0 	bl	8002934 <LL_RCC_LSI_IsReady>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ec      	bne.n	8003194 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	f023 0210 	bic.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d4:	f7ff fb8e 	bl	80028f4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe f964 	bl	80014a4 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fe f960 	bl	80014a4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b11      	cmp	r3, #17
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1a1      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80031f2:	f7ff fb9f 	bl	8002934 <LL_RCC_LSI_IsReady>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f1      	beq.n	80031e0 <HAL_RCC_OscConfig+0x3d4>
 80031fc:	e013      	b.n	8003226 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fe:	f7ff fb89 	bl	8002914 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe f94f 	bl	80014a4 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe f94b 	bl	80014a4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b11      	cmp	r3, #17
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e18c      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800321c:	f7ff fb8a 	bl	8002934 <LL_RCC_LSI_IsReady>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f1      	bne.n	800320a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80d8 	beq.w	80033e4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003234:	f7ff faa0 	bl	8002778 <LL_PWR_IsEnabledBkUpAccess>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800323e:	f7ff fa81 	bl	8002744 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe f92f 	bl	80014a4 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe f92b 	bl	80014a4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e16c      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800325c:	f7ff fa8c 	bl	8002778 <LL_PWR_IsEnabledBkUpAccess>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f1      	beq.n	800324a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07b      	beq.n	8003366 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b85      	cmp	r3, #133	; 0x85
 8003274:	d003      	beq.n	800327e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d109      	bne.n	8003292 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe f907 	bl	80014a4 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe f8f9 	bl	80014a4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e138      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032c4:	f7ff fb05 	bl	80028d2 <LL_RCC_LSE_IsReady>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ef      	beq.n	80032ae <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b81      	cmp	r3, #129	; 0x81
 80032d4:	d003      	beq.n	80032de <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b85      	cmp	r3, #133	; 0x85
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe f8e1 	bl	80014a4 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe f8d3 	bl	80014a4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e112      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ec      	beq.n	80032fa <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003320:	e060      	b.n	80033e4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe f8bf 	bl	80014a4 <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe f8b1 	bl	80014a4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0f0      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ec      	bne.n	800333e <HAL_RCC_OscConfig+0x532>
 8003364:	e03e      	b.n	80033e4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe f89d 	bl	80014a4 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe f88f 	bl	80014a4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0ce      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ec      	bne.n	8003382 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe f87c 	bl	80014a4 <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fe f86e 	bl	80014a4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0ad      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033da:	f7ff fa7a 	bl	80028d2 <LL_RCC_LSE_IsReady>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ef      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a3 	beq.w	8003534 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d076      	beq.n	80034e2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d14b      	bne.n	8003494 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	f7ff fbcd 	bl	8002b9a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe f850 	bl	80014a4 <HAL_GetTick>
 8003404:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe f84c 	bl	80014a4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b0a      	cmp	r3, #10
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e08d      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800341a:	f7ff fbcc 	bl	8002bb6 <LL_RCC_PLL_IsReady>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f1      	bne.n	8003408 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b45      	ldr	r3, [pc, #276]	; (8003540 <HAL_RCC_OscConfig+0x734>)
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003450:	430a      	orrs	r2, r1
 8003452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003456:	4313      	orrs	r3, r2
 8003458:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345a:	f7ff fb90 	bl	8002b7e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe f819 	bl	80014a4 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe f815 	bl	80014a4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b0a      	cmp	r3, #10
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e056      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003488:	f7ff fb95 	bl	8002bb6 <LL_RCC_PLL_IsReady>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f1      	beq.n	8003476 <HAL_RCC_OscConfig+0x66a>
 8003492:	e04f      	b.n	8003534 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003494:	f7ff fb81 	bl	8002b9a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ba:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fd fff2 	bl	80014a4 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd ffee 	bl	80014a4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b0a      	cmp	r3, #10
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e02f      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80034d6:	f7ff fb6e 	bl	8002bb6 <LL_RCC_PLL_IsReady>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f1      	bne.n	80034c4 <HAL_RCC_OscConfig+0x6b8>
 80034e0:	e028      	b.n	8003534 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e023      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	429a      	cmp	r2, r3
 8003502:	d115      	bne.n	8003530 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	429a      	cmp	r2, r3
 8003510:	d10e      	bne.n	8003530 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	429a      	cmp	r2, r3
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	11c1808c 	.word	0x11c1808c

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e12c      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b98      	ldr	r3, [pc, #608]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d91b      	bls.n	800359e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b95      	ldr	r3, [pc, #596]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4993      	ldr	r1, [pc, #588]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003576:	f7fd ff95 	bl	80014a4 <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357c:	e008      	b.n	8003590 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800357e:	f7fd ff91 	bl	80014a4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e110      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003590:	4b8a      	ldr	r3, [pc, #552]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d1ef      	bne.n	800357e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fa69 	bl	8002a86 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035b4:	f7fd ff76 	bl	80014a4 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035bc:	f7fd ff72 	bl	80014a4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0f1      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035ce:	f7ff fb30 	bl	8002c32 <LL_RCC_IsActiveFlag_HPRE>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f1      	beq.n	80035bc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d016      	beq.n	8003612 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fa5f 	bl	8002aac <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035ee:	f7fd ff59 	bl	80014a4 <HAL_GetTick>
 80035f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035f6:	f7fd ff55 	bl	80014a4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0d4      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003608:	f7ff fb24 	bl	8002c54 <LL_RCC_IsActiveFlag_C2HPRE>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f1      	beq.n	80035f6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fa57 	bl	8002ad6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003628:	f7fd ff3c 	bl	80014a4 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003630:	f7fd ff38 	bl	80014a4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0b7      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003642:	f7ff fb19 	bl	8002c78 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f1      	beq.n	8003630 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fa50 	bl	8002b02 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003662:	f7fd ff1f 	bl	80014a4 <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800366a:	f7fd ff1b 	bl	80014a4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e09a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800367c:	f7ff fb0e 	bl	8002c9c <LL_RCC_IsActiveFlag_PPRE1>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f1      	beq.n	800366a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fa45 	bl	8002b28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800369e:	f7fd ff01 	bl	80014a4 <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036a6:	f7fd fefd 	bl	80014a4 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e07c      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036b8:	f7ff fb01 	bl	8002cbe <LL_RCC_IsActiveFlag_PPRE2>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f1      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d043      	beq.n	8003756 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80036d6:	f7ff f8aa 	bl	800282e <LL_RCC_HSE_IsReady>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11e      	bne.n	800371e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e066      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036ec:	f7ff fa63 	bl	8002bb6 <LL_RCC_PLL_IsReady>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e05b      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003702:	f7ff f944 	bl	800298e <LL_RCC_MSI_IsReady>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e050      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003710:	f7ff f8ba 	bl	8002888 <LL_RCC_HSI_IsReady>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e049      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f991 	bl	8002a4a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fd febc 	bl	80014a4 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd feb8 	bl	80014a4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e035      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	f7ff f993 	bl	8002a70 <LL_RCC_GetSysClkSource>
 800374a:	4602      	mov	r2, r0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	429a      	cmp	r2, r3
 8003754:	d1ec      	bne.n	8003730 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d21b      	bcs.n	800379c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 0207 	bic.w	r2, r3, #7
 800376c:	4913      	ldr	r1, [pc, #76]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fd fe96 	bl	80014a4 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	e008      	b.n	800378e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800377c:	f7fd fe92 	bl	80014a4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e011      	b.n	80037b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_ClockConfig+0x278>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d1ef      	bne.n	800377c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800379c:	f000 f8b4 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_RCC_ClockConfig+0x27c>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCC_ClockConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fe2e 	bl	800140c <HAL_InitTick>
 80037b0:	4603      	mov	r3, r0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	58004000 	.word	0x58004000
 80037c0:	2000014c 	.word	0x2000014c
 80037c4:	20000150 	.word	0x20000150

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	f7ff f94b 	bl	8002a70 <LL_RCC_GetSysClkSource>
 80037da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037dc:	f7ff fa1e 	bl	8002c1c <LL_RCC_PLL_GetMainSource>
 80037e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d139      	bne.n	8003862 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d136      	bne.n	8003862 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037f4:	f7ff f8db 	bl	80029ae <LL_RCC_MSI_IsEnabledRangeSelect>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0x62>
 80037fe:	f7ff f8d6 	bl	80029ae <LL_RCC_MSI_IsEnabledRangeSelect>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0x4e>
 8003808:	f7ff f8f4 	bl	80029f4 <LL_RCC_MSI_GetRange>
 800380c:	4603      	mov	r3, r0
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	e005      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x5a>
 8003816:	f7ff f8f8 	bl	8002a0a <LL_RCC_MSI_GetRangeAfterStandby>
 800381a:	4603      	mov	r3, r0
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a36      	ldr	r2, [pc, #216]	; (80038fc <HAL_RCC_GetSysClockFreq+0x134>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	e014      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x8c>
 800382a:	f7ff f8c0 	bl	80029ae <LL_RCC_MSI_IsEnabledRangeSelect>
 800382e:	4603      	mov	r3, r0
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x7a>
 8003834:	f7ff f8de 	bl	80029f4 <LL_RCC_MSI_GetRange>
 8003838:	4603      	mov	r3, r0
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	e005      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x86>
 8003842:	f7ff f8e2 	bl	8002a0a <LL_RCC_MSI_GetRangeAfterStandby>
 8003846:	4603      	mov	r3, r0
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <HAL_RCC_GetSysClockFreq+0x134>)
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d115      	bne.n	8003888 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003860:	e012      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d102      	bne.n	800386e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_GetSysClockFreq+0x138>)
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e00c      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d109      	bne.n	8003888 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003874:	f7fe ffae 	bl	80027d4 <LL_RCC_HSE_IsEnabledDiv2>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d102      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_GetSysClockFreq+0x138>)
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e001      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003886:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003888:	f7ff f8f2 	bl	8002a70 <LL_RCC_GetSysClkSource>
 800388c:	4603      	mov	r3, r0
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d12f      	bne.n	80038f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003892:	f7ff f9c3 	bl	8002c1c <LL_RCC_PLL_GetMainSource>
 8003896:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0xde>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d003      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0xe4>
 80038a4:	e00d      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80038a6:	4b16      	ldr	r3, [pc, #88]	; (8003900 <HAL_RCC_GetSysClockFreq+0x138>)
 80038a8:	60fb      	str	r3, [r7, #12]
        break;
 80038aa:	e00d      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038ac:	f7fe ff92 	bl	80027d4 <LL_RCC_HSE_IsEnabledDiv2>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_RCC_GetSysClockFreq+0x138>)
 80038b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038ba:	e005      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038be:	60fb      	str	r3, [r7, #12]
        break;
 80038c0:	e002      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	60fb      	str	r3, [r7, #12]
        break;
 80038c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038c8:	f7ff f986 	bl	8002bd8 <LL_RCC_PLL_GetN>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	fb03 f402 	mul.w	r4, r3, r2
 80038d4:	f7ff f997 	bl	8002c06 <LL_RCC_PLL_GetDivider>
 80038d8:	4603      	mov	r3, r0
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	3301      	adds	r3, #1
 80038de:	fbb4 f4f3 	udiv	r4, r4, r3
 80038e2:	f7ff f985 	bl	8002bf0 <LL_RCC_PLL_GetR>
 80038e6:	4603      	mov	r3, r0
 80038e8:	0f5b      	lsrs	r3, r3, #29
 80038ea:	3301      	adds	r3, #1
 80038ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80038f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd90      	pop	{r4, r7, pc}
 80038fc:	080069bc 	.word	0x080069bc
 8003900:	00f42400 	.word	0x00f42400
 8003904:	01e84800 	.word	0x01e84800

08003908 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b598      	push	{r3, r4, r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800390c:	f7ff ff5c 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8003910:	4604      	mov	r4, r0
 8003912:	f7ff f91c 	bl	8002b4e <LL_RCC_GetAHBPrescaler>
 8003916:	4603      	mov	r3, r0
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	4a03      	ldr	r2, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x24>)
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd98      	pop	{r3, r4, r7, pc}
 800392c:	0800695c 	.word	0x0800695c

08003930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	4a10      	ldr	r2, [pc, #64]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003948:	f7ff f90c 	bl	8002b64 <LL_RCC_GetAHB3Prescaler>
 800394c:	4603      	mov	r3, r0
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9c      	lsrs	r4, r3, #18
 800396c:	f7fe fef8 	bl	8002760 <HAL_PWREx_GetVoltageRange>
 8003970:	4603      	mov	r3, r0
 8003972:	4619      	mov	r1, r3
 8003974:	4620      	mov	r0, r4
 8003976:	f000 f80b 	bl	8003990 <RCC_SetFlashLatency>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}
 8003984:	080069bc 	.word	0x080069bc
 8003988:	0800695c 	.word	0x0800695c
 800398c:	431bde83 	.word	0x431bde83

08003990 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08e      	sub	sp, #56	; 0x38
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <RCC_SetFlashLatency+0xf4>)
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a4:	6018      	str	r0, [r3, #0]
 80039a6:	3304      	adds	r3, #4
 80039a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80039aa:	4a37      	ldr	r2, [pc, #220]	; (8003a88 <RCC_SetFlashLatency+0xf8>)
 80039ac:	f107 0318 	add.w	r3, r7, #24
 80039b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b4:	6018      	str	r0, [r3, #0]
 80039b6:	3304      	adds	r3, #4
 80039b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80039ba:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <RCC_SetFlashLatency+0xfc>)
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80039c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d0:	d11b      	bne.n	8003a0a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
 80039d6:	e014      	b.n	8003a02 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	3338      	adds	r3, #56	; 0x38
 80039de:	443b      	add	r3, r7
 80039e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d807      	bhi.n	80039fc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3338      	adds	r3, #56	; 0x38
 80039f2:	443b      	add	r3, r7
 80039f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039fa:	e021      	b.n	8003a40 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	3301      	adds	r3, #1
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d9e7      	bls.n	80039d8 <RCC_SetFlashLatency+0x48>
 8003a08:	e01a      	b.n	8003a40 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0e:	e014      	b.n	8003a3a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	3338      	adds	r3, #56	; 0x38
 8003a16:	443b      	add	r3, r7
 8003a18:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d807      	bhi.n	8003a34 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	3338      	adds	r3, #56	; 0x38
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a32:	e005      	b.n	8003a40 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	3301      	adds	r3, #1
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d9e7      	bls.n	8003a10 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <RCC_SetFlashLatency+0x100>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 0207 	bic.w	r2, r3, #7
 8003a48:	4911      	ldr	r1, [pc, #68]	; (8003a90 <RCC_SetFlashLatency+0x100>)
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a50:	f7fd fd28 	bl	80014a4 <HAL_GetTick>
 8003a54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a56:	e008      	b.n	8003a6a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a58:	f7fd fd24 	bl	80014a4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e007      	b.n	8003a7a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <RCC_SetFlashLatency+0x100>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1ef      	bne.n	8003a58 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3738      	adds	r7, #56	; 0x38
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	08006940 	.word	0x08006940
 8003a88:	08006948 	.word	0x08006948
 8003a8c:	08006950 	.word	0x08006950
 8003a90:	58004000 	.word	0x58004000

08003a94 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa6:	d101      	bne.n	8003aac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_HSI_IsReady>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac8:	d101      	bne.n	8003ace <LL_RCC_HSI_IsReady+0x18>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_RCC_HSI_IsReady+0x1a>
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_LSE_IsReady>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d101      	bne.n	8003af0 <LL_RCC_LSE_IsReady+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_RCC_LSE_IsReady+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d101      	bne.n	8003b10 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <LL_RCC_MSI_GetRange>:
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_GetSysClkSource>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_GetAHBPrescaler>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <LL_RCC_GetAPB1Prescaler>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_GetAPB2Prescaler>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_GetUSARTClockSource>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	4313      	orrs	r3, r2
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_PLL_GetN>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_PLL_GetR>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_PLL_GetDivider>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_PLL_GetMainSource>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0303 	and.w	r3, r3, #3
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
	...

08003c20 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d131      	bne.n	8003c96 <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffb4 	bl	8003ba0 <LL_RCC_GetUSARTClockSource>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003c3e:	d015      	beq.n	8003c6c <LL_RCC_GetUSARTClockFreq+0x4c>
 8003c40:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003c44:	d81b      	bhi.n	8003c7e <LL_RCC_GetUSARTClockFreq+0x5e>
 8003c46:	4a33      	ldr	r2, [pc, #204]	; (8003d14 <LL_RCC_GetUSARTClockFreq+0xf4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <LL_RCC_GetUSARTClockFreq+0x34>
 8003c4c:	4a32      	ldr	r2, [pc, #200]	; (8003d18 <LL_RCC_GetUSARTClockFreq+0xf8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <LL_RCC_GetUSARTClockFreq+0x3c>
 8003c52:	e014      	b.n	8003c7e <LL_RCC_GetUSARTClockFreq+0x5e>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003c54:	f000 f868 	bl	8003d28 <RCC_GetSystemClockFreq>
 8003c58:	60f8      	str	r0, [r7, #12]
        break;
 8003c5a:	e055      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003c5c:	f7ff ff2b 	bl	8003ab6 <LL_RCC_HSI_IsReady>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d149      	bne.n	8003cfa <LL_RCC_GetUSARTClockFreq+0xda>
        {
          usart_frequency = HSI_VALUE;
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <LL_RCC_GetUSARTClockFreq+0xfc>)
 8003c68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003c6a:	e046      	b.n	8003cfa <LL_RCC_GetUSARTClockFreq+0xda>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8003c6c:	f7ff ff34 	bl	8003ad8 <LL_RCC_LSE_IsReady>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d143      	bne.n	8003cfe <LL_RCC_GetUSARTClockFreq+0xde>
        {
          usart_frequency = LSE_VALUE;
 8003c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003c7c:	e03f      	b.n	8003cfe <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8003c7e:	f000 f853 	bl	8003d28 <RCC_GetSystemClockFreq>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f8f7 	bl	8003e78 <RCC_GetHCLK1ClockFreq>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f91d 	bl	8003ecc <RCC_GetPCLK2ClockFreq>
 8003c92:	60f8      	str	r0, [r7, #12]
        break;
 8003c94:	e038      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>
    }
  }
  else
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff82 	bl	8003ba0 <LL_RCC_GetUSARTClockSource>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003ca2:	d015      	beq.n	8003cd0 <LL_RCC_GetUSARTClockFreq+0xb0>
 8003ca4:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003ca8:	d81b      	bhi.n	8003ce2 <LL_RCC_GetUSARTClockFreq+0xc2>
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <LL_RCC_GetUSARTClockFreq+0x100>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <LL_RCC_GetUSARTClockFreq+0x98>
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <LL_RCC_GetUSARTClockFreq+0x104>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <LL_RCC_GetUSARTClockFreq+0xa0>
 8003cb6:	e014      	b.n	8003ce2 <LL_RCC_GetUSARTClockFreq+0xc2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003cb8:	f000 f836 	bl	8003d28 <RCC_GetSystemClockFreq>
 8003cbc:	60f8      	str	r0, [r7, #12]
        break;
 8003cbe:	e023      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003cc0:	f7ff fef9 	bl	8003ab6 <LL_RCC_HSI_IsReady>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d11b      	bne.n	8003d02 <LL_RCC_GetUSARTClockFreq+0xe2>
        {
          usart_frequency = HSI_VALUE;
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <LL_RCC_GetUSARTClockFreq+0xfc>)
 8003ccc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003cce:	e018      	b.n	8003d02 <LL_RCC_GetUSARTClockFreq+0xe2>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8003cd0:	f7ff ff02 	bl	8003ad8 <LL_RCC_LSE_IsReady>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d115      	bne.n	8003d06 <LL_RCC_GetUSARTClockFreq+0xe6>
        {
          usart_frequency = LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cde:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003ce0:	e011      	b.n	8003d06 <LL_RCC_GetUSARTClockFreq+0xe6>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8003ce2:	f000 f821 	bl	8003d28 <RCC_GetSystemClockFreq>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f8c5 	bl	8003e78 <RCC_GetHCLK1ClockFreq>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f8d7 	bl	8003ea4 <RCC_GetPCLK1ClockFreq>
 8003cf6:	60f8      	str	r0, [r7, #12]
        break;
 8003cf8:	e006      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e004      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003d06:	bf00      	nop
    }
  }
  return usart_frequency;
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	00030001 	.word	0x00030001
 8003d18:	00030002 	.word	0x00030002
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	000c0004 	.word	0x000c0004
 8003d24:	000c0008 	.word	0x000c0008

08003d28 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003d2e:	f7ff ff0b 	bl	8003b48 <LL_RCC_GetSysClkSource>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d861      	bhi.n	8003dfc <RCC_GetSystemClockFreq+0xd4>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <RCC_GetSystemClockFreq+0x18>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003dfd 	.word	0x08003dfd
 8003d48:	08003dfd 	.word	0x08003dfd
 8003d4c:	08003dfd 	.word	0x08003dfd
 8003d50:	08003dd9 	.word	0x08003dd9
 8003d54:	08003dfd 	.word	0x08003dfd
 8003d58:	08003dfd 	.word	0x08003dfd
 8003d5c:	08003dfd 	.word	0x08003dfd
 8003d60:	08003ddf 	.word	0x08003ddf
 8003d64:	08003dfd 	.word	0x08003dfd
 8003d68:	08003dfd 	.word	0x08003dfd
 8003d6c:	08003dfd 	.word	0x08003dfd
 8003d70:	08003df5 	.word	0x08003df5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d74:	f7ff fec1 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d115      	bne.n	8003daa <RCC_GetSystemClockFreq+0x82>
 8003d7e:	f7ff febc 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <RCC_GetSystemClockFreq+0x6e>
 8003d88:	f7ff fec7 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	e005      	b.n	8003da2 <RCC_GetSystemClockFreq+0x7a>
 8003d96:	f7ff fecb 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a32      	ldr	r2, [pc, #200]	; (8003e6c <RCC_GetSystemClockFreq+0x144>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	e014      	b.n	8003dd4 <RCC_GetSystemClockFreq+0xac>
 8003daa:	f7ff fea6 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <RCC_GetSystemClockFreq+0x9a>
 8003db4:	f7ff feb1 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003db8:	4603      	mov	r3, r0
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	e005      	b.n	8003dce <RCC_GetSystemClockFreq+0xa6>
 8003dc2:	f7ff feb5 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <RCC_GetSystemClockFreq+0x144>)
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003dd6:	e043      	b.n	8003e60 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <RCC_GetSystemClockFreq+0x148>)
 8003dda:	607b      	str	r3, [r7, #4]
      break;
 8003ddc:	e040      	b.n	8003e60 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dde:	f7ff fe59 	bl	8003a94 <LL_RCC_HSE_IsEnabledDiv2>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <RCC_GetSystemClockFreq+0xc6>
      {
        frequency = HSE_VALUE / 2U;
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <RCC_GetSystemClockFreq+0x148>)
 8003dea:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 8003dec:	e038      	b.n	8003e60 <RCC_GetSystemClockFreq+0x138>
        frequency = HSE_VALUE;
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <RCC_GetSystemClockFreq+0x14c>)
 8003df0:	607b      	str	r3, [r7, #4]
      break;
 8003df2:	e035      	b.n	8003e60 <RCC_GetSystemClockFreq+0x138>


    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003df4:	f000 f87e 	bl	8003ef4 <RCC_PLL_GetFreqDomain_SYS>
 8003df8:	6078      	str	r0, [r7, #4]
      break;
 8003dfa:	e031      	b.n	8003e60 <RCC_GetSystemClockFreq+0x138>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003dfc:	f7ff fe7d 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d115      	bne.n	8003e32 <RCC_GetSystemClockFreq+0x10a>
 8003e06:	f7ff fe78 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <RCC_GetSystemClockFreq+0xf6>
 8003e10:	f7ff fe83 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003e14:	4603      	mov	r3, r0
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	e005      	b.n	8003e2a <RCC_GetSystemClockFreq+0x102>
 8003e1e:	f7ff fe87 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e22:	4603      	mov	r3, r0
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <RCC_GetSystemClockFreq+0x144>)
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	e014      	b.n	8003e5c <RCC_GetSystemClockFreq+0x134>
 8003e32:	f7ff fe62 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <RCC_GetSystemClockFreq+0x122>
 8003e3c:	f7ff fe6d 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003e40:	4603      	mov	r3, r0
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	e005      	b.n	8003e56 <RCC_GetSystemClockFreq+0x12e>
 8003e4a:	f7ff fe71 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <RCC_GetSystemClockFreq+0x144>)
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003e5e:	bf00      	nop
  }

  return frequency;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	080069bc 	.word	0x080069bc
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	01e84800 	.word	0x01e84800

08003e78 <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e80:	f7ff fe6d 	bl	8003b5e <LL_RCC_GetAHBPrescaler>
 8003e84:	4603      	mov	r3, r0
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <RCC_GetHCLK1ClockFreq+0x28>)
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	0800695c 	.word	0x0800695c

08003ea4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003eac:	f7ff fe62 	bl	8003b74 <LL_RCC_GetAPB1Prescaler>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <RCC_GetPCLK1ClockFreq+0x24>)
 8003eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	0800699c 	.word	0x0800699c

08003ecc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ed4:	f7ff fe59 	bl	8003b8a <LL_RCC_GetAPB2Prescaler>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	0adb      	lsrs	r3, r3, #11
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <RCC_GetPCLK2ClockFreq+0x24>)
 8003ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	0800699c 	.word	0x0800699c

08003ef4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003efa:	f7ff fe85 	bl	8003c08 <LL_RCC_PLL_GetMainSource>
 8003efe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d03e      	beq.n	8003f84 <RCC_PLL_GetFreqDomain_SYS+0x90>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d846      	bhi.n	8003f9a <RCC_PLL_GetFreqDomain_SYS+0xa6>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d003      	beq.n	8003f1a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d032      	beq.n	8003f7e <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8003f18:	e03f      	b.n	8003f9a <RCC_PLL_GetFreqDomain_SYS+0xa6>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f1a:	f7ff fdee 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d115      	bne.n	8003f50 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8003f24:	f7ff fde9 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d106      	bne.n	8003f3c <RCC_PLL_GetFreqDomain_SYS+0x48>
 8003f2e:	f7ff fdf4 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003f32:	4603      	mov	r3, r0
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	e005      	b.n	8003f48 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003f3c:	f7ff fdf8 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f40:	4603      	mov	r3, r0
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	4a39      	ldr	r2, [pc, #228]	; (8004030 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8003f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4e:	e014      	b.n	8003f7a <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003f50:	f7ff fdd3 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d106      	bne.n	8003f68 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8003f5a:	f7ff fdde 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	e005      	b.n	8003f74 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003f68:	f7ff fde2 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7a:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003f7c:	e03f      	b.n	8003ffe <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8003f80:	607b      	str	r3, [r7, #4]
      break;
 8003f82:	e03c      	b.n	8003ffe <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f84:	f7ff fd86 	bl	8003a94 <LL_RCC_HSE_IsEnabledDiv2>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d102      	bne.n	8003f94 <RCC_PLL_GetFreqDomain_SYS+0xa0>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8003f90:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8003f92:	e034      	b.n	8003ffe <RCC_PLL_GetFreqDomain_SYS+0x10a>
        pllinputfreq = HSE_VALUE;
 8003f94:	4b28      	ldr	r3, [pc, #160]	; (8004038 <RCC_PLL_GetFreqDomain_SYS+0x144>)
 8003f96:	607b      	str	r3, [r7, #4]
      break;
 8003f98:	e031      	b.n	8003ffe <RCC_PLL_GetFreqDomain_SYS+0x10a>


    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f9a:	f7ff fdae 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d115      	bne.n	8003fd0 <RCC_PLL_GetFreqDomain_SYS+0xdc>
 8003fa4:	f7ff fda9 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d106      	bne.n	8003fbc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8003fae:	f7ff fdb4 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	e005      	b.n	8003fc8 <RCC_PLL_GetFreqDomain_SYS+0xd4>
 8003fbc:	f7ff fdb8 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8003fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fce:	e014      	b.n	8003ffa <RCC_PLL_GetFreqDomain_SYS+0x106>
 8003fd0:	f7ff fd93 	bl	8003afa <LL_RCC_MSI_IsEnabledRangeSelect>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d106      	bne.n	8003fe8 <RCC_PLL_GetFreqDomain_SYS+0xf4>
 8003fda:	f7ff fd9e 	bl	8003b1a <LL_RCC_MSI_GetRange>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	e005      	b.n	8003ff4 <RCC_PLL_GetFreqDomain_SYS+0x100>
 8003fe8:	f7ff fda2 	bl	8003b30 <LL_RCC_MSI_GetRangeAfterStandby>
 8003fec:	4603      	mov	r3, r0
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003ffc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ffe:	f7ff fde1 	bl	8003bc4 <LL_RCC_PLL_GetN>
 8004002:	4602      	mov	r2, r0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	fb03 f402 	mul.w	r4, r3, r2
 800400a:	f7ff fdf2 	bl	8003bf2 <LL_RCC_PLL_GetDivider>
 800400e:	4603      	mov	r3, r0
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	3301      	adds	r3, #1
 8004014:	fbb4 f4f3 	udiv	r4, r4, r3
 8004018:	f7ff fde0 	bl	8003bdc <LL_RCC_PLL_GetR>
 800401c:	4603      	mov	r3, r0
 800401e:	0f5b      	lsrs	r3, r3, #29
 8004020:	3301      	adds	r3, #1
 8004022:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bd90      	pop	{r4, r7, pc}
 800402e:	bf00      	nop
 8004030:	080069bc 	.word	0x080069bc
 8004034:	00f42400 	.word	0x00f42400
 8004038:	01e84800 	.word	0x01e84800

0800403c <LL_APB1_GRP1_ForceReset>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4313      	orrs	r3, r2
 8004052:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <LL_APB1_GRP1_ReleaseReset>:
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	43db      	mvns	r3, r3
 8004070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004074:	4013      	ands	r3, r2
 8004076:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4313      	orrs	r3, r2
 8004098:	640b      	str	r3, [r1, #64]	; 0x40
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ba:	4013      	ands	r3, r2
 80040bc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <LL_SPI_IsEnabled>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d101      	bne.n	80040e0 <LL_SPI_IsEnabled+0x18>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <LL_SPI_IsEnabled+0x1a>
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <LL_SPI_SetRxFIFOThreshold>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	605a      	str	r2, [r3, #4]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <LL_SPI_SetCRCPolynomial>:
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	611a      	str	r2, [r3, #16]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
	...

08004130 <LL_SPI_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: SPI registers are de-initialized
  *          - ERROR: SPI registers are not de-initialized
  */
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));

#if defined(SPI1)
  if (SPIx == SPI1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <LL_SPI_DeInit+0x50>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d109      	bne.n	8004158 <LL_SPI_DeInit+0x28>
  {
    /* Force reset of SPI clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_SPI1);
 8004144:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004148:	f7ff ff9b 	bl	8004082 <LL_APB2_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_SPI1);
 800414c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004150:	f7ff ffa8 	bl	80040a4 <LL_APB2_GRP1_ReleaseReset>

    status = SUCCESS;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI1 */
#if defined(SPI2)
  if (SPIx == SPI2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <LL_SPI_DeInit+0x54>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d109      	bne.n	8004174 <LL_SPI_DeInit+0x44>
  {
    /* Force reset of SPI clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI2);
 8004160:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004164:	f7ff ff6a 	bl	800403c <LL_APB1_GRP1_ForceReset>

    /* Release reset of SPI clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI2);
 8004168:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800416c:	f7ff ff77 	bl	800405e <LL_APB1_GRP1_ReleaseReset>

    status = SUCCESS;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
  }
#endif /* SPI2 */

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40013000 	.word	0x40013000
 8004184:	40003800 	.word	0x40003800

08004188 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ff96 	bl	80040c8 <LL_SPI_IsEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d145      	bne.n	800422e <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041aa:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	6811      	ldr	r1, [r2, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	6852      	ldr	r2, [r2, #4]
 80041b6:	4311      	orrs	r1, r2
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	68d2      	ldr	r2, [r2, #12]
 80041bc:	4311      	orrs	r1, r2
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	6912      	ldr	r2, [r2, #16]
 80041c2:	4311      	orrs	r1, r2
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	6952      	ldr	r2, [r2, #20]
 80041c8:	4311      	orrs	r1, r2
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	6992      	ldr	r2, [r2, #24]
 80041ce:	4311      	orrs	r1, r2
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	69d2      	ldr	r2, [r2, #28]
 80041d4:	4311      	orrs	r1, r2
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	6a12      	ldr	r2, [r2, #32]
 80041da:	430a      	orrs	r2, r1
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ea:	f023 0304 	bic.w	r3, r3, #4
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	6891      	ldr	r1, [r2, #8]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	6952      	ldr	r2, [r2, #20]
 80041f6:	0c12      	lsrs	r2, r2, #16
 80041f8:	430a      	orrs	r2, r1
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004208:	d204      	bcs.n	8004214 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800420a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff6c 	bl	80040ec <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421c:	d105      	bne.n	800422a <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff73 	bl	8004110 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	61da      	str	r2, [r3, #28]
  return status;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <LL_APB1_GRP1_ForceReset>:
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4313      	orrs	r3, r2
 800425a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <LL_APB1_GRP1_ReleaseReset>:
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	43db      	mvns	r3, r3
 8004278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800427c:	4013      	ands	r3, r2
 800427e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <LL_APB2_GRP1_ForceReset>:
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4313      	orrs	r3, r2
 80042a0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <LL_APB2_GRP1_ReleaseReset>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	43db      	mvns	r3, r3
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	4013      	ands	r3, r2
 80042c4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <LL_USART_IsEnabled>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <LL_USART_IsEnabled+0x18>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <LL_USART_IsEnabled+0x1a>
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <LL_USART_SetPrescaler>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f023 030f 	bic.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	b292      	uxth	r2, r2
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <LL_USART_SetStopBitsLength>:
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	605a      	str	r2, [r3, #4]
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <LL_USART_SetHWFlowCtrl>:
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
	...

08004364 <LL_USART_SetBaudRate>:
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b0b      	cmp	r3, #11
 8004376:	d83c      	bhi.n	80043f2 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d039      	beq.n	80043f2 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004384:	d122      	bne.n	80043cc <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <LL_USART_SetBaudRate+0x98>)
 800438e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	005a      	lsls	r2, r3, #1
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	441a      	add	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	60da      	str	r2, [r3, #12]
}
 80043ca:	e012      	b.n	80043f2 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <LL_USART_SetBaudRate+0x98>)
 80043d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	fbb2 f2f3 	udiv	r2, r2, r3
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	441a      	add	r2, r3
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	60da      	str	r2, [r3, #12]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	080069fc 	.word	0x080069fc

08004400 <LL_USART_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are de-initialized
  *          - ERROR: USART registers are not de-initialized
  */
ErrorStatus LL_USART_DeInit(USART_TypeDef *USARTx)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a10      	ldr	r2, [pc, #64]	; (8004450 <LL_USART_DeInit+0x50>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <LL_USART_DeInit+0x26>
  {
    /* Force reset of USART clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 8004414:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004418:	f7ff ff37 	bl	800428a <LL_APB2_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 800441c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004420:	f7ff ff44 	bl	80042ac <LL_APB2_GRP1_ReleaseReset>
 8004424:	e00e      	b.n	8004444 <LL_USART_DeInit+0x44>
  }
  else if (USARTx == USART2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <LL_USART_DeInit+0x54>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d108      	bne.n	8004440 <LL_USART_DeInit+0x40>
  {
    /* Force reset of USART clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
 800442e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004432:	f7ff ff07 	bl	8004244 <LL_APB1_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
 8004436:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800443a:	f7ff ff14 	bl	8004266 <LL_APB1_GRP1_ReleaseReset>
 800443e:	e001      	b.n	8004444 <LL_USART_DeInit+0x44>
  }
  else
  {
    status = ERROR;
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40013800 	.word	0x40013800
 8004454:	40004400 	.word	0x40004400

08004458 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ff30 	bl	80042d0 <LL_USART_IsEnabled>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d149      	bne.n	800450a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <LL_USART_Init+0xbc>)
 800447c:	4013      	ands	r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6891      	ldr	r1, [r2, #8]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	6912      	ldr	r2, [r2, #16]
 8004486:	4311      	orrs	r1, r2
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	6952      	ldr	r2, [r2, #20]
 800448c:	4311      	orrs	r1, r2
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	69d2      	ldr	r2, [r2, #28]
 8004492:	430a      	orrs	r2, r1
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff3a 	bl	800431a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff46 	bl	800433e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <LL_USART_Init+0xc0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d104      	bne.n	80044c4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80044ba:	2003      	movs	r0, #3
 80044bc:	f7ff fbb0 	bl	8003c20 <LL_RCC_GetUSARTClockFreq>
 80044c0:	60b8      	str	r0, [r7, #8]
 80044c2:	e007      	b.n	80044d4 <LL_USART_Init+0x7c>
    }
    else if (USARTx == USART2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a15      	ldr	r2, [pc, #84]	; (800451c <LL_USART_Init+0xc4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80044cc:	200c      	movs	r0, #12
 80044ce:	f7ff fba7 	bl	8003c20 <LL_RCC_GetUSARTClockFreq>
 80044d2:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d011      	beq.n	80044fe <LL_USART_Init+0xa6>
        && (USART_InitStruct->BaudRate != 0U))
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <LL_USART_Init+0xa6>
    {
      status = SUCCESS;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	69d9      	ldr	r1, [r3, #28]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	460b      	mov	r3, r1
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ff33 	bl	8004364 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fef5 	bl	80042f4 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	efff69f3 	.word	0xefff69f3
 8004518:	40013800 	.word	0x40013800
 800451c:	40004400 	.word	0x40004400

08004520 <OPENBL_Init>:
/**
  * @brief  This function is used to initialize the registered interfaces in the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
  uint32_t counter;

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	e00f      	b.n	800454c <OPENBL_Init+0x2c>
  {
    if (a_InterfacesTable[counter].p_Ops->Init != NULL)
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <OPENBL_Init+0x40>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <OPENBL_Init+0x26>
    {
      a_InterfacesTable[counter].p_Ops->Init();
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <OPENBL_Init+0x40>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4798      	blx	r3
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3301      	adds	r3, #1
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <OPENBL_Init+0x44>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3ea      	bcc.n	800452c <OPENBL_Init+0xc>
    }
  }
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	200003e8 	.word	0x200003e8
 8004564:	200003e4 	.word	0x200003e4

08004568 <OPENBL_DeInit>:
/**
  * @brief  This function is used to de-initialize the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_DeInit(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  OpenBootloader_DeInit();
 800456c:	f7fb ff06 	bl	800037c <OpenBootloader_DeInit>
}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}

08004574 <OPENBL_InterfacesDeInit>:
/**
  * @brief  This function is used to de-initialize the registered interfaces in the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_InterfacesDeInit(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  uint32_t counter;

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e00f      	b.n	80045a0 <OPENBL_InterfacesDeInit+0x2c>
  {
    if (a_InterfacesTable[counter].p_Ops->DeInit != NULL)
 8004580:	4a0c      	ldr	r2, [pc, #48]	; (80045b4 <OPENBL_InterfacesDeInit+0x40>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <OPENBL_InterfacesDeInit+0x26>
    {
      a_InterfacesTable[counter].p_Ops->DeInit();
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <OPENBL_InterfacesDeInit+0x40>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4798      	blx	r3
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3301      	adds	r3, #1
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <OPENBL_InterfacesDeInit+0x44>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3ea      	bcc.n	8004580 <OPENBL_InterfacesDeInit+0xc>
    }
  }
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	200003e8 	.word	0x200003e8
 80045b8:	200003e4 	.word	0x200003e4

080045bc <OPENBL_RegisterInterface>:
/**
  * @brief  This function is used to register a given interface in the Open Bootloader MW.
  * @retval None.
  */
ErrorStatus OPENBL_RegisterInterface(OPENBL_HandleTypeDef *Interface)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]

  if (NumberOfInterfaces < INTERFACES_SUPPORTED)
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <OPENBL_RegisterInterface+0x50>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d814      	bhi.n	80045fa <OPENBL_RegisterInterface+0x3e>
  {
    a_InterfacesTable[NumberOfInterfaces].p_Ops = Interface->p_Ops;
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <OPENBL_RegisterInterface+0x50>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	490d      	ldr	r1, [pc, #52]	; (8004610 <OPENBL_RegisterInterface+0x54>)
 80045da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    a_InterfacesTable[NumberOfInterfaces].p_Cmd = Interface->p_Cmd;
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <OPENBL_RegisterInterface+0x50>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6852      	ldr	r2, [r2, #4]
 80045e6:	490a      	ldr	r1, [pc, #40]	; (8004610 <OPENBL_RegisterInterface+0x54>)
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	440b      	add	r3, r1
 80045ec:	605a      	str	r2, [r3, #4]

    NumberOfInterfaces++;
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <OPENBL_RegisterInterface+0x50>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a05      	ldr	r2, [pc, #20]	; (800460c <OPENBL_RegisterInterface+0x50>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e001      	b.n	80045fe <OPENBL_RegisterInterface+0x42>
  }
  else
  {
    status = ERROR;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	200003e4 	.word	0x200003e4
 8004610:	200003e8 	.word	0x200003e8

08004614 <OPENBL_InterfaceDetection>:
/**
  * @brief  This function is used to detect if there is any activity on a given interface.
  * @retval None.
  */
uint32_t OPENBL_InterfaceDetection(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  uint32_t counter;
  uint8_t detected = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	70fb      	strb	r3, [r7, #3]

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	e01b      	b.n	800465c <OPENBL_InterfaceDetection+0x48>
  {
    if (a_InterfacesTable[counter].p_Ops->Detection != NULL)
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <OPENBL_InterfaceDetection+0x5c>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d011      	beq.n	8004656 <OPENBL_InterfaceDetection+0x42>
    {
      detected = a_InterfacesTable[counter].p_Ops->Detection();
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <OPENBL_InterfaceDetection+0x5c>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4798      	blx	r3
 800463e:	4603      	mov	r3, r0
 8004640:	70fb      	strb	r3, [r7, #3]

      if (detected == 1U)
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d106      	bne.n	8004656 <OPENBL_InterfaceDetection+0x42>
      {
        p_Interface = &(a_InterfacesTable[counter]);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <OPENBL_InterfaceDetection+0x5c>)
 800464e:	4413      	add	r3, r2
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <OPENBL_InterfaceDetection+0x60>)
 8004652:	6013      	str	r3, [r2, #0]
        break;
 8004654:	e007      	b.n	8004666 <OPENBL_InterfaceDetection+0x52>
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3301      	adds	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <OPENBL_InterfaceDetection+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d3de      	bcc.n	8004624 <OPENBL_InterfaceDetection+0x10>
      }
    }
  }

  return detected;
 8004666:	78fb      	ldrb	r3, [r7, #3]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200003e8 	.word	0x200003e8
 8004674:	20000400 	.word	0x20000400
 8004678:	200003e4 	.word	0x200003e4

0800467c <OPENBL_CommandProcess>:
/**
  * @brief  This function is used to get the command opcode from the given interface and execute the right command.
  * @retval None.
  */
void OPENBL_CommandProcess(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  uint8_t command_opcode;

  /* Get the user command opcode */
  if (p_Interface->p_Ops->GetCommandOpcode != NULL)
 8004682:	4bcb      	ldr	r3, [pc, #812]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8391 	beq.w	8004db2 <OPENBL_CommandProcess+0x736>
  {
    command_opcode = p_Interface->p_Ops->GetCommandOpcode();
 8004690:	4bc7      	ldr	r3, [pc, #796]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4798      	blx	r3
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]

    switch (command_opcode)
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b93      	cmp	r3, #147	; 0x93
 80046a2:	f200 834e 	bhi.w	8004d42 <OPENBL_CommandProcess+0x6c6>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <OPENBL_CommandProcess+0x30>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080048fd 	.word	0x080048fd
 80046b0:	08004931 	.word	0x08004931
 80046b4:	08004965 	.word	0x08004965
 80046b8:	08004cad 	.word	0x08004cad
 80046bc:	08004d43 	.word	0x08004d43
 80046c0:	08004d43 	.word	0x08004d43
 80046c4:	08004d43 	.word	0x08004d43
 80046c8:	08004d43 	.word	0x08004d43
 80046cc:	08004d43 	.word	0x08004d43
 80046d0:	08004d43 	.word	0x08004d43
 80046d4:	08004d43 	.word	0x08004d43
 80046d8:	08004d43 	.word	0x08004d43
 80046dc:	08004d43 	.word	0x08004d43
 80046e0:	08004d43 	.word	0x08004d43
 80046e4:	08004d43 	.word	0x08004d43
 80046e8:	08004d43 	.word	0x08004d43
 80046ec:	08004d43 	.word	0x08004d43
 80046f0:	08004999 	.word	0x08004999
 80046f4:	08004d43 	.word	0x08004d43
 80046f8:	08004d43 	.word	0x08004d43
 80046fc:	08004d43 	.word	0x08004d43
 8004700:	08004d43 	.word	0x08004d43
 8004704:	08004d43 	.word	0x08004d43
 8004708:	08004d43 	.word	0x08004d43
 800470c:	08004d43 	.word	0x08004d43
 8004710:	08004d43 	.word	0x08004d43
 8004714:	08004d43 	.word	0x08004d43
 8004718:	08004d43 	.word	0x08004d43
 800471c:	08004d43 	.word	0x08004d43
 8004720:	08004d43 	.word	0x08004d43
 8004724:	08004d43 	.word	0x08004d43
 8004728:	08004d43 	.word	0x08004d43
 800472c:	08004d43 	.word	0x08004d43
 8004730:	08004a05 	.word	0x08004a05
 8004734:	08004d43 	.word	0x08004d43
 8004738:	08004d43 	.word	0x08004d43
 800473c:	08004d43 	.word	0x08004d43
 8004740:	08004d43 	.word	0x08004d43
 8004744:	08004d43 	.word	0x08004d43
 8004748:	08004d43 	.word	0x08004d43
 800474c:	08004d43 	.word	0x08004d43
 8004750:	08004d43 	.word	0x08004d43
 8004754:	08004d43 	.word	0x08004d43
 8004758:	08004d43 	.word	0x08004d43
 800475c:	08004d43 	.word	0x08004d43
 8004760:	08004d43 	.word	0x08004d43
 8004764:	08004d43 	.word	0x08004d43
 8004768:	08004d43 	.word	0x08004d43
 800476c:	08004d43 	.word	0x08004d43
 8004770:	080049d1 	.word	0x080049d1
 8004774:	08004b71 	.word	0x08004b71
 8004778:	08004d43 	.word	0x08004d43
 800477c:	08004d43 	.word	0x08004d43
 8004780:	08004d43 	.word	0x08004d43
 8004784:	08004d43 	.word	0x08004d43
 8004788:	08004d43 	.word	0x08004d43
 800478c:	08004d43 	.word	0x08004d43
 8004790:	08004d43 	.word	0x08004d43
 8004794:	08004d43 	.word	0x08004d43
 8004798:	08004d43 	.word	0x08004d43
 800479c:	08004d43 	.word	0x08004d43
 80047a0:	08004d43 	.word	0x08004d43
 80047a4:	08004d43 	.word	0x08004d43
 80047a8:	08004d43 	.word	0x08004d43
 80047ac:	08004d43 	.word	0x08004d43
 80047b0:	08004d43 	.word	0x08004d43
 80047b4:	08004d43 	.word	0x08004d43
 80047b8:	08004ad5 	.word	0x08004ad5
 80047bc:	08004aa1 	.word	0x08004aa1
 80047c0:	08004ba5 	.word	0x08004ba5
 80047c4:	08004d43 	.word	0x08004d43
 80047c8:	08004d43 	.word	0x08004d43
 80047cc:	08004d43 	.word	0x08004d43
 80047d0:	08004d43 	.word	0x08004d43
 80047d4:	08004d43 	.word	0x08004d43
 80047d8:	08004d43 	.word	0x08004d43
 80047dc:	08004d43 	.word	0x08004d43
 80047e0:	08004d43 	.word	0x08004d43
 80047e4:	08004d43 	.word	0x08004d43
 80047e8:	08004d43 	.word	0x08004d43
 80047ec:	08004cdf 	.word	0x08004cdf
 80047f0:	08004d11 	.word	0x08004d11
 80047f4:	08004d43 	.word	0x08004d43
 80047f8:	08004d43 	.word	0x08004d43
 80047fc:	08004d43 	.word	0x08004d43
 8004800:	08004d43 	.word	0x08004d43
 8004804:	08004d43 	.word	0x08004d43
 8004808:	08004d43 	.word	0x08004d43
 800480c:	08004d43 	.word	0x08004d43
 8004810:	08004d43 	.word	0x08004d43
 8004814:	08004d43 	.word	0x08004d43
 8004818:	08004d43 	.word	0x08004d43
 800481c:	08004d43 	.word	0x08004d43
 8004820:	08004d43 	.word	0x08004d43
 8004824:	08004d43 	.word	0x08004d43
 8004828:	08004d43 	.word	0x08004d43
 800482c:	08004d43 	.word	0x08004d43
 8004830:	08004d43 	.word	0x08004d43
 8004834:	08004d43 	.word	0x08004d43
 8004838:	08004b09 	.word	0x08004b09
 800483c:	08004bdd 	.word	0x08004bdd
 8004840:	08004d43 	.word	0x08004d43
 8004844:	08004d43 	.word	0x08004d43
 8004848:	08004d43 	.word	0x08004d43
 800484c:	08004d43 	.word	0x08004d43
 8004850:	08004d43 	.word	0x08004d43
 8004854:	08004d43 	.word	0x08004d43
 8004858:	08004d43 	.word	0x08004d43
 800485c:	08004d43 	.word	0x08004d43
 8004860:	08004d43 	.word	0x08004d43
 8004864:	08004d43 	.word	0x08004d43
 8004868:	08004d43 	.word	0x08004d43
 800486c:	08004d43 	.word	0x08004d43
 8004870:	08004d43 	.word	0x08004d43
 8004874:	08004d43 	.word	0x08004d43
 8004878:	08004b3d 	.word	0x08004b3d
 800487c:	08004c11 	.word	0x08004c11
 8004880:	08004d43 	.word	0x08004d43
 8004884:	08004d43 	.word	0x08004d43
 8004888:	08004d43 	.word	0x08004d43
 800488c:	08004d43 	.word	0x08004d43
 8004890:	08004d43 	.word	0x08004d43
 8004894:	08004d43 	.word	0x08004d43
 8004898:	08004d43 	.word	0x08004d43
 800489c:	08004d43 	.word	0x08004d43
 80048a0:	08004d43 	.word	0x08004d43
 80048a4:	08004d43 	.word	0x08004d43
 80048a8:	08004d43 	.word	0x08004d43
 80048ac:	08004d43 	.word	0x08004d43
 80048b0:	08004d43 	.word	0x08004d43
 80048b4:	08004a39 	.word	0x08004a39
 80048b8:	08004c45 	.word	0x08004c45
 80048bc:	08004d43 	.word	0x08004d43
 80048c0:	08004d43 	.word	0x08004d43
 80048c4:	08004d43 	.word	0x08004d43
 80048c8:	08004d43 	.word	0x08004d43
 80048cc:	08004d43 	.word	0x08004d43
 80048d0:	08004d43 	.word	0x08004d43
 80048d4:	08004d43 	.word	0x08004d43
 80048d8:	08004d43 	.word	0x08004d43
 80048dc:	08004d43 	.word	0x08004d43
 80048e0:	08004d43 	.word	0x08004d43
 80048e4:	08004d43 	.word	0x08004d43
 80048e8:	08004d43 	.word	0x08004d43
 80048ec:	08004d43 	.word	0x08004d43
 80048f0:	08004d43 	.word	0x08004d43
 80048f4:	08004a6d 	.word	0x08004a6d
 80048f8:	08004c79 	.word	0x08004c79
    {
      case CMD_GET_COMMAND:
        if (p_Interface->p_Cmd->GetCommand != NULL)
 80048fc:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <OPENBL_CommandProcess+0x298>
        {
          p_Interface->p_Cmd->GetCommand();
 8004908:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004912:	e223      	b.n	8004d5c <OPENBL_CommandProcess+0x6e0>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 821d 	beq.w	8004d5c <OPENBL_CommandProcess+0x6e0>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004922:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	201f      	movs	r0, #31
 800492c:	4798      	blx	r3
        break;
 800492e:	e215      	b.n	8004d5c <OPENBL_CommandProcess+0x6e0>

      case CMD_GET_VERSION:
        if (p_Interface->p_Cmd->GetVersion != NULL)
 8004930:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <OPENBL_CommandProcess+0x2cc>
        {
          p_Interface->p_Cmd->GetVersion();
 800493c:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004946:	e20b      	b.n	8004d60 <OPENBL_CommandProcess+0x6e4>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8205 	beq.w	8004d60 <OPENBL_CommandProcess+0x6e4>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004956:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	201f      	movs	r0, #31
 8004960:	4798      	blx	r3
        break;
 8004962:	e1fd      	b.n	8004d60 <OPENBL_CommandProcess+0x6e4>

      case CMD_GET_ID:
        if (p_Interface->p_Cmd->GetID != NULL)
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <OPENBL_CommandProcess+0x300>
        {
          p_Interface->p_Cmd->GetID();
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 800497a:	e1f3      	b.n	8004d64 <OPENBL_CommandProcess+0x6e8>
          if (p_Interface->p_Ops->SendByte != NULL)
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 81ed 	beq.w	8004d64 <OPENBL_CommandProcess+0x6e8>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	201f      	movs	r0, #31
 8004994:	4798      	blx	r3
        break;
 8004996:	e1e5      	b.n	8004d64 <OPENBL_CommandProcess+0x6e8>

      case CMD_READ_MEMORY:
        if (p_Interface->p_Cmd->ReadMemory != NULL)
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <OPENBL_CommandProcess+0x338>
        {
          p_Interface->p_Cmd->ReadMemory();
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <OPENBL_CommandProcess+0x334>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 80049ae:	e1db      	b.n	8004d68 <OPENBL_CommandProcess+0x6ec>
 80049b0:	20000400 	.word	0x20000400
          if (p_Interface->p_Ops->SendByte != NULL)
 80049b4:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 81d3 	beq.w	8004d68 <OPENBL_CommandProcess+0x6ec>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 80049c2:	4b7e      	ldr	r3, [pc, #504]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	201f      	movs	r0, #31
 80049cc:	4798      	blx	r3
        break;
 80049ce:	e1cb      	b.n	8004d68 <OPENBL_CommandProcess+0x6ec>

      case CMD_WRITE_MEMORY:
        if (p_Interface->p_Cmd->WriteMemory != NULL)
 80049d0:	4b7a      	ldr	r3, [pc, #488]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <OPENBL_CommandProcess+0x36c>
        {
          p_Interface->p_Cmd->WriteMemory();
 80049dc:	4b77      	ldr	r3, [pc, #476]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 80049e6:	e1c1      	b.n	8004d6c <OPENBL_CommandProcess+0x6f0>
          if (p_Interface->p_Ops->SendByte != NULL)
 80049e8:	4b74      	ldr	r3, [pc, #464]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 81bb 	beq.w	8004d6c <OPENBL_CommandProcess+0x6f0>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 80049f6:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	201f      	movs	r0, #31
 8004a00:	4798      	blx	r3
        break;
 8004a02:	e1b3      	b.n	8004d6c <OPENBL_CommandProcess+0x6f0>

      case CMD_GO:
        if (p_Interface->p_Cmd->Go != NULL)
 8004a04:	4b6d      	ldr	r3, [pc, #436]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <OPENBL_CommandProcess+0x3a0>
        {
          p_Interface->p_Cmd->Go();
 8004a10:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004a1a:	e1a9      	b.n	8004d70 <OPENBL_CommandProcess+0x6f4>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004a1c:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 81a3 	beq.w	8004d70 <OPENBL_CommandProcess+0x6f4>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004a2a:	4b64      	ldr	r3, [pc, #400]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	201f      	movs	r0, #31
 8004a34:	4798      	blx	r3
        break;
 8004a36:	e19b      	b.n	8004d70 <OPENBL_CommandProcess+0x6f4>

      case CMD_READ_PROTECT:
        if (p_Interface->p_Cmd->ReadoutProtect != NULL)
 8004a38:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <OPENBL_CommandProcess+0x3d4>
        {
          p_Interface->p_Cmd->ReadoutProtect();
 8004a44:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004a4e:	e191      	b.n	8004d74 <OPENBL_CommandProcess+0x6f8>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004a50:	4b5a      	ldr	r3, [pc, #360]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 818b 	beq.w	8004d74 <OPENBL_CommandProcess+0x6f8>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004a5e:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	201f      	movs	r0, #31
 8004a68:	4798      	blx	r3
        break;
 8004a6a:	e183      	b.n	8004d74 <OPENBL_CommandProcess+0x6f8>

      case CMD_READ_UNPROTECT:
        if (p_Interface->p_Cmd->ReadoutUnprotect != NULL)
 8004a6c:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <OPENBL_CommandProcess+0x408>
        {
          p_Interface->p_Cmd->ReadoutUnprotect();
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004a82:	e179      	b.n	8004d78 <OPENBL_CommandProcess+0x6fc>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004a84:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8173 	beq.w	8004d78 <OPENBL_CommandProcess+0x6fc>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004a92:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	201f      	movs	r0, #31
 8004a9c:	4798      	blx	r3
        break;
 8004a9e:	e16b      	b.n	8004d78 <OPENBL_CommandProcess+0x6fc>

      case CMD_EXT_ERASE_MEMORY:
        if (p_Interface->p_Cmd->EraseMemory != NULL)
 8004aa0:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <OPENBL_CommandProcess+0x43c>
        {
          p_Interface->p_Cmd->EraseMemory();
 8004aac:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004ab6:	e161      	b.n	8004d7c <OPENBL_CommandProcess+0x700>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004ab8:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 815b 	beq.w	8004d7c <OPENBL_CommandProcess+0x700>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004ac6:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	201f      	movs	r0, #31
 8004ad0:	4798      	blx	r3
        break;
 8004ad2:	e153      	b.n	8004d7c <OPENBL_CommandProcess+0x700>

      case CMD_LEG_ERASE_MEMORY:
        if (p_Interface->p_Cmd->EraseMemory != NULL)
 8004ad4:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <OPENBL_CommandProcess+0x470>
        {
          p_Interface->p_Cmd->EraseMemory();
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004aea:	e149      	b.n	8004d80 <OPENBL_CommandProcess+0x704>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004aec:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8143 	beq.w	8004d80 <OPENBL_CommandProcess+0x704>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004afa:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	201f      	movs	r0, #31
 8004b04:	4798      	blx	r3
        break;
 8004b06:	e13b      	b.n	8004d80 <OPENBL_CommandProcess+0x704>

      case CMD_WRITE_PROTECT:
        if (p_Interface->p_Cmd->WriteProtect != NULL)
 8004b08:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <OPENBL_CommandProcess+0x4a4>
        {
          p_Interface->p_Cmd->WriteProtect();
 8004b14:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004b1e:	e131      	b.n	8004d84 <OPENBL_CommandProcess+0x708>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 812b 	beq.w	8004d84 <OPENBL_CommandProcess+0x708>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	201f      	movs	r0, #31
 8004b38:	4798      	blx	r3
        break;
 8004b3a:	e123      	b.n	8004d84 <OPENBL_CommandProcess+0x708>

      case CMD_WRITE_UNPROTECT:
        if (p_Interface->p_Cmd->WriteUnprotect != NULL)
 8004b3c:	4b1f      	ldr	r3, [pc, #124]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <OPENBL_CommandProcess+0x4d8>
        {
          p_Interface->p_Cmd->WriteUnprotect();
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004b52:	e119      	b.n	8004d88 <OPENBL_CommandProcess+0x70c>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004b54:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8113 	beq.w	8004d88 <OPENBL_CommandProcess+0x70c>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	201f      	movs	r0, #31
 8004b6c:	4798      	blx	r3
        break;
 8004b6e:	e10b      	b.n	8004d88 <OPENBL_CommandProcess+0x70c>

      case CMD_NS_WRITE_MEMORY:
        if (p_Interface->p_Cmd->NsWriteMemory != NULL)
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <OPENBL_CommandProcess+0x50c>
        {
          p_Interface->p_Cmd->NsWriteMemory();
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004b86:	e101      	b.n	8004d8c <OPENBL_CommandProcess+0x710>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80fb 	beq.w	8004d8c <OPENBL_CommandProcess+0x710>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	201f      	movs	r0, #31
 8004ba0:	4798      	blx	r3
        break;
 8004ba2:	e0f3      	b.n	8004d8c <OPENBL_CommandProcess+0x710>

      case CMD_NS_ERASE_MEMORY:
        if (p_Interface->p_Cmd->NsEraseMemory != NULL)
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <OPENBL_CommandProcess+0x544>
        {
          p_Interface->p_Cmd->NsEraseMemory();
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <OPENBL_CommandProcess+0x540>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004bba:	e0e9      	b.n	8004d90 <OPENBL_CommandProcess+0x714>
 8004bbc:	20000400 	.word	0x20000400
          if (p_Interface->p_Ops->SendByte != NULL)
 8004bc0:	4b7e      	ldr	r3, [pc, #504]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80e1 	beq.w	8004d90 <OPENBL_CommandProcess+0x714>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004bce:	4b7b      	ldr	r3, [pc, #492]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	201f      	movs	r0, #31
 8004bd8:	4798      	blx	r3
        break;
 8004bda:	e0d9      	b.n	8004d90 <OPENBL_CommandProcess+0x714>

      case CMD_NS_WRITE_PROTECT:
        if (p_Interface->p_Cmd->NsWriteProtect != NULL)
 8004bdc:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <OPENBL_CommandProcess+0x578>
        {
          p_Interface->p_Cmd->NsWriteProtect();
 8004be8:	4b74      	ldr	r3, [pc, #464]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004bf2:	e0cf      	b.n	8004d94 <OPENBL_CommandProcess+0x718>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004bf4:	4b71      	ldr	r3, [pc, #452]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80c9 	beq.w	8004d94 <OPENBL_CommandProcess+0x718>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c02:	4b6e      	ldr	r3, [pc, #440]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	201f      	movs	r0, #31
 8004c0c:	4798      	blx	r3
        break;
 8004c0e:	e0c1      	b.n	8004d94 <OPENBL_CommandProcess+0x718>

      case CMD_NS_WRITE_UNPROTECT:
        if (p_Interface->p_Cmd->NsWriteUnprotect != NULL)
 8004c10:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <OPENBL_CommandProcess+0x5ac>
        {
          p_Interface->p_Cmd->NsWriteUnprotect();
 8004c1c:	4b67      	ldr	r3, [pc, #412]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004c26:	e0b7      	b.n	8004d98 <OPENBL_CommandProcess+0x71c>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004c28:	4b64      	ldr	r3, [pc, #400]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80b1 	beq.w	8004d98 <OPENBL_CommandProcess+0x71c>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c36:	4b61      	ldr	r3, [pc, #388]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	201f      	movs	r0, #31
 8004c40:	4798      	blx	r3
        break;
 8004c42:	e0a9      	b.n	8004d98 <OPENBL_CommandProcess+0x71c>

      case CMD_NS_READ_PROTECT:
        if (p_Interface->p_Cmd->NsReadoutProtect != NULL)
 8004c44:	4b5d      	ldr	r3, [pc, #372]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <OPENBL_CommandProcess+0x5e0>
        {
          p_Interface->p_Cmd->NsReadoutProtect();
 8004c50:	4b5a      	ldr	r3, [pc, #360]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004c5a:	e09f      	b.n	8004d9c <OPENBL_CommandProcess+0x720>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004c5c:	4b57      	ldr	r3, [pc, #348]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8099 	beq.w	8004d9c <OPENBL_CommandProcess+0x720>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c6a:	4b54      	ldr	r3, [pc, #336]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	201f      	movs	r0, #31
 8004c74:	4798      	blx	r3
        break;
 8004c76:	e091      	b.n	8004d9c <OPENBL_CommandProcess+0x720>

      case CMD_NS_READ_UNPROTECT:
        if (p_Interface->p_Cmd->NsReadoutUnprotect != NULL)
 8004c78:	4b50      	ldr	r3, [pc, #320]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <OPENBL_CommandProcess+0x614>
        {
          p_Interface->p_Cmd->NsReadoutUnprotect();
 8004c84:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004c8e:	e087      	b.n	8004da0 <OPENBL_CommandProcess+0x724>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004c90:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8081 	beq.w	8004da0 <OPENBL_CommandProcess+0x724>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c9e:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	201f      	movs	r0, #31
 8004ca8:	4798      	blx	r3
        break;
 8004caa:	e079      	b.n	8004da0 <OPENBL_CommandProcess+0x724>

      case CMD_SPEED:
        if (p_Interface->p_Cmd->Speed != NULL)
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <OPENBL_CommandProcess+0x648>
        {
          p_Interface->p_Cmd->Speed();
 8004cb8:	4b40      	ldr	r3, [pc, #256]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004cc2:	e06f      	b.n	8004da4 <OPENBL_CommandProcess+0x728>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d069      	beq.n	8004da4 <OPENBL_CommandProcess+0x728>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004cd0:	4b3a      	ldr	r3, [pc, #232]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	201f      	movs	r0, #31
 8004cda:	4798      	blx	r3
        break;
 8004cdc:	e062      	b.n	8004da4 <OPENBL_CommandProcess+0x728>

      case CMD_SPECIAL_COMMAND:
        if (p_Interface->p_Cmd->SpecialCommand != NULL)
 8004cde:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <OPENBL_CommandProcess+0x67a>
        {
          p_Interface->p_Cmd->SpecialCommand();
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004cf4:	e058      	b.n	8004da8 <OPENBL_CommandProcess+0x72c>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d052      	beq.n	8004da8 <OPENBL_CommandProcess+0x72c>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004d02:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	201f      	movs	r0, #31
 8004d0c:	4798      	blx	r3
        break;
 8004d0e:	e04b      	b.n	8004da8 <OPENBL_CommandProcess+0x72c>

      case CMD_EXTENDED_SPECIAL_COMMAND:
        if (p_Interface->p_Cmd->ExtendedSpecialCommand != NULL)
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <OPENBL_CommandProcess+0x6ac>
        {
          p_Interface->p_Cmd->ExtendedSpecialCommand();
 8004d1c:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d24:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004d26:	e041      	b.n	8004dac <OPENBL_CommandProcess+0x730>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d03b      	beq.n	8004dac <OPENBL_CommandProcess+0x730>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	201f      	movs	r0, #31
 8004d3e:	4798      	blx	r3
        break;
 8004d40:	e034      	b.n	8004dac <OPENBL_CommandProcess+0x730>

      /* Unknown command opcode */
      default:
        if (p_Interface->p_Ops->SendByte != NULL)
 8004d42:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d030      	beq.n	8004db0 <OPENBL_CommandProcess+0x734>
        {
          p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <OPENBL_CommandProcess+0x740>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	201f      	movs	r0, #31
 8004d58:	4798      	blx	r3
        }
        break;
 8004d5a:	e029      	b.n	8004db0 <OPENBL_CommandProcess+0x734>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e028      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d60:	bf00      	nop
 8004d62:	e026      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d64:	bf00      	nop
 8004d66:	e024      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d68:	bf00      	nop
 8004d6a:	e022      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e020      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d70:	bf00      	nop
 8004d72:	e01e      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d74:	bf00      	nop
 8004d76:	e01c      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e01a      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e018      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d80:	bf00      	nop
 8004d82:	e016      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d84:	bf00      	nop
 8004d86:	e014      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d88:	bf00      	nop
 8004d8a:	e012      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d8c:	bf00      	nop
 8004d8e:	e010      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d90:	bf00      	nop
 8004d92:	e00e      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d94:	bf00      	nop
 8004d96:	e00c      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d98:	bf00      	nop
 8004d9a:	e00a      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004d9c:	bf00      	nop
 8004d9e:	e008      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004da0:	bf00      	nop
 8004da2:	e006      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004da4:	bf00      	nop
 8004da6:	e004      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <OPENBL_CommandProcess+0x736>
        break;
 8004db0:	bf00      	nop
    }
  }
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000400 	.word	0x20000400

08004dc0 <OPENBL_MEM_RegisterMemory>:
  * @brief  This function is used to register memory interfaces in Open Bootloader MW.
  * @param  *Memory A pointer to the memory handle.
  * @retval ErrorStatus Returns ERROR in case of no more space in the memories table else returns SUCCESS.
  */
ErrorStatus OPENBL_MEM_RegisterMemory(OPENBL_MemoryTypeDef *Memory)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]

  if (NumberOfMemories < MEMORIES_SUPPORTED)
 8004dcc:	4b44      	ldr	r3, [pc, #272]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d87d      	bhi.n	8004ed0 <OPENBL_MEM_RegisterMemory+0x110>
  {
    a_MemoriesTable[NumberOfMemories].StartAddress      = Memory->StartAddress;
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	4941      	ldr	r1, [pc, #260]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004dde:	202c      	movs	r0, #44	; 0x2c
 8004de0:	fb00 f303 	mul.w	r3, r0, r3
 8004de4:	440b      	add	r3, r1
 8004de6:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].EndAddress        = Memory->EndAddress;
 8004de8:	4b3d      	ldr	r3, [pc, #244]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	493c      	ldr	r1, [pc, #240]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004df2:	202c      	movs	r0, #44	; 0x2c
 8004df4:	fb00 f303 	mul.w	r3, r0, r3
 8004df8:	440b      	add	r3, r1
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Size              = Memory->Size;
 8004dfe:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6892      	ldr	r2, [r2, #8]
 8004e06:	4937      	ldr	r1, [pc, #220]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e08:	202c      	movs	r0, #44	; 0x2c
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	440b      	add	r3, r1
 8004e10:	3308      	adds	r3, #8
 8004e12:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Type              = Memory->Type;
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68d2      	ldr	r2, [r2, #12]
 8004e1c:	4931      	ldr	r1, [pc, #196]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e1e:	202c      	movs	r0, #44	; 0x2c
 8004e20:	fb00 f303 	mul.w	r3, r0, r3
 8004e24:	440b      	add	r3, r1
 8004e26:	330c      	adds	r3, #12
 8004e28:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Read              = Memory->Read;
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6912      	ldr	r2, [r2, #16]
 8004e32:	492c      	ldr	r1, [pc, #176]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e34:	202c      	movs	r0, #44	; 0x2c
 8004e36:	fb00 f303 	mul.w	r3, r0, r3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3310      	adds	r3, #16
 8004e3e:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Write             = Memory->Write;
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6952      	ldr	r2, [r2, #20]
 8004e48:	4926      	ldr	r1, [pc, #152]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e4a:	202c      	movs	r0, #44	; 0x2c
 8004e4c:	fb00 f303 	mul.w	r3, r0, r3
 8004e50:	440b      	add	r3, r1
 8004e52:	3314      	adds	r3, #20
 8004e54:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].SetReadoutProtect = Memory->SetReadoutProtect;
 8004e56:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6992      	ldr	r2, [r2, #24]
 8004e5e:	4921      	ldr	r1, [pc, #132]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e60:	202c      	movs	r0, #44	; 0x2c
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	440b      	add	r3, r1
 8004e68:	3318      	adds	r3, #24
 8004e6a:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].SetWriteProtect   = Memory->SetWriteProtect;
 8004e6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	69d2      	ldr	r2, [r2, #28]
 8004e74:	491b      	ldr	r1, [pc, #108]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e76:	202c      	movs	r0, #44	; 0x2c
 8004e78:	fb00 f303 	mul.w	r3, r0, r3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	331c      	adds	r3, #28
 8004e80:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].JumpToAddress     = Memory->JumpToAddress;
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6a12      	ldr	r2, [r2, #32]
 8004e8a:	4916      	ldr	r1, [pc, #88]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004e8c:	202c      	movs	r0, #44	; 0x2c
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	440b      	add	r3, r1
 8004e94:	3320      	adds	r3, #32
 8004e96:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].MassErase         = Memory->MassErase;
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea0:	4910      	ldr	r1, [pc, #64]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004ea2:	202c      	movs	r0, #44	; 0x2c
 8004ea4:	fb00 f303 	mul.w	r3, r0, r3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3324      	adds	r3, #36	; 0x24
 8004eac:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Erase             = Memory->Erase;
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004eb6:	490b      	ldr	r1, [pc, #44]	; (8004ee4 <OPENBL_MEM_RegisterMemory+0x124>)
 8004eb8:	202c      	movs	r0, #44	; 0x2c
 8004eba:	fb00 f303 	mul.w	r3, r0, r3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3328      	adds	r3, #40	; 0x28
 8004ec2:	601a      	str	r2, [r3, #0]

    NumberOfMemories++;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <OPENBL_MEM_RegisterMemory+0x120>)
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e001      	b.n	8004ed4 <OPENBL_MEM_RegisterMemory+0x114>
  }
  else
  {
    status = ERROR;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	20000404 	.word	0x20000404
 8004ee4:	20000408 	.word	0x20000408

08004ee8 <OPENBL_MEM_GetAddressArea>:
  * @param  Address The address to be checked.
  * @retval The address area: FLASH_AREA, RAM_AREA... if the address is valid
  *         or AREA_ERROR if the address is not valid.
  */
uint32_t OPENBL_MEM_GetAddressArea(uint32_t Address)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t mem_area = AREA_ERROR;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  uint32_t counter;

  for (counter = 0; counter < NumberOfMemories; counter++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	e023      	b.n	8004f42 <OPENBL_MEM_GetAddressArea+0x5a>
  {
    if ((Address >= a_MemoriesTable[counter].StartAddress) && (Address < a_MemoriesTable[counter].EndAddress))
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <OPENBL_MEM_GetAddressArea+0x70>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	212c      	movs	r1, #44	; 0x2c
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d314      	bcc.n	8004f38 <OPENBL_MEM_GetAddressArea+0x50>
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <OPENBL_MEM_GetAddressArea+0x70>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	212c      	movs	r1, #44	; 0x2c
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d209      	bcs.n	8004f38 <OPENBL_MEM_GetAddressArea+0x50>
    {
      mem_area = a_MemoriesTable[counter].Type;
 8004f24:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <OPENBL_MEM_GetAddressArea+0x70>)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	330c      	adds	r3, #12
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
      break;
 8004f36:	e009      	b.n	8004f4c <OPENBL_MEM_GetAddressArea+0x64>
    }
    else
    {
      mem_area = AREA_ERROR;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  for (counter = 0; counter < NumberOfMemories; counter++)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <OPENBL_MEM_GetAddressArea+0x74>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3d6      	bcc.n	8004efa <OPENBL_MEM_GetAddressArea+0x12>
    }
  }

  return mem_area;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	20000408 	.word	0x20000408
 8004f5c:	20000404 	.word	0x20000404

08004f60 <OPENBL_MEM_GetMemoryIndex>:
  * @brief  This function returns the index of the memory that matches the address given in parameter.
  * @param  Address This address is used determinate the index of the memory pointed by this address.
  * @retval The index of the memory that corresponds to the address
  */
uint32_t OPENBL_MEM_GetMemoryIndex(uint32_t Address)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t counter;

  for (counter = 0; counter < NumberOfMemories; counter++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e017      	b.n	8004f9e <OPENBL_MEM_GetMemoryIndex+0x3e>
  {
    if ((Address >= a_MemoriesTable[counter].StartAddress) && (Address < a_MemoriesTable[counter].EndAddress))
 8004f6e:	4a12      	ldr	r2, [pc, #72]	; (8004fb8 <OPENBL_MEM_GetMemoryIndex+0x58>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d30a      	bcc.n	8004f98 <OPENBL_MEM_GetMemoryIndex+0x38>
 8004f82:	4a0d      	ldr	r2, [pc, #52]	; (8004fb8 <OPENBL_MEM_GetMemoryIndex+0x58>)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3304      	adds	r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d308      	bcc.n	8004faa <OPENBL_MEM_GetMemoryIndex+0x4a>
  for (counter = 0; counter < NumberOfMemories; counter++)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <OPENBL_MEM_GetMemoryIndex+0x5c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d3e2      	bcc.n	8004f6e <OPENBL_MEM_GetMemoryIndex+0xe>
 8004fa8:	e000      	b.n	8004fac <OPENBL_MEM_GetMemoryIndex+0x4c>
    {
      break;
 8004faa:	bf00      	nop
    }
  }

  return counter;
 8004fac:	68fb      	ldr	r3, [r7, #12]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	20000408 	.word	0x20000408
 8004fbc:	20000404 	.word	0x20000404

08004fc0 <OPENBL_MEM_Read>:
  * @param  Address The address that will be read.
  * @param  MemoryIndex The memory index of the memory interface that will be used to read from the given address.
  * @retval Returns the read value.
  */
uint8_t OPENBL_MEM_Read(uint32_t Address, uint32_t MemoryIndex)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint8_t value;

  if (MemoryIndex < NumberOfMemories)
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <OPENBL_MEM_Read+0x58>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d219      	bcs.n	8005008 <OPENBL_MEM_Read+0x48>
  {
    if (a_MemoriesTable[MemoryIndex].Read != NULL)
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <OPENBL_MEM_Read+0x5c>)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	212c      	movs	r1, #44	; 0x2c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	3310      	adds	r3, #16
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00c      	beq.n	8005002 <OPENBL_MEM_Read+0x42>
    {
      value = a_MemoriesTable[MemoryIndex].Read(Address);
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	; (800501c <OPENBL_MEM_Read+0x5c>)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	212c      	movs	r1, #44	; 0x2c
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e004      	b.n	800500c <OPENBL_MEM_Read+0x4c>
    }
    else
    {
      value = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	e001      	b.n	800500c <OPENBL_MEM_Read+0x4c>
    }
  }
  else
  {
    value = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
  }

  return value;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000404 	.word	0x20000404
 800501c:	20000408 	.word	0x20000408

08005020 <OPENBL_MEM_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_MEM_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t index;

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff ff97 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 8005032:	6178      	str	r0, [r7, #20]

  if (index < NumberOfMemories)
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <OPENBL_MEM_Write+0x54>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	429a      	cmp	r2, r3
 800503c:	d215      	bcs.n	800506a <OPENBL_MEM_Write+0x4a>
  {
    if (a_MemoriesTable[index].Write != NULL)
 800503e:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <OPENBL_MEM_Write+0x58>)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	212c      	movs	r1, #44	; 0x2c
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	4413      	add	r3, r2
 800504a:	3314      	adds	r3, #20
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <OPENBL_MEM_Write+0x4a>
    {
      a_MemoriesTable[index].Write(Address, Data, DataLength);
 8005052:	4a09      	ldr	r2, [pc, #36]	; (8005078 <OPENBL_MEM_Write+0x58>)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	212c      	movs	r1, #44	; 0x2c
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	4413      	add	r3, r2
 800505e:	3314      	adds	r3, #20
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	4798      	blx	r3
    }
  }
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000404 	.word	0x20000404
 8005078:	20000408 	.word	0x20000408

0800507c <OPENBL_MEM_SetReadOutProtection>:
  * @param  Address The address where the memory protection will be.
  * @param  State The readout protection state that will be set.
  * @retval None.
  */
void OPENBL_MEM_SetReadOutProtection(uint32_t Address, FunctionalState State)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  uint32_t index;

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff69 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 800508e:	60f8      	str	r0, [r7, #12]

  if (index < NumberOfMemories)
 8005090:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <OPENBL_MEM_SetReadOutProtection+0x6c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	429a      	cmp	r2, r3
 8005098:	d221      	bcs.n	80050de <OPENBL_MEM_SetReadOutProtection+0x62>
  {
    if (a_MemoriesTable[index].SetReadoutProtect != NULL)
 800509a:	4a14      	ldr	r2, [pc, #80]	; (80050ec <OPENBL_MEM_SetReadOutProtection+0x70>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	212c      	movs	r1, #44	; 0x2c
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	3318      	adds	r3, #24
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d017      	beq.n	80050de <OPENBL_MEM_SetReadOutProtection+0x62>
    {
      if (State == ENABLE)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10a      	bne.n	80050ca <OPENBL_MEM_SetReadOutProtection+0x4e>
      {
        a_MemoriesTable[index].SetReadoutProtect(RDP_LEVEL_1);
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <OPENBL_MEM_SetReadOutProtection+0x70>)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3318      	adds	r3, #24
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	20bb      	movs	r0, #187	; 0xbb
 80050c6:	4798      	blx	r3
      {
        a_MemoriesTable[index].SetReadoutProtect(RDP_LEVEL_0);
      }
    }
  }
}
 80050c8:	e009      	b.n	80050de <OPENBL_MEM_SetReadOutProtection+0x62>
        a_MemoriesTable[index].SetReadoutProtect(RDP_LEVEL_0);
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <OPENBL_MEM_SetReadOutProtection+0x70>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	212c      	movs	r1, #44	; 0x2c
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	4413      	add	r3, r2
 80050d6:	3318      	adds	r3, #24
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	20aa      	movs	r0, #170	; 0xaa
 80050dc:	4798      	blx	r3
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000404 	.word	0x20000404
 80050ec:	20000408 	.word	0x20000408

080050f0 <OPENBL_MEM_SetWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
ErrorStatus OPENBL_MEM_SetWriteProtection(FunctionalState State, uint32_t Address, uint8_t *Buffer, uint32_t Length)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4603      	mov	r3, r0
 80050fe:	73fb      	strb	r3, [r7, #15]
  uint32_t index;
  ErrorStatus status = SUCCESS;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 8005104:	68b8      	ldr	r0, [r7, #8]
 8005106:	f7ff ff2b 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 800510a:	6138      	str	r0, [r7, #16]

  if (index < NumberOfMemories)
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <OPENBL_MEM_SetWriteProtection+0x68>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d219      	bcs.n	800514a <OPENBL_MEM_SetWriteProtection+0x5a>
  {
    if (a_MemoriesTable[index].SetWriteProtect != NULL)
 8005116:	4a11      	ldr	r2, [pc, #68]	; (800515c <OPENBL_MEM_SetWriteProtection+0x6c>)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	212c      	movs	r1, #44	; 0x2c
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	4413      	add	r3, r2
 8005122:	331c      	adds	r3, #28
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <OPENBL_MEM_SetWriteProtection+0x54>
    {
      a_MemoriesTable[index].SetWriteProtect(State, Buffer, Length);
 800512a:	4a0c      	ldr	r2, [pc, #48]	; (800515c <OPENBL_MEM_SetWriteProtection+0x6c>)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	212c      	movs	r1, #44	; 0x2c
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	331c      	adds	r3, #28
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	7bf8      	ldrb	r0, [r7, #15]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4798      	blx	r3
 8005142:	e004      	b.n	800514e <OPENBL_MEM_SetWriteProtection+0x5e>
    }
    else
    {
      status = ERROR;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
 8005148:	e001      	b.n	800514e <OPENBL_MEM_SetWriteProtection+0x5e>
    }
  }
  else
  {
    status = ERROR;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000404 	.word	0x20000404
 800515c:	20000408 	.word	0x20000408

08005160 <OPENBL_MEM_JumpToAddress>:
  * @brief  This function is used to jump to an address of an application.
  * @param  Address User application address.
  * @retval None.
  */
void OPENBL_MEM_JumpToAddress(uint32_t Address)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t memory_index;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fef9 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 800516e:	60f8      	str	r0, [r7, #12]

  if (memory_index < NumberOfMemories)
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <OPENBL_MEM_JumpToAddress+0x4c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	429a      	cmp	r2, r3
 8005178:	d213      	bcs.n	80051a2 <OPENBL_MEM_JumpToAddress+0x42>
  {
    if (a_MemoriesTable[memory_index].JumpToAddress != NULL)
 800517a:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <OPENBL_MEM_JumpToAddress+0x50>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	3320      	adds	r3, #32
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <OPENBL_MEM_JumpToAddress+0x42>
    {
      a_MemoriesTable[memory_index].JumpToAddress(Address);
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <OPENBL_MEM_JumpToAddress+0x50>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	3320      	adds	r3, #32
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000404 	.word	0x20000404
 80051b0:	20000408 	.word	0x20000408

080051b4 <OPENBL_MEM_MassErase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Mass erase operation done
  *          - ERROR:   Mass erase operation failed or one parameter is invalid
 */
ErrorStatus OPENBL_MEM_MassErase(uint32_t Address, uint8_t *p_Data, uint32_t DataLength)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t memory_index;
  ErrorStatus status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fecd 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 80051c6:	6138      	str	r0, [r7, #16]

  if (memory_index < NumberOfMemories)
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <OPENBL_MEM_MassErase+0x64>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d21a      	bcs.n	8005208 <OPENBL_MEM_MassErase+0x54>
  {
    if (a_MemoriesTable[memory_index].MassErase != NULL)
 80051d2:	4a12      	ldr	r2, [pc, #72]	; (800521c <OPENBL_MEM_MassErase+0x68>)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	212c      	movs	r1, #44	; 0x2c
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <OPENBL_MEM_MassErase+0x4e>
    {
      status = a_MemoriesTable[memory_index].MassErase(p_Data, DataLength);
 80051e6:	4a0d      	ldr	r2, [pc, #52]	; (800521c <OPENBL_MEM_MassErase+0x68>)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	3324      	adds	r3, #36	; 0x24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	4798      	blx	r3
 80051fc:	4603      	mov	r3, r0
 80051fe:	75fb      	strb	r3, [r7, #23]
 8005200:	e004      	b.n	800520c <OPENBL_MEM_MassErase+0x58>
    }
    else
    {
      status = ERROR;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]
 8005206:	e001      	b.n	800520c <OPENBL_MEM_MassErase+0x58>
    }
  }
  else
  {
    status = ERROR;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000404 	.word	0x20000404
 800521c:	20000408 	.word	0x20000408

08005220 <OPENBL_MEM_Erase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Erase operation done
  *          - ERROR:   Erase operation failed or one parameter is invalid
 */
ErrorStatus OPENBL_MEM_Erase(uint32_t Address, uint8_t *p_Data, uint32_t DataLength)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t memory_index;
  ErrorStatus status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fe97 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 8005232:	6138      	str	r0, [r7, #16]

  if (memory_index < NumberOfMemories)
 8005234:	4b13      	ldr	r3, [pc, #76]	; (8005284 <OPENBL_MEM_Erase+0x64>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	d21a      	bcs.n	8005274 <OPENBL_MEM_Erase+0x54>
  {
    if (a_MemoriesTable[memory_index].Erase != NULL)
 800523e:	4a12      	ldr	r2, [pc, #72]	; (8005288 <OPENBL_MEM_Erase+0x68>)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	212c      	movs	r1, #44	; 0x2c
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	3328      	adds	r3, #40	; 0x28
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <OPENBL_MEM_Erase+0x4e>
    {
      status = a_MemoriesTable[memory_index].Erase(p_Data, DataLength);
 8005252:	4a0d      	ldr	r2, [pc, #52]	; (8005288 <OPENBL_MEM_Erase+0x68>)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	3328      	adds	r3, #40	; 0x28
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	68b8      	ldr	r0, [r7, #8]
 8005266:	4798      	blx	r3
 8005268:	4603      	mov	r3, r0
 800526a:	75fb      	strb	r3, [r7, #23]
 800526c:	e004      	b.n	8005278 <OPENBL_MEM_Erase+0x58>
    }
    else
    {
      status = ERROR;
 800526e:	2300      	movs	r3, #0
 8005270:	75fb      	strb	r3, [r7, #23]
 8005272:	e001      	b.n	8005278 <OPENBL_MEM_Erase+0x58>
    }
  }
  else
  {
    status = ERROR;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000404 	.word	0x20000404
 8005288:	20000408 	.word	0x20000408

0800528c <OPENBL_MEM_CheckJumpAddress>:
  * @brief  Check if a given address is valid and can be used for jump operation
  * @param  Address The address to be checked.
  * @retval Returns 1 if the address is valid else returns 0.
  */
uint8_t OPENBL_MEM_CheckJumpAddress(uint32_t Address)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t memory_index;
  uint8_t status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fe63 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 800529a:	60b8      	str	r0, [r7, #8]

  if (a_MemoriesTable[memory_index].JumpToAddress != NULL)
 800529c:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <OPENBL_MEM_CheckJumpAddress+0x38>)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	212c      	movs	r1, #44	; 0x2c
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	3320      	adds	r3, #32
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <OPENBL_MEM_CheckJumpAddress+0x2a>
  {
    status = 1;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e001      	b.n	80052ba <OPENBL_MEM_CheckJumpAddress+0x2e>
  }
  else
  {
    status = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000408 	.word	0x20000408

080052c8 <OPENBL_SPI_GetCommandsList>:
/**
  * @brief  This function is used to get a pointer to the structure that contains the available SPI commands.
  * @return Returns a pointer to the OPENBL_SPI_Commands struct.
  */
OPENBL_CommandsTypeDef *OPENBL_SPI_GetCommandsList(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
    NULL,
    OPENBL_SPI_SpecialCommand,
    OPENBL_SPI_ExtendedSpecialCommand
  };

  OPENBL_SPI_SetCommandsList(&OPENBL_SPI_Commands);
 80052cc:	4802      	ldr	r0, [pc, #8]	; (80052d8 <OPENBL_SPI_GetCommandsList+0x10>)
 80052ce:	f000 f805 	bl	80052dc <OPENBL_SPI_SetCommandsList>

  return (&OPENBL_SPI_Commands);
 80052d2:	4b01      	ldr	r3, [pc, #4]	; (80052d8 <OPENBL_SPI_GetCommandsList+0x10>)
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000158 	.word	0x20000158

080052dc <OPENBL_SPI_SetCommandsList>:
/**
  * @brief  This function is used to set a pointer to the structure that contains the available SPI commands.
  * @return Returns a pointer to the OPENBL_SPI_Commands struct.
  */
void OPENBL_SPI_SetCommandsList(OPENBL_CommandsTypeDef *pSpiCmd)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Get the list of commands supported & their numbers */
  SpiCommandsNumber = OPENBL_SPI_ConstructCommandsTable(pSpiCmd);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fc77 	bl	8005bd8 <OPENBL_SPI_ConstructCommandsTable>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461a      	mov	r2, r3
 80052ee:	4b03      	ldr	r3, [pc, #12]	; (80052fc <OPENBL_SPI_SetCommandsList+0x20>)
 80052f0:	701a      	strb	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200009a9 	.word	0x200009a9

08005300 <OPENBL_SPI_GetCommand>:
/**
  * @brief  This function is used to get the list of the available SPI commands
  * @retval None.
  */
void OPENBL_SPI_GetCommand(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  uint32_t counter;

  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005306:	2079      	movs	r0, #121	; 0x79
 8005308:	f7fb fe14 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  /* Send the number of commands supported by the SPI protocol */
  OPENBL_SPI_SendByte(SpiCommandsNumber);
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <OPENBL_SPI_GetCommand+0x50>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fb09 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  /* Send SPI protocol version */
  OPENBL_SPI_SendByte(OPENBL_SPI_VERSION);
 8005316:	2011      	movs	r0, #17
 8005318:	f001 fb06 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  /* Send the list of supported commands */
  for (counter = 0U; counter < SpiCommandsNumber; counter++)
 800531c:	2300      	movs	r3, #0
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	e009      	b.n	8005336 <OPENBL_SPI_GetCommand+0x36>
  {
    OPENBL_SPI_SendByte(a_OPENBL_SPI_CommandsList[counter]);
 8005322:	4a0c      	ldr	r2, [pc, #48]	; (8005354 <OPENBL_SPI_GetCommand+0x54>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fafc 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
  for (counter = 0U; counter < SpiCommandsNumber; counter++)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <OPENBL_SPI_GetCommand+0x50>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4293      	cmp	r3, r2
 8005340:	d3ef      	bcc.n	8005322 <OPENBL_SPI_GetCommand+0x22>
  }

  /* Send last Acknowledge synchronization byte */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005342:	2079      	movs	r0, #121	; 0x79
 8005344:	f7fb fdf6 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	200009a9 	.word	0x200009a9
 8005354:	2000099c 	.word	0x2000099c

08005358 <OPENBL_SPI_GetVersion>:
/**
  * @brief  This function is used to get the SPI protocol version.
  * @retval None.
  */
void OPENBL_SPI_GetVersion(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800535c:	2079      	movs	r0, #121	; 0x79
 800535e:	f7fb fde9 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  /* Send SPI protocol version */
  OPENBL_SPI_SendByte(OPENBL_SPI_VERSION);
 8005362:	2011      	movs	r0, #17
 8005364:	f001 fae0 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  /* Send last Acknowledge synchronization byte */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005368:	2079      	movs	r0, #121	; 0x79
 800536a:	f7fb fde3 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}

08005372 <OPENBL_SPI_GetID>:
/**
  * @brief  This function is used to get the device ID.
  * @retval None.
  */
void OPENBL_SPI_GetID(void)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005376:	2079      	movs	r0, #121	; 0x79
 8005378:	f7fb fddc 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  OPENBL_SPI_SendByte(0x01);
 800537c:	2001      	movs	r0, #1
 800537e:	f001 fad3 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  /* Send the device ID starting by the MSB byte then the LSB byte */
  OPENBL_SPI_SendByte(DEVICE_ID_MSB);
 8005382:	2004      	movs	r0, #4
 8005384:	f001 fad0 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
  OPENBL_SPI_SendByte(DEVICE_ID_LSB);
 8005388:	2097      	movs	r0, #151	; 0x97
 800538a:	f001 facd 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>

  /* Send last Acknowledge synchronization byte */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800538e:	2079      	movs	r0, #121	; 0x79
 8005390:	f7fb fdd0 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005394:	bf00      	nop
 8005396:	bd80      	pop	{r7, pc}

08005398 <OPENBL_SPI_ReadMemory>:
/**
 * @brief  This function is used to read memory from the device.
 * @retval None.
 */
void OPENBL_SPI_ReadMemory(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
  uint32_t memory_index;
  uint8_t data;
  uint8_t xor;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 800539e:	f7fb f826 	bl	80003ee <Common_GetProtectionStatus>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <OPENBL_SPI_ReadMemory+0x18>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80053a8:	201f      	movs	r0, #31
 80053aa:	f7fb fdc3 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
          address++;
        }
      }
    }
  }
}
 80053ae:	e040      	b.n	8005432 <OPENBL_SPI_ReadMemory+0x9a>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80053b0:	2079      	movs	r0, #121	; 0x79
 80053b2:	f7fb fdbf 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    if (OPENBL_SPI_GetAddress(&address) == NACK_BYTE)
 80053b6:	463b      	mov	r3, r7
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fa73 	bl	80058a4 <OPENBL_SPI_GetAddress>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b1f      	cmp	r3, #31
 80053c2:	d103      	bne.n	80053cc <OPENBL_SPI_ReadMemory+0x34>
      OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80053c4:	201f      	movs	r0, #31
 80053c6:	f7fb fdb5 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 80053ca:	e032      	b.n	8005432 <OPENBL_SPI_ReadMemory+0x9a>
      OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80053cc:	2079      	movs	r0, #121	; 0x79
 80053ce:	f7fb fdb1 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
      data = OPENBL_SPI_ReadByte();
 80053d2:	f001 faad 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80053d6:	4603      	mov	r3, r0
 80053d8:	72fb      	strb	r3, [r7, #11]
      xor  = ~data;
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	43db      	mvns	r3, r3
 80053de:	72bb      	strb	r3, [r7, #10]
      if (OPENBL_SPI_ReadByte() != xor)
 80053e0:	f001 faa6 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	7abb      	ldrb	r3, [r7, #10]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <OPENBL_SPI_ReadMemory+0x5e>
        OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80053ee:	201f      	movs	r0, #31
 80053f0:	f7fb fda0 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 80053f4:	e01d      	b.n	8005432 <OPENBL_SPI_ReadMemory+0x9a>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80053f6:	2079      	movs	r0, #121	; 0x79
 80053f8:	f7fb fd9c 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        memory_index = OPENBL_MEM_GetMemoryIndex(address);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fdae 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 8005404:	6078      	str	r0, [r7, #4]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e00e      	b.n	800542c <OPENBL_SPI_ReadMemory+0x94>
          OPENBL_SPI_SendByte(OPENBL_MEM_Read(address, memory_index));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fdd4 	bl	8004fc0 <OPENBL_MEM_Read>
 8005418:	4603      	mov	r3, r0
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fa84 	bl	8006928 <__OPENBL_SPI_SendByte_veneer>
          address++;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	603b      	str	r3, [r7, #0]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b01      	subs	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1ed      	bne.n	800540e <OPENBL_SPI_ReadMemory+0x76>
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <OPENBL_SPI_WriteMemory>:
/**
 * @brief  This function is used to write in to device memory.
 * @retval None.
 */
void OPENBL_SPI_WriteMemory(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
  uint32_t codesize;
  uint8_t *ramaddress;
  uint8_t data;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8005442:	f7fa ffd4 	bl	80003ee <Common_GetProtectionStatus>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <OPENBL_SPI_WriteMemory+0x18>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 800544c:	201f      	movs	r0, #31
 800544e:	f7fb fd71 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        /* Launch Option Bytes reload */
        Common_StartPostProcessing();
      }
    }
  }
}
 8005452:	e048      	b.n	80054e6 <OPENBL_SPI_WriteMemory+0xaa>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005454:	2079      	movs	r0, #121	; 0x79
 8005456:	f7fb fd6d 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    if (OPENBL_SPI_GetAddress(&address) == NACK_BYTE)
 800545a:	463b      	mov	r3, r7
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fa21 	bl	80058a4 <OPENBL_SPI_GetAddress>
 8005462:	4603      	mov	r3, r0
 8005464:	2b1f      	cmp	r3, #31
 8005466:	d103      	bne.n	8005470 <OPENBL_SPI_WriteMemory+0x34>
      OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005468:	201f      	movs	r0, #31
 800546a:	f7fb fd63 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 800546e:	e03a      	b.n	80054e6 <OPENBL_SPI_WriteMemory+0xaa>
      OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005470:	2079      	movs	r0, #121	; 0x79
 8005472:	f7fb fd5f 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
      ramaddress = (uint8_t *)SPI_RAM_Buf;
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <OPENBL_SPI_WriteMemory+0xb4>)
 8005478:	60fb      	str	r3, [r7, #12]
      data = OPENBL_SPI_ReadByte();
 800547a:	f001 fa59 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 800547e:	4603      	mov	r3, r0
 8005480:	72fb      	strb	r3, [r7, #11]
      codesize = (uint32_t)data + 1U;
 8005482:	7afb      	ldrb	r3, [r7, #11]
 8005484:	3301      	adds	r3, #1
 8005486:	607b      	str	r3, [r7, #4]
      xor = data;
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	617b      	str	r3, [r7, #20]
      for (counter = codesize; counter != 0U ; counter--)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	e010      	b.n	80054b4 <OPENBL_SPI_WriteMemory+0x78>
        data  = OPENBL_SPI_ReadByte();
 8005492:	f001 fa4d 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005496:	4603      	mov	r3, r0
 8005498:	72fb      	strb	r3, [r7, #11]
        xor  ^= data;
 800549a:	7afb      	ldrb	r3, [r7, #11]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4053      	eors	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
        *(__IO uint8_t *)(ramaddress) = data;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	7afa      	ldrb	r2, [r7, #11]
 80054a6:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
      for (counter = codesize; counter != 0U ; counter--)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1eb      	bne.n	8005492 <OPENBL_SPI_WriteMemory+0x56>
      if (OPENBL_SPI_ReadByte() != xor)
 80054ba:	f001 fa39 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <OPENBL_SPI_WriteMemory+0x94>
        OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80054c8:	201f      	movs	r0, #31
 80054ca:	f7fb fd33 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 80054ce:	e00a      	b.n	80054e6 <OPENBL_SPI_WriteMemory+0xaa>
        OPENBL_MEM_Write(address, (uint8_t *)SPI_RAM_Buf, codesize);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4906      	ldr	r1, [pc, #24]	; (80054f0 <OPENBL_SPI_WriteMemory+0xb4>)
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fda2 	bl	8005020 <OPENBL_MEM_Write>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80054dc:	2079      	movs	r0, #121	; 0x79
 80054de:	f7fb fd29 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        Common_StartPostProcessing();
 80054e2:	f7fa ffa5 	bl	8000430 <Common_StartPostProcessing>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000510 	.word	0x20000510

080054f4 <OPENBL_SPI_Go>:
/**
  * @brief  This function is used to jump to the user application.
  * @retval None.
  */
void OPENBL_SPI_Go(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
  uint32_t address;
  uint8_t status;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 80054fa:	f7fa ff78 	bl	80003ee <Common_GetProtectionStatus>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <OPENBL_SPI_Go+0x18>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005504:	201f      	movs	r0, #31
 8005506:	f7fb fd15 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

        OPENBL_MEM_JumpToAddress(address);
      }
    }
  }
}
 800550a:	e021      	b.n	8005550 <OPENBL_SPI_Go+0x5c>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800550c:	2079      	movs	r0, #121	; 0x79
 800550e:	f7fb fd11 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    if (OPENBL_SPI_GetAddress(&address) == NACK_BYTE)
 8005512:	463b      	mov	r3, r7
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f9c5 	bl	80058a4 <OPENBL_SPI_GetAddress>
 800551a:	4603      	mov	r3, r0
 800551c:	2b1f      	cmp	r3, #31
 800551e:	d103      	bne.n	8005528 <OPENBL_SPI_Go+0x34>
      OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005520:	201f      	movs	r0, #31
 8005522:	f7fb fd07 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005526:	e013      	b.n	8005550 <OPENBL_SPI_Go+0x5c>
      status = OPENBL_MEM_CheckJumpAddress(address);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff feae 	bl	800528c <OPENBL_MEM_CheckJumpAddress>
 8005530:	4603      	mov	r3, r0
 8005532:	71fb      	strb	r3, [r7, #7]
      if (status == 0U)
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <OPENBL_SPI_Go+0x4e>
        OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 800553a:	201f      	movs	r0, #31
 800553c:	f7fb fcfa 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005540:	e006      	b.n	8005550 <OPENBL_SPI_Go+0x5c>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005542:	2079      	movs	r0, #121	; 0x79
 8005544:	f7fb fcf6 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        OPENBL_MEM_JumpToAddress(address);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff fe08 	bl	8005160 <OPENBL_MEM_JumpToAddress>
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <OPENBL_SPI_ReadoutProtect>:
/**
 * @brief  This function is used to enable readout protection.
 * @retval None.
 */
void OPENBL_SPI_ReadoutProtect(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 800555c:	f7fa ff47 	bl	80003ee <Common_GetProtectionStatus>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <OPENBL_SPI_ReadoutProtect+0x16>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005566:	201f      	movs	r0, #31
 8005568:	f7fb fce4 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);

    /* Launch Option Bytes reload */
    Common_StartPostProcessing();
  }
}
 800556c:	e00c      	b.n	8005588 <OPENBL_SPI_ReadoutProtect+0x30>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800556e:	2079      	movs	r0, #121	; 0x79
 8005570:	f7fb fce0 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, ENABLE);
 8005574:	2101      	movs	r1, #1
 8005576:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800557a:	f7ff fd7f 	bl	800507c <OPENBL_MEM_SetReadOutProtection>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800557e:	2079      	movs	r0, #121	; 0x79
 8005580:	f7fb fcd8 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    Common_StartPostProcessing();
 8005584:	f7fa ff54 	bl	8000430 <Common_StartPostProcessing>
}
 8005588:	bf00      	nop
 800558a:	bd80      	pop	{r7, pc}

0800558c <OPENBL_SPI_ReadoutUnprotect>:
 *         so the send of the second acknowledge after disabling the read protection
 *         is not possible, this is why the two ACKs are sent successively
 * @retval None.
 */
void OPENBL_SPI_ReadoutUnprotect(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005590:	2079      	movs	r0, #121	; 0x79
 8005592:	f7fb fccf 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005596:	2079      	movs	r0, #121	; 0x79
 8005598:	f7fb fccc 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, DISABLE);
 800559c:	2100      	movs	r1, #0
 800559e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80055a2:	f7ff fd6b 	bl	800507c <OPENBL_MEM_SetReadOutProtection>

  /* Launch Option Bytes reload and reset system */
  Common_StartPostProcessing();
 80055a6:	f7fa ff43 	bl	8000430 <Common_StartPostProcessing>
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <OPENBL_SPI_EraseMemory>:
/**
 * @brief  This function is used to erase a memory.
 * @retval None.
 */
void OPENBL_SPI_EraseMemory(void)
{
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
  uint32_t xor;
  uint32_t counter;
  uint32_t numpage;
  uint16_t data;
  ErrorStatus error_value;
  uint8_t status = ACK_BYTE;
 80055b6:	2379      	movs	r3, #121	; 0x79
 80055b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *ramaddress;

  ramaddress = (uint8_t *) SPI_RAM_Buf;
 80055ba:	4b74      	ldr	r3, [pc, #464]	; (800578c <OPENBL_SPI_EraseMemory+0x1dc>)
 80055bc:	613b      	str	r3, [r7, #16]

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 80055be:	f7fa ff16 	bl	80003ee <Common_GetProtectionStatus>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <OPENBL_SPI_EraseMemory+0x20>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80055c8:	201f      	movs	r0, #31
 80055ca:	f7fb fcb3 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
      }
    }

    OPENBL_SPI_SendAcknowledgeByte(status);
  }
}
 80055ce:	e0d8      	b.n	8005782 <OPENBL_SPI_EraseMemory+0x1d2>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80055d0:	2079      	movs	r0, #121	; 0x79
 80055d2:	f7fb fcaf 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    data = OPENBL_SPI_ReadByte();
 80055d6:	f001 f9ab 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80055da:	4603      	mov	r3, r0
 80055dc:	81fb      	strh	r3, [r7, #14]
    data = (uint16_t)(data << 8) | OPENBL_SPI_ReadByte();
 80055de:	89fb      	ldrh	r3, [r7, #14]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	b29c      	uxth	r4, r3
 80055e4:	f001 f9a4 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80055e8:	4603      	mov	r3, r0
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4323      	orrs	r3, r4
 80055ee:	81fb      	strh	r3, [r7, #14]
    xor  = ((uint32_t)data & 0xFF00U) >> 8;
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	61fb      	str	r3, [r7, #28]
    xor ^= (uint32_t)data & 0x00FFU;
 80055f8:	89fb      	ldrh	r3, [r7, #14]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	4053      	eors	r3, r2
 8005600:	61fb      	str	r3, [r7, #28]
    if ((data & 0xFFF0U) == 0xFFF0U)
 8005602:	89fa      	ldrh	r2, [r7, #14]
 8005604:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005608:	4013      	ands	r3, r2
 800560a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800560e:	4293      	cmp	r3, r2
 8005610:	d13d      	bne.n	800568e <OPENBL_SPI_EraseMemory+0xde>
      if (OPENBL_SPI_ReadByte() != (uint8_t) xor)
 8005612:	f001 f98d 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	429a      	cmp	r2, r3
 8005620:	d002      	beq.n	8005628 <OPENBL_SPI_EraseMemory+0x78>
        status = NACK_BYTE;
 8005622:	231f      	movs	r3, #31
 8005624:	75fb      	strb	r3, [r7, #23]
 8005626:	e0a8      	b.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
        if ((data == 0xFFFFU) || (data == 0xFFFEU) || (data == 0xFFFDU))
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <OPENBL_SPI_EraseMemory+0x96>
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <OPENBL_SPI_EraseMemory+0x96>
 800563c:	89fb      	ldrh	r3, [r7, #14]
 800563e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8005642:	4293      	cmp	r3, r2
 8005644:	d120      	bne.n	8005688 <OPENBL_SPI_EraseMemory+0xd8>
          ramaddress[0] = (uint8_t)(data & 0x00FFU);
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	701a      	strb	r2, [r3, #0]
          ramaddress[1] = (uint8_t)((data & 0xFF00U) >> 8);
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	b29a      	uxth	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3301      	adds	r3, #1
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]
          OPENBL_SPI_EnableBusyState();
 800565c:	f7fb fc84 	bl	8000f68 <OPENBL_SPI_EnableBusyState>
          error_value = OPENBL_MEM_MassErase(OPENBL_DEFAULT_MEM, (uint8_t *) SPI_RAM_Buf, SPI_RAM_BUFFER_SIZE);
 8005660:	f240 428c 	movw	r2, #1164	; 0x48c
 8005664:	4949      	ldr	r1, [pc, #292]	; (800578c <OPENBL_SPI_EraseMemory+0x1dc>)
 8005666:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800566a:	f7ff fda3 	bl	80051b4 <OPENBL_MEM_MassErase>
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
          OPENBL_SPI_DisableBusyState();
 8005672:	f7fb fc85 	bl	8000f80 <OPENBL_SPI_DisableBusyState>
          if (error_value == SUCCESS)
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <OPENBL_SPI_EraseMemory+0xd2>
            status = ACK_BYTE;
 800567c:	2379      	movs	r3, #121	; 0x79
 800567e:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 8005680:	e07b      	b.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
            status = NACK_BYTE;
 8005682:	231f      	movs	r3, #31
 8005684:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 8005686:	e078      	b.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
          status = NACK_BYTE;
 8005688:	231f      	movs	r3, #31
 800568a:	75fb      	strb	r3, [r7, #23]
 800568c:	e075      	b.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
      if (OPENBL_SPI_ReadByte() != (uint8_t) xor)
 800568e:	f001 f94f 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	429a      	cmp	r2, r3
 800569c:	d002      	beq.n	80056a4 <OPENBL_SPI_EraseMemory+0xf4>
        status = NACK_BYTE;
 800569e:	231f      	movs	r3, #31
 80056a0:	75fb      	strb	r3, [r7, #23]
 80056a2:	e06a      	b.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80056a4:	2079      	movs	r0, #121	; 0x79
 80056a6:	f7fb fc45 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        ramaddress = (uint8_t *) SPI_RAM_Buf;
 80056aa:	4b38      	ldr	r3, [pc, #224]	; (800578c <OPENBL_SPI_EraseMemory+0x1dc>)
 80056ac:	613b      	str	r3, [r7, #16]
        numpage = (uint32_t)data + 1U;
 80056ae:	89fb      	ldrh	r3, [r7, #14]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
        *ramaddress = (uint8_t)(numpage & 0x00FFU);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3301      	adds	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
        *ramaddress = (uint8_t)((numpage & 0xFF00U) >> 8);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	3301      	adds	r3, #1
 80056d0:	613b      	str	r3, [r7, #16]
        xor = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
        for (counter = numpage; counter != 0U ; counter--)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e02e      	b.n	800573a <OPENBL_SPI_EraseMemory+0x18a>
          data  = OPENBL_SPI_ReadByte();
 80056dc:	f001 f928 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80056e0:	4603      	mov	r3, r0
 80056e2:	81fb      	strh	r3, [r7, #14]
          xor  ^= data;
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	4053      	eors	r3, r2
 80056ea:	61fb      	str	r3, [r7, #28]
          data  = (uint16_t)((data & 0x00FFU) << 8);
 80056ec:	89fb      	ldrh	r3, [r7, #14]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	81fb      	strh	r3, [r7, #14]
          data |= (uint8_t)(OPENBL_SPI_ReadByte() & 0x00FFU);
 80056f2:	f001 f91d 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80056f6:	4603      	mov	r3, r0
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	89fb      	ldrh	r3, [r7, #14]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	81fb      	strh	r3, [r7, #14]
          xor  ^= ((uint32_t)data & 0x00FFU);
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	4053      	eors	r3, r2
 8005708:	61fb      	str	r3, [r7, #28]
          if (counter < (SPI_RAM_BUFFER_SIZE / 2U))
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f240 2245 	movw	r2, #581	; 0x245
 8005710:	4293      	cmp	r3, r2
 8005712:	d80f      	bhi.n	8005734 <OPENBL_SPI_EraseMemory+0x184>
            *ramaddress = (uint8_t)(data & 0x00FFU);
 8005714:	89fb      	ldrh	r3, [r7, #14]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	701a      	strb	r2, [r3, #0]
            ramaddress++;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3301      	adds	r3, #1
 8005720:	613b      	str	r3, [r7, #16]
            *ramaddress = (uint8_t)((data & 0xFF00U) >> 8);
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	0a1b      	lsrs	r3, r3, #8
 8005726:	b29b      	uxth	r3, r3
 8005728:	b2da      	uxtb	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	701a      	strb	r2, [r3, #0]
            ramaddress++;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3301      	adds	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
        for (counter = numpage; counter != 0U ; counter--)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	3b01      	subs	r3, #1
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1cd      	bne.n	80056dc <OPENBL_SPI_EraseMemory+0x12c>
        if (OPENBL_SPI_ReadByte() != (uint8_t) xor)
 8005740:	f001 f8f6 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	429a      	cmp	r2, r3
 800574e:	d002      	beq.n	8005756 <OPENBL_SPI_EraseMemory+0x1a6>
          status = NACK_BYTE;
 8005750:	231f      	movs	r3, #31
 8005752:	75fb      	strb	r3, [r7, #23]
 8005754:	e011      	b.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
          OPENBL_SPI_EnableBusyState();
 8005756:	f7fb fc07 	bl	8000f68 <OPENBL_SPI_EnableBusyState>
          error_value = OPENBL_MEM_Erase(OPENBL_DEFAULT_MEM, (uint8_t *) SPI_RAM_Buf, SPI_RAM_BUFFER_SIZE);
 800575a:	f240 428c 	movw	r2, #1164	; 0x48c
 800575e:	490b      	ldr	r1, [pc, #44]	; (800578c <OPENBL_SPI_EraseMemory+0x1dc>)
 8005760:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005764:	f7ff fd5c 	bl	8005220 <OPENBL_MEM_Erase>
 8005768:	4603      	mov	r3, r0
 800576a:	71fb      	strb	r3, [r7, #7]
          OPENBL_SPI_DisableBusyState();
 800576c:	f7fb fc08 	bl	8000f80 <OPENBL_SPI_DisableBusyState>
          if (error_value == SUCCESS)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <OPENBL_SPI_EraseMemory+0x1ca>
            status = ACK_BYTE;
 8005776:	2379      	movs	r3, #121	; 0x79
 8005778:	75fb      	strb	r3, [r7, #23]
    OPENBL_SPI_SendAcknowledgeByte(status);
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb fbd9 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005782:	bf00      	nop
 8005784:	3724      	adds	r7, #36	; 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	20000510 	.word	0x20000510

08005790 <OPENBL_SPI_WriteProtect>:
/**
 * @brief  This function is used to enable write protect.
 * @retval None.
 */
void OPENBL_SPI_WriteProtect(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
  uint8_t xor;
  ErrorStatus error_value;
  uint8_t *ramaddress;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 8005796:	f7fa fe2a 	bl	80003ee <Common_GetProtectionStatus>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <OPENBL_SPI_WriteProtect+0x18>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80057a0:	201f      	movs	r0, #31
 80057a2:	f7fb fbc7 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
          Common_StartPostProcessing();
        }
      }
    }
  }
}
 80057a6:	e053      	b.n	8005850 <OPENBL_SPI_WriteProtect+0xc0>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80057a8:	2079      	movs	r0, #121	; 0x79
 80057aa:	f7fb fbc3 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    data = OPENBL_SPI_ReadByte();
 80057ae:	f001 f8bf 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
    xor  = ~data;
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	73bb      	strb	r3, [r7, #14]
    if (OPENBL_SPI_ReadByte() != xor)
 80057bc:	f001 f8b8 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80057c0:	4603      	mov	r3, r0
 80057c2:	461a      	mov	r2, r3
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <OPENBL_SPI_WriteProtect+0x42>
      OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80057ca:	201f      	movs	r0, #31
 80057cc:	f7fb fbb2 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 80057d0:	e03e      	b.n	8005850 <OPENBL_SPI_WriteProtect+0xc0>
      OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 80057d2:	2079      	movs	r0, #121	; 0x79
 80057d4:	f7fb fbae 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
      ramaddress = (uint8_t *) SPI_RAM_Buf;
 80057d8:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <OPENBL_SPI_WriteProtect+0xc8>)
 80057da:	60bb      	str	r3, [r7, #8]
      length     = data + 1U;
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	3301      	adds	r3, #1
 80057e0:	71bb      	strb	r3, [r7, #6]
      xor = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73bb      	strb	r3, [r7, #14]
      for (counter = (length); counter != 0U ; counter--)
 80057e6:	79bb      	ldrb	r3, [r7, #6]
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	e010      	b.n	800580e <OPENBL_SPI_WriteProtect+0x7e>
        data  = OPENBL_SPI_ReadByte();
 80057ec:	f001 f8a0 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80057f0:	4603      	mov	r3, r0
 80057f2:	71fb      	strb	r3, [r7, #7]
        xor  ^= data;
 80057f4:	7bba      	ldrb	r2, [r7, #14]
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	4053      	eors	r3, r2
 80057fa:	73bb      	strb	r3, [r7, #14]
        *(__IO uint8_t *)(ramaddress) = (uint8_t) data;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	79fa      	ldrb	r2, [r7, #7]
 8005800:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3301      	adds	r3, #1
 8005806:	60bb      	str	r3, [r7, #8]
      for (counter = (length); counter != 0U ; counter--)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	3b01      	subs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1eb      	bne.n	80057ec <OPENBL_SPI_WriteProtect+0x5c>
      if (OPENBL_SPI_ReadByte() != (uint8_t) xor)
 8005814:	f001 f88c 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	7bbb      	ldrb	r3, [r7, #14]
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <OPENBL_SPI_WriteProtect+0x9a>
        OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005822:	201f      	movs	r0, #31
 8005824:	f7fb fb86 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005828:	e012      	b.n	8005850 <OPENBL_SPI_WriteProtect+0xc0>
        ramaddress = (uint8_t *) SPI_RAM_Buf;
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <OPENBL_SPI_WriteProtect+0xc8>)
 800582c:	60bb      	str	r3, [r7, #8]
        error_value = OPENBL_MEM_SetWriteProtection(ENABLE, OPENBL_DEFAULT_MEM, ramaddress, length);
 800582e:	79bb      	ldrb	r3, [r7, #6]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005836:	2001      	movs	r0, #1
 8005838:	f7ff fc5a 	bl	80050f0 <OPENBL_MEM_SetWriteProtection>
 800583c:	4603      	mov	r3, r0
 800583e:	717b      	strb	r3, [r7, #5]
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005840:	2079      	movs	r0, #121	; 0x79
 8005842:	f7fb fb77 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        if (error_value == SUCCESS)
 8005846:	797b      	ldrb	r3, [r7, #5]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <OPENBL_SPI_WriteProtect+0xc0>
          Common_StartPostProcessing();
 800584c:	f7fa fdf0 	bl	8000430 <Common_StartPostProcessing>
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000510 	.word	0x20000510

0800585c <OPENBL_SPI_WriteUnprotect>:
/**
 * @brief  This function is used to disable write protect.
 * @retval None.
 */
void OPENBL_SPI_WriteUnprotect(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 8005862:	f7fa fdc4 	bl	80003ee <Common_GetProtectionStatus>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <OPENBL_SPI_WriteUnprotect+0x18>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 800586c:	201f      	movs	r0, #31
 800586e:	f7fb fb61 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    if (error_value == SUCCESS)
    {
      Common_StartPostProcessing();
    }
  }
}
 8005872:	e013      	b.n	800589c <OPENBL_SPI_WriteUnprotect+0x40>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005874:	2079      	movs	r0, #121	; 0x79
 8005876:	f7fb fb5d 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, OPENBL_DEFAULT_MEM, NULL, 0);
 800587a:	2300      	movs	r3, #0
 800587c:	2200      	movs	r2, #0
 800587e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005882:	2000      	movs	r0, #0
 8005884:	f7ff fc34 	bl	80050f0 <OPENBL_MEM_SetWriteProtection>
 8005888:	4603      	mov	r3, r0
 800588a:	71fb      	strb	r3, [r7, #7]
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800588c:	2079      	movs	r0, #121	; 0x79
 800588e:	f7fb fb51 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    if (error_value == SUCCESS)
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <OPENBL_SPI_WriteUnprotect+0x40>
      Common_StartPostProcessing();
 8005898:	f7fa fdca 	bl	8000430 <Common_StartPostProcessing>
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <OPENBL_SPI_GetAddress>:
/**
 * @brief  This function is used to get a valid address.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
uint8_t OPENBL_SPI_GetAddress(uint32_t *Address)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]
  uint8_t status;
  uint8_t xor;

  data[3] = OPENBL_SPI_ReadByte();
 80058b0:	f001 f83e 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80058b4:	4603      	mov	r3, r0
 80058b6:	72fb      	strb	r3, [r7, #11]
  data[2] = OPENBL_SPI_ReadByte();
 80058b8:	f001 f83a 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80058bc:	4603      	mov	r3, r0
 80058be:	72bb      	strb	r3, [r7, #10]
  data[1] = OPENBL_SPI_ReadByte();
 80058c0:	f001 f836 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80058c4:	4603      	mov	r3, r0
 80058c6:	727b      	strb	r3, [r7, #9]
  data[0] = OPENBL_SPI_ReadByte();
 80058c8:	f001 f832 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80058cc:	4603      	mov	r3, r0
 80058ce:	723b      	strb	r3, [r7, #8]

  xor = data[3] ^ data[2] ^ data[1] ^ data[0];
 80058d0:	7afa      	ldrb	r2, [r7, #11]
 80058d2:	7abb      	ldrb	r3, [r7, #10]
 80058d4:	4053      	eors	r3, r2
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	7a7b      	ldrb	r3, [r7, #9]
 80058da:	4053      	eors	r3, r2
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	7a3b      	ldrb	r3, [r7, #8]
 80058e0:	4053      	eors	r3, r2
 80058e2:	73bb      	strb	r3, [r7, #14]

  /* Check the integrity of received data */
  if (OPENBL_SPI_ReadByte() != xor)
 80058e4:	f001 f824 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d002      	beq.n	80058f8 <OPENBL_SPI_GetAddress+0x54>
  {
    status = NACK_BYTE;
 80058f2:	231f      	movs	r3, #31
 80058f4:	73fb      	strb	r3, [r7, #15]
 80058f6:	e018      	b.n	800592a <OPENBL_SPI_GetAddress+0x86>
  }
  else
  {

    *Address = ((uint32_t)data[3] << 24) | ((uint32_t)data[2] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[0];
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	061a      	lsls	r2, r3, #24
 80058fc:	7abb      	ldrb	r3, [r7, #10]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	7a7b      	ldrb	r3, [r7, #9]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	4313      	orrs	r3, r2
 8005908:	7a3a      	ldrb	r2, [r7, #8]
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]

    /* Check if received address is valid or not */
    if (OPENBL_MEM_GetAddressArea(*Address) == AREA_ERROR)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fae7 	bl	8004ee8 <OPENBL_MEM_GetAddressArea>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <OPENBL_SPI_GetAddress+0x82>
    {
      status = NACK_BYTE;
 8005920:	231f      	movs	r3, #31
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	e001      	b.n	800592a <OPENBL_SPI_GetAddress+0x86>
    }
    else
    {
      status = ACK_BYTE;
 8005926:	2379      	movs	r3, #121	; 0x79
 8005928:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <OPENBL_SPI_SpecialCommand>:
/**
 * @brief  This function is used to execute special read commands.
 * @retval None.
 */
void OPENBL_SPI_SpecialCommand(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t data;
  uint8_t xor;

  /* Point to the RAM SPI buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t) SPI_RAM_Buf;
 800593a:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <OPENBL_SPI_SpecialCommand+0xf4>)
 800593c:	60bb      	str	r3, [r7, #8]

  /* Send special read code acknowledgment */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800593e:	2079      	movs	r0, #121	; 0x79
 8005940:	f7fb faf8 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  /* Get the command operation code */
  if (OPENBL_SPI_GetSpecialCmdOpCode(&op_code, OPENBL_SPECIAL_CMD) == NACK_BYTE)
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	2101      	movs	r1, #1
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f9e3 	bl	8005d14 <OPENBL_SPI_GetSpecialCmdOpCode>
 800594e:	4603      	mov	r3, r0
 8005950:	2b1f      	cmp	r3, #31
 8005952:	d103      	bne.n	800595c <OPENBL_SPI_SpecialCommand+0x28>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005954:	201f      	movs	r0, #31
 8005956:	f7fb faed 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        /* Send last acknowledgment */
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
      }
    }
  }
}
 800595a:	e061      	b.n	8005a20 <OPENBL_SPI_SpecialCommand+0xec>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 800595c:	2079      	movs	r0, #121	; 0x79
 800595e:	f7fb fae9 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    special_cmd->CmdType = OPENBL_SPECIAL_CMD;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 8005968:	88ba      	ldrh	r2, [r7, #4]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	73bb      	strb	r3, [r7, #14]
    data                     = OPENBL_SPI_ReadByte();
 8005972:	f000 ffdd 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	b29b      	uxth	r3, r3
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	b29a      	uxth	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 8005986:	7bba      	ldrb	r2, [r7, #14]
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	4053      	eors	r3, r2
 800598c:	73bb      	strb	r3, [r7, #14]
    data                      = OPENBL_SPI_ReadByte();
 800598e:	f000 ffcf 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	889a      	ldrh	r2, [r3, #4]
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	b29b      	uxth	r3, r3
 800599e:	4313      	orrs	r3, r2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 80059a6:	7bba      	ldrb	r2, [r7, #14]
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	4053      	eors	r3, r2
 80059ac:	73bb      	strb	r3, [r7, #14]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	889b      	ldrh	r3, [r3, #4]
 80059b2:	2b80      	cmp	r3, #128	; 0x80
 80059b4:	d903      	bls.n	80059be <OPENBL_SPI_SpecialCommand+0x8a>
      OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 80059b6:	201f      	movs	r0, #31
 80059b8:	f7fb fabc 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 80059bc:	e030      	b.n	8005a20 <OPENBL_SPI_SpecialCommand+0xec>
      if (special_cmd->SizeBuffer1 != 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	889b      	ldrh	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d018      	beq.n	80059f8 <OPENBL_SPI_SpecialCommand+0xc4>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	e00f      	b.n	80059ec <OPENBL_SPI_SpecialCommand+0xb8>
          data                        = OPENBL_SPI_ReadByte();
 80059cc:	f000 ffb0 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80059d0:	4603      	mov	r3, r0
 80059d2:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	4413      	add	r3, r2
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 80059de:	7bba      	ldrb	r2, [r7, #14]
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	4053      	eors	r3, r2
 80059e4:	73bb      	strb	r3, [r7, #14]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	3301      	adds	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	889b      	ldrh	r3, [r3, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d3e9      	bcc.n	80059cc <OPENBL_SPI_SpecialCommand+0x98>
      if (OPENBL_SPI_ReadByte() != xor)
 80059f8:	f000 ff9a 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <OPENBL_SPI_SpecialCommand+0xda>
        OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005a06:	201f      	movs	r0, #31
 8005a08:	f7fb fa94 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005a0c:	e008      	b.n	8005a20 <OPENBL_SPI_SpecialCommand+0xec>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005a0e:	2079      	movs	r0, #121	; 0x79
 8005a10:	f7fb fa90 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        OPENBL_SPI_SpecialCommandProcess(special_cmd);
 8005a14:	68b8      	ldr	r0, [r7, #8]
 8005a16:	f7fb fabf 	bl	8000f98 <OPENBL_SPI_SpecialCommandProcess>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005a1a:	2079      	movs	r0, #121	; 0x79
 8005a1c:	f7fb fa8a 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000510 	.word	0x20000510

08005a2c <OPENBL_SPI_ExtendedSpecialCommand>:
/**
 * @brief  This function is used to execute special write commands.
 * @retval None.
 */
void OPENBL_SPI_ExtendedSpecialCommand(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
  uint8_t xor;
  uint8_t data;


  /* Point to the RAM SPI buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t) SPI_RAM_Buf;
 8005a32:	4b68      	ldr	r3, [pc, #416]	; (8005bd4 <OPENBL_SPI_ExtendedSpecialCommand+0x1a8>)
 8005a34:	60bb      	str	r3, [r7, #8]

  /* Send special write code acknowledgment */
  OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005a36:	2079      	movs	r0, #121	; 0x79
 8005a38:	f7fb fa7c 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>

  /* Get the command operation code */
  if (OPENBL_SPI_GetSpecialCmdOpCode(&op_code, OPENBL_EXTENDED_SPECIAL_CMD) == NACK_BYTE)
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	2102      	movs	r1, #2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f967 	bl	8005d14 <OPENBL_SPI_GetSpecialCmdOpCode>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b1f      	cmp	r3, #31
 8005a4a:	d103      	bne.n	8005a54 <OPENBL_SPI_ExtendedSpecialCommand+0x28>
  {
    OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005a4c:	201f      	movs	r0, #31
 8005a4e:	f7fb fa71 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
          }
        }
      }
    }
  }
}
 8005a52:	e0ba      	b.n	8005bca <OPENBL_SPI_ExtendedSpecialCommand+0x19e>
    OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005a54:	2079      	movs	r0, #121	; 0x79
 8005a56:	f7fb fa6d 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
    special_cmd->CmdType = OPENBL_EXTENDED_SPECIAL_CMD;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 8005a60:	88ba      	ldrh	r2, [r7, #4]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	737b      	strb	r3, [r7, #13]
    data                     = OPENBL_SPI_ReadByte();
 8005a6a:	f000 ff61 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 8005a7e:	7b7a      	ldrb	r2, [r7, #13]
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	4053      	eors	r3, r2
 8005a84:	737b      	strb	r3, [r7, #13]
    data                      = OPENBL_SPI_ReadByte();
 8005a86:	f000 ff53 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	889a      	ldrh	r2, [r3, #4]
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 8005a9e:	7b7a      	ldrb	r2, [r7, #13]
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	4053      	eors	r3, r2
 8005aa4:	737b      	strb	r3, [r7, #13]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	889b      	ldrh	r3, [r3, #4]
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d903      	bls.n	8005ab6 <OPENBL_SPI_ExtendedSpecialCommand+0x8a>
      OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005aae:	201f      	movs	r0, #31
 8005ab0:	f7fb fa40 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005ab4:	e089      	b.n	8005bca <OPENBL_SPI_ExtendedSpecialCommand+0x19e>
      if (special_cmd->SizeBuffer1 != 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	889b      	ldrh	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <OPENBL_SPI_ExtendedSpecialCommand+0xc2>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	81fb      	strh	r3, [r7, #14]
 8005ac2:	e00f      	b.n	8005ae4 <OPENBL_SPI_ExtendedSpecialCommand+0xb8>
          data                        = OPENBL_SPI_ReadByte();
 8005ac4:	f000 ff34 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	79fa      	ldrb	r2, [r7, #7]
 8005ad4:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 8005ad6:	7b7a      	ldrb	r2, [r7, #13]
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	4053      	eors	r3, r2
 8005adc:	737b      	strb	r3, [r7, #13]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	81fb      	strh	r3, [r7, #14]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	889b      	ldrh	r3, [r3, #4]
 8005ae8:	89fa      	ldrh	r2, [r7, #14]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d3ea      	bcc.n	8005ac4 <OPENBL_SPI_ExtendedSpecialCommand+0x98>
      if (OPENBL_SPI_ReadByte() != xor)
 8005aee:	f000 ff1f 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	7b7b      	ldrb	r3, [r7, #13]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <OPENBL_SPI_ExtendedSpecialCommand+0xd8>
        OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005afc:	201f      	movs	r0, #31
 8005afe:	f7fb fa19 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005b02:	e062      	b.n	8005bca <OPENBL_SPI_ExtendedSpecialCommand+0x19e>
        OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005b04:	2079      	movs	r0, #121	; 0x79
 8005b06:	f7fb fa15 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
        xor                      = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	737b      	strb	r3, [r7, #13]
        data                     = OPENBL_SPI_ReadByte();
 8005b0e:	f000 ff0f 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 = ((uint16_t)data) << 8;
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                     ^= data;
 8005b24:	7b7a      	ldrb	r2, [r7, #13]
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	4053      	eors	r3, r2
 8005b2a:	737b      	strb	r3, [r7, #13]
        data                      = OPENBL_SPI_ReadByte();
 8005b2c:	f000 ff00 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 |= (uint16_t)data;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                      ^= data;
 8005b48:	7b7a      	ldrb	r2, [r7, #13]
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	4053      	eors	r3, r2
 8005b4e:	737b      	strb	r3, [r7, #13]
        if (special_cmd->SizeBuffer2 > SPECIAL_CMD_SIZE_BUFFER2)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5a:	d903      	bls.n	8005b64 <OPENBL_SPI_ExtendedSpecialCommand+0x138>
          OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005b5c:	201f      	movs	r0, #31
 8005b5e:	f7fb f9e9 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005b62:	e032      	b.n	8005bca <OPENBL_SPI_ExtendedSpecialCommand+0x19e>
          if (special_cmd->SizeBuffer2 != 0U)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d019      	beq.n	8005ba2 <OPENBL_SPI_ExtendedSpecialCommand+0x176>
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	81fb      	strh	r3, [r7, #14]
 8005b72:	e010      	b.n	8005b96 <OPENBL_SPI_ExtendedSpecialCommand+0x16a>
              data                        = OPENBL_SPI_ReadByte();
 8005b74:	f000 fedc 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	71fb      	strb	r3, [r7, #7]
              special_cmd->Buffer2[index] = data;
 8005b7c:	89fb      	ldrh	r3, [r7, #14]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	79fa      	ldrb	r2, [r7, #7]
 8005b84:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
              xor                        ^= data;
 8005b88:	7b7a      	ldrb	r2, [r7, #13]
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	4053      	eors	r3, r2
 8005b8e:	737b      	strb	r3, [r7, #13]
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8005b90:	89fb      	ldrh	r3, [r7, #14]
 8005b92:	3301      	adds	r3, #1
 8005b94:	81fb      	strh	r3, [r7, #14]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005b9c:	89fa      	ldrh	r2, [r7, #14]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d3e8      	bcc.n	8005b74 <OPENBL_SPI_ExtendedSpecialCommand+0x148>
          if (OPENBL_SPI_ReadByte() != xor)
 8005ba2:	f000 fec5 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	7b7b      	ldrb	r3, [r7, #13]
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <OPENBL_SPI_ExtendedSpecialCommand+0x18c>
            OPENBL_SPI_SendAcknowledgeByte(NACK_BYTE);
 8005bb0:	201f      	movs	r0, #31
 8005bb2:	f7fb f9bf 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005bb6:	e008      	b.n	8005bca <OPENBL_SPI_ExtendedSpecialCommand+0x19e>
            OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005bb8:	2079      	movs	r0, #121	; 0x79
 8005bba:	f7fb f9bb 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
            OPENBL_SPI_SpecialCommandProcess(special_cmd);
 8005bbe:	68b8      	ldr	r0, [r7, #8]
 8005bc0:	f7fb f9ea 	bl	8000f98 <OPENBL_SPI_SpecialCommandProcess>
            OPENBL_SPI_SendAcknowledgeByte(ACK_BYTE);
 8005bc4:	2079      	movs	r0, #121	; 0x79
 8005bc6:	f7fb f9b5 	bl	8000f34 <OPENBL_SPI_SendAcknowledgeByte>
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000510 	.word	0x20000510

08005bd8 <OPENBL_SPI_ConstructCommandsTable>:
/**
  * @brief  This function is used to construct the command list table.
  * @return Returns the number of supported commands.
  */
static uint8_t OPENBL_SPI_ConstructCommandsTable(OPENBL_CommandsTypeDef *pSpiCmd)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]

  if (pSpiCmd->GetCommand != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <OPENBL_SPI_ConstructCommandsTable+0x22>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_GET_COMMAND;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	4a48      	ldr	r2, [pc, #288]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	54d1      	strb	r1, [r2, r3]
    i++;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->GetVersion != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <OPENBL_SPI_ConstructCommandsTable+0x38>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_GET_VERSION;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	4a42      	ldr	r2, [pc, #264]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c06:	2101      	movs	r1, #1
 8005c08:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->GetID != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <OPENBL_SPI_ConstructCommandsTable+0x4e>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_GET_ID;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a3d      	ldr	r2, [pc, #244]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	3301      	adds	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->ReadMemory != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d006      	beq.n	8005c3c <OPENBL_SPI_ConstructCommandsTable+0x64>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_READ_MEMORY;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	4a37      	ldr	r2, [pc, #220]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c32:	2111      	movs	r1, #17
 8005c34:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->Go != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <OPENBL_SPI_ConstructCommandsTable+0x7a>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_GO;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	4a32      	ldr	r2, [pc, #200]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c48:	2121      	movs	r1, #33	; 0x21
 8005c4a:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->WriteMemory != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <OPENBL_SPI_ConstructCommandsTable+0x90>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_WRITE_MEMORY;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c5e:	2131      	movs	r1, #49	; 0x31
 8005c60:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	3301      	adds	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->EraseMemory != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <OPENBL_SPI_ConstructCommandsTable+0xa6>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_EXT_ERASE_MEMORY;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	4a27      	ldr	r2, [pc, #156]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c74:	2144      	movs	r1, #68	; 0x44
 8005c76:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->WriteProtect != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d006      	beq.n	8005c94 <OPENBL_SPI_ConstructCommandsTable+0xbc>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_WRITE_PROTECT;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005c8a:	2163      	movs	r1, #99	; 0x63
 8005c8c:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	3301      	adds	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->WriteUnprotect != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <OPENBL_SPI_ConstructCommandsTable+0xd2>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_WRITE_UNPROTECT;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005ca0:	2173      	movs	r1, #115	; 0x73
 8005ca2:	54d1      	strb	r1, [r2, r3]
    i++;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->ReadoutProtect != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <OPENBL_SPI_ConstructCommandsTable+0xe8>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_READ_PROTECT;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005cb6:	2182      	movs	r1, #130	; 0x82
 8005cb8:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->ReadoutUnprotect != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <OPENBL_SPI_ConstructCommandsTable+0xfe>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_READ_UNPROTECT;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005ccc:	2192      	movs	r1, #146	; 0x92
 8005cce:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->SpecialCommand != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <OPENBL_SPI_ConstructCommandsTable+0x114>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_SPECIAL_COMMAND;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4a0b      	ldr	r2, [pc, #44]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005ce2:	2150      	movs	r1, #80	; 0x50
 8005ce4:	54d1      	strb	r1, [r2, r3]
    i++;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
  }

  if (pSpiCmd->ExtendedSpecialCommand != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d006      	beq.n	8005d02 <OPENBL_SPI_ConstructCommandsTable+0x12a>
  {
    a_OPENBL_SPI_CommandsList[i] = CMD_EXTENDED_SPECIAL_COMMAND;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	4a06      	ldr	r2, [pc, #24]	; (8005d10 <OPENBL_SPI_ConstructCommandsTable+0x138>)
 8005cf8:	2151      	movs	r1, #81	; 0x51
 8005cfa:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
  }

  return (i);
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	2000099c 	.word	0x2000099c

08005d14 <OPENBL_SPI_GetSpecialCmdOpCode>:
 * @param  OpCode Pointer to the operation code to be returned.
 * @param  CmdType Type of the command, Special read or special write.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
static uint8_t OPENBL_SPI_GetSpecialCmdOpCode(uint16_t *OpCode, OPENBL_SpecialCmdTypeTypeDef CmdType)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  uint8_t xor;
  uint8_t status;
  uint8_t index;

  /* Initialize the status variable */
  status = NACK_BYTE;
 8005d20:	231f      	movs	r3, #31
 8005d22:	73fb      	strb	r3, [r7, #15]

  /* Get the command OpCode (2 bytes) */
  op_code[0] = OPENBL_SPI_ReadByte(); /* Read the MSB byte */
 8005d24:	f000 fe04 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	723b      	strb	r3, [r7, #8]
  op_code[1] = OPENBL_SPI_ReadByte(); /* Read the LSB byte */
 8005d2c:	f000 fe00 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005d30:	4603      	mov	r3, r0
 8005d32:	727b      	strb	r3, [r7, #9]

  /* Get the checksum */
  xor  = op_code[0];
 8005d34:	7a3b      	ldrb	r3, [r7, #8]
 8005d36:	737b      	strb	r3, [r7, #13]
  xor ^= op_code[1];
 8005d38:	7a7a      	ldrb	r2, [r7, #9]
 8005d3a:	7b7b      	ldrb	r3, [r7, #13]
 8005d3c:	4053      	eors	r3, r2
 8005d3e:	737b      	strb	r3, [r7, #13]

  if (OPENBL_SPI_ReadByte() != xor)
 8005d40:	f000 fdf6 	bl	8006930 <__OPENBL_SPI_ReadByte_veneer>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	7b7b      	ldrb	r3, [r7, #13]
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d002      	beq.n	8005d54 <OPENBL_SPI_GetSpecialCmdOpCode+0x40>
  {
    status = NACK_BYTE;
 8005d4e:	231f      	movs	r3, #31
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e03b      	b.n	8005dcc <OPENBL_SPI_GetSpecialCmdOpCode+0xb8>
  }
  else
  {
    /* Get the operation code */
    *OpCode = ((uint16_t)op_code[0] << 8) | (uint16_t)op_code[1];
 8005d54:	7a3b      	ldrb	r3, [r7, #8]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	b21a      	sxth	r2, r3
 8005d5a:	7a7b      	ldrb	r3, [r7, #9]
 8005d5c:	b21b      	sxth	r3, r3
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	801a      	strh	r2, [r3, #0]

    if (CmdType == OPENBL_SPECIAL_CMD)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d114      	bne.n	8005d98 <OPENBL_SPI_GetSpecialCmdOpCode+0x84>
    {
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73bb      	strb	r3, [r7, #14]
 8005d72:	e00d      	b.n	8005d90 <OPENBL_SPI_GetSpecialCmdOpCode+0x7c>
      {
        if (SpecialCmdList[index] == *OpCode)
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <OPENBL_SPI_GetSpecialCmdOpCode+0xc4>)
 8005d78:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d102      	bne.n	8005d8a <OPENBL_SPI_GetSpecialCmdOpCode+0x76>
        {
          status = ACK_BYTE;
 8005d84:	2379      	movs	r3, #121	; 0x79
 8005d86:	73fb      	strb	r3, [r7, #15]
          break;
 8005d88:	e020      	b.n	8005dcc <OPENBL_SPI_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	73bb      	strb	r3, [r7, #14]
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0ee      	beq.n	8005d74 <OPENBL_SPI_GetSpecialCmdOpCode+0x60>
 8005d96:	e019      	b.n	8005dcc <OPENBL_SPI_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else if (CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d114      	bne.n	8005dc8 <OPENBL_SPI_GetSpecialCmdOpCode+0xb4>
    {
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73bb      	strb	r3, [r7, #14]
 8005da2:	e00d      	b.n	8005dc0 <OPENBL_SPI_GetSpecialCmdOpCode+0xac>
      {
        if (ExtendedSpecialCmdList[index] == *OpCode)
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <OPENBL_SPI_GetSpecialCmdOpCode+0xc8>)
 8005da8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d102      	bne.n	8005dba <OPENBL_SPI_GetSpecialCmdOpCode+0xa6>
        {
          status = ACK_BYTE;
 8005db4:	2379      	movs	r3, #121	; 0x79
 8005db6:	73fb      	strb	r3, [r7, #15]
          break;
 8005db8:	e008      	b.n	8005dcc <OPENBL_SPI_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	73bb      	strb	r3, [r7, #14]
 8005dc0:	7bbb      	ldrb	r3, [r7, #14]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0ee      	beq.n	8005da4 <OPENBL_SPI_GetSpecialCmdOpCode+0x90>
 8005dc6:	e001      	b.n	8005dcc <OPENBL_SPI_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else
    {
      status = NACK_BYTE;
 8005dc8:	231f      	movs	r3, #31
 8005dca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	2000003c 	.word	0x2000003c
 8005ddc:	20000040 	.word	0x20000040

08005de0 <OPENBL_USART_GetCommandsList>:
/**
  * @brief  This function is used to get a pointer to the structure that contains the available USART commands.
  * @return Returns a pointer to the OPENBL_USART_Commands struct.
  */
OPENBL_CommandsTypeDef *OPENBL_USART_GetCommandsList(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
    NULL,
    OPENBL_USART_SpecialCommand,
    OPENBL_USART_ExtendedSpecialCommand
  };

  OPENBL_USART_SetCommandsList(&OPENBL_USART_Commands);
 8005de4:	4802      	ldr	r0, [pc, #8]	; (8005df0 <OPENBL_USART_GetCommandsList+0x10>)
 8005de6:	f000 f805 	bl	8005df4 <OPENBL_USART_SetCommandsList>

  return (&OPENBL_USART_Commands);
 8005dea:	4b01      	ldr	r3, [pc, #4]	; (8005df0 <OPENBL_USART_GetCommandsList+0x10>)
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200001a8 	.word	0x200001a8

08005df4 <OPENBL_USART_SetCommandsList>:
/**
  * @brief  This function is used to set the list of USART supported commands.
  * @return None.
  */
void OPENBL_USART_SetCommandsList(OPENBL_CommandsTypeDef *pUsartCmd)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UsartCommandsNumber = OPENBL_USART_ConstructCommandsTable(pUsartCmd);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fc57 	bl	80066b0 <OPENBL_USART_ConstructCommandsTable>
 8005e02:	4603      	mov	r3, r0
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <OPENBL_USART_SetCommandsList+0x20>)
 8005e08:	701a      	strb	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000e45 	.word	0x20000e45

08005e18 <OPENBL_USART_GetCommand>:
/**
  * @brief  This function is used to get the list of the available USART commands
  * @retval None.
  */
void OPENBL_USART_GetCommand(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  uint32_t counter;

  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005e1e:	2079      	movs	r0, #121	; 0x79
 8005e20:	f7fb fa62 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send the number of commands supported by the USART protocol */
  OPENBL_USART_SendByte(UsartCommandsNumber);
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <OPENBL_USART_GetCommand+0x50>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fb fa5d 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send USART protocol version */
  OPENBL_USART_SendByte(OPENBL_USART_VERSION);
 8005e2e:	2031      	movs	r0, #49	; 0x31
 8005e30:	f7fb fa5a 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send the list of supported commands */
  for (counter = 0U; counter < UsartCommandsNumber; counter++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	e009      	b.n	8005e4e <OPENBL_USART_GetCommand+0x36>
  {
    OPENBL_USART_SendByte(a_OPENBL_USART_CommandsList[counter]);
 8005e3a:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <OPENBL_USART_GetCommand+0x54>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fb fa50 	bl	80012e8 <OPENBL_USART_SendByte>
  for (counter = 0U; counter < UsartCommandsNumber; counter++)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <OPENBL_USART_GetCommand+0x50>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d3ef      	bcc.n	8005e3a <OPENBL_USART_GetCommand+0x22>
  }

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005e5a:	2079      	movs	r0, #121	; 0x79
 8005e5c:	f7fb fa44 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000e45 	.word	0x20000e45
 8005e6c:	20000e38 	.word	0x20000e38

08005e70 <OPENBL_USART_GetVersion>:
/**
  * @brief  This function is used to get the USART protocol version.
  * @retval None.
  */
void OPENBL_USART_GetVersion(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005e74:	2079      	movs	r0, #121	; 0x79
 8005e76:	f7fb fa37 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send USART protocol version */
  OPENBL_USART_SendByte(OPENBL_USART_VERSION);
 8005e7a:	2031      	movs	r0, #49	; 0x31
 8005e7c:	f7fb fa34 	bl	80012e8 <OPENBL_USART_SendByte>

  OPENBL_USART_SendByte(0x00);
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7fb fa31 	bl	80012e8 <OPENBL_USART_SendByte>
  OPENBL_USART_SendByte(0x00);
 8005e86:	2000      	movs	r0, #0
 8005e88:	f7fb fa2e 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005e8c:	2079      	movs	r0, #121	; 0x79
 8005e8e:	f7fb fa2b 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <OPENBL_USART_GetID>:
/**
  * @brief  This function is used to get the device ID.
  * @retval None.
  */
void OPENBL_USART_GetID(void)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005e9a:	2079      	movs	r0, #121	; 0x79
 8005e9c:	f7fb fa24 	bl	80012e8 <OPENBL_USART_SendByte>

  OPENBL_USART_SendByte(0x01);
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	f7fb fa21 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send the device ID starting by the MSB byte then the LSB byte */
  OPENBL_USART_SendByte(DEVICE_ID_MSB);
 8005ea6:	2004      	movs	r0, #4
 8005ea8:	f7fb fa1e 	bl	80012e8 <OPENBL_USART_SendByte>
  OPENBL_USART_SendByte(DEVICE_ID_LSB);
 8005eac:	2097      	movs	r0, #151	; 0x97
 8005eae:	f7fb fa1b 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 8005eb2:	2079      	movs	r0, #121	; 0x79
 8005eb4:	f7fb fa18 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <OPENBL_USART_ReadMemory>:
/**
 * @brief  This function is used to read memory from the device.
 * @retval None.
 */
void OPENBL_USART_ReadMemory(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
  uint32_t memory_index;
  uint8_t data;
  uint8_t xor;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8005ec2:	f7fa fa94 	bl	80003ee <Common_GetProtectionStatus>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <OPENBL_USART_ReadMemory+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8005ecc:	201f      	movs	r0, #31
 8005ece:	f7fb fa0b 	bl	80012e8 <OPENBL_USART_SendByte>
          address++;
        }
      }
    }
  }
}
 8005ed2:	e040      	b.n	8005f56 <OPENBL_USART_ReadMemory+0x9a>
    OPENBL_USART_SendByte(ACK_BYTE);
 8005ed4:	2079      	movs	r0, #121	; 0x79
 8005ed6:	f7fb fa07 	bl	80012e8 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 8005eda:	463b      	mov	r3, r7
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fa4d 	bl	800637c <OPENBL_USART_GetAddress>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b1f      	cmp	r3, #31
 8005ee6:	d103      	bne.n	8005ef0 <OPENBL_USART_ReadMemory+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 8005ee8:	201f      	movs	r0, #31
 8005eea:	f7fb f9fd 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005eee:	e032      	b.n	8005f56 <OPENBL_USART_ReadMemory+0x9a>
      OPENBL_USART_SendByte(ACK_BYTE);
 8005ef0:	2079      	movs	r0, #121	; 0x79
 8005ef2:	f7fb f9f9 	bl	80012e8 <OPENBL_USART_SendByte>
      data = OPENBL_USART_ReadByte();
 8005ef6:	f7fb f9e3 	bl	80012c0 <OPENBL_USART_ReadByte>
 8005efa:	4603      	mov	r3, r0
 8005efc:	72fb      	strb	r3, [r7, #11]
      xor  = ~data;
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	72bb      	strb	r3, [r7, #10]
      if (OPENBL_USART_ReadByte() != xor)
 8005f04:	f7fb f9dc 	bl	80012c0 <OPENBL_USART_ReadByte>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	7abb      	ldrb	r3, [r7, #10]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d003      	beq.n	8005f1a <OPENBL_USART_ReadMemory+0x5e>
        OPENBL_USART_SendByte(NACK_BYTE);
 8005f12:	201f      	movs	r0, #31
 8005f14:	f7fb f9e8 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005f18:	e01d      	b.n	8005f56 <OPENBL_USART_ReadMemory+0x9a>
        OPENBL_USART_SendByte(ACK_BYTE);
 8005f1a:	2079      	movs	r0, #121	; 0x79
 8005f1c:	f7fb f9e4 	bl	80012e8 <OPENBL_USART_SendByte>
        memory_index = OPENBL_MEM_GetMemoryIndex(address);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff f81c 	bl	8004f60 <OPENBL_MEM_GetMemoryIndex>
 8005f28:	6078      	str	r0, [r7, #4]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8005f2a:	7afb      	ldrb	r3, [r7, #11]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e00e      	b.n	8005f50 <OPENBL_USART_ReadMemory+0x94>
          OPENBL_USART_SendByte(OPENBL_MEM_Read(address, memory_index));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff f842 	bl	8004fc0 <OPENBL_MEM_Read>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fb f9d2 	bl	80012e8 <OPENBL_USART_SendByte>
          address++;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	603b      	str	r3, [r7, #0]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1ed      	bne.n	8005f32 <OPENBL_USART_ReadMemory+0x76>
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <OPENBL_USART_WriteMemory>:
/**
 * @brief  This function is used to write in to device memory.
 * @retval None.
 */
void OPENBL_USART_WriteMemory(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
  uint32_t codesize;
  uint8_t *ramaddress;
  uint8_t data;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8005f66:	f7fa fa42 	bl	80003ee <Common_GetProtectionStatus>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <OPENBL_USART_WriteMemory+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8005f70:	201f      	movs	r0, #31
 8005f72:	f7fb f9b9 	bl	80012e8 <OPENBL_USART_SendByte>
        /* Start post processing task if needed */
        Common_StartPostProcessing();
      }
    }
  }
}
 8005f76:	e048      	b.n	800600a <OPENBL_USART_WriteMemory+0xaa>
    OPENBL_USART_SendByte(ACK_BYTE);
 8005f78:	2079      	movs	r0, #121	; 0x79
 8005f7a:	f7fb f9b5 	bl	80012e8 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 8005f7e:	463b      	mov	r3, r7
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f9fb 	bl	800637c <OPENBL_USART_GetAddress>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b1f      	cmp	r3, #31
 8005f8a:	d103      	bne.n	8005f94 <OPENBL_USART_WriteMemory+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 8005f8c:	201f      	movs	r0, #31
 8005f8e:	f7fb f9ab 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005f92:	e03a      	b.n	800600a <OPENBL_USART_WriteMemory+0xaa>
      OPENBL_USART_SendByte(ACK_BYTE);
 8005f94:	2079      	movs	r0, #121	; 0x79
 8005f96:	f7fb f9a7 	bl	80012e8 <OPENBL_USART_SendByte>
      ramaddress = (uint8_t *)USART_RAM_Buf;
 8005f9a:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <OPENBL_USART_WriteMemory+0xb4>)
 8005f9c:	60fb      	str	r3, [r7, #12]
      data = OPENBL_USART_ReadByte();
 8005f9e:	f7fb f98f 	bl	80012c0 <OPENBL_USART_ReadByte>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	72fb      	strb	r3, [r7, #11]
      codesize = (uint32_t)data + 1U;
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
      tmpXOR = data;
 8005fac:	7afb      	ldrb	r3, [r7, #11]
 8005fae:	617b      	str	r3, [r7, #20]
      for (counter = codesize; counter != 0U ; counter--)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e010      	b.n	8005fd8 <OPENBL_USART_WriteMemory+0x78>
        data    = OPENBL_USART_ReadByte();
 8005fb6:	f7fb f983 	bl	80012c0 <OPENBL_USART_ReadByte>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	72fb      	strb	r3, [r7, #11]
        tmpXOR ^= data;
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4053      	eors	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
        *(__IO uint8_t *)(ramaddress) = data;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	7afa      	ldrb	r2, [r7, #11]
 8005fca:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
      for (counter = codesize; counter != 0U ; counter--)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1eb      	bne.n	8005fb6 <OPENBL_USART_WriteMemory+0x56>
      if (OPENBL_USART_ReadByte() != tmpXOR)
 8005fde:	f7fb f96f 	bl	80012c0 <OPENBL_USART_ReadByte>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <OPENBL_USART_WriteMemory+0x94>
        OPENBL_USART_SendByte(NACK_BYTE);
 8005fec:	201f      	movs	r0, #31
 8005fee:	f7fb f97b 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8005ff2:	e00a      	b.n	800600a <OPENBL_USART_WriteMemory+0xaa>
        OPENBL_MEM_Write(address, (uint8_t *)USART_RAM_Buf, codesize);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4906      	ldr	r1, [pc, #24]	; (8006014 <OPENBL_USART_WriteMemory+0xb4>)
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff f810 	bl	8005020 <OPENBL_MEM_Write>
        OPENBL_USART_SendByte(ACK_BYTE);
 8006000:	2079      	movs	r0, #121	; 0x79
 8006002:	f7fb f971 	bl	80012e8 <OPENBL_USART_SendByte>
        Common_StartPostProcessing();
 8006006:	f7fa fa13 	bl	8000430 <Common_StartPostProcessing>
}
 800600a:	bf00      	nop
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	200009ac 	.word	0x200009ac

08006018 <OPENBL_USART_Go>:
/**
  * @brief  This function is used to jump to the user application.
  * @retval None.
  */
void OPENBL_USART_Go(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
  uint32_t address;
  uint8_t status;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 800601e:	f7fa f9e6 	bl	80003ee <Common_GetProtectionStatus>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <OPENBL_USART_Go+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006028:	201f      	movs	r0, #31
 800602a:	f7fb f95d 	bl	80012e8 <OPENBL_USART_SendByte>

        OPENBL_MEM_JumpToAddress(address);
      }
    }
  }
}
 800602e:	e021      	b.n	8006074 <OPENBL_USART_Go+0x5c>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006030:	2079      	movs	r0, #121	; 0x79
 8006032:	f7fb f959 	bl	80012e8 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 8006036:	463b      	mov	r3, r7
 8006038:	4618      	mov	r0, r3
 800603a:	f000 f99f 	bl	800637c <OPENBL_USART_GetAddress>
 800603e:	4603      	mov	r3, r0
 8006040:	2b1f      	cmp	r3, #31
 8006042:	d103      	bne.n	800604c <OPENBL_USART_Go+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 8006044:	201f      	movs	r0, #31
 8006046:	f7fb f94f 	bl	80012e8 <OPENBL_USART_SendByte>
}
 800604a:	e013      	b.n	8006074 <OPENBL_USART_Go+0x5c>
      status = OPENBL_MEM_CheckJumpAddress(address);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f91c 	bl	800528c <OPENBL_MEM_CheckJumpAddress>
 8006054:	4603      	mov	r3, r0
 8006056:	71fb      	strb	r3, [r7, #7]
      if (status == 0U)
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <OPENBL_USART_Go+0x4e>
        OPENBL_USART_SendByte(NACK_BYTE);
 800605e:	201f      	movs	r0, #31
 8006060:	f7fb f942 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8006064:	e006      	b.n	8006074 <OPENBL_USART_Go+0x5c>
        OPENBL_USART_SendByte(ACK_BYTE);
 8006066:	2079      	movs	r0, #121	; 0x79
 8006068:	f7fb f93e 	bl	80012e8 <OPENBL_USART_SendByte>
        OPENBL_MEM_JumpToAddress(address);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff f876 	bl	8005160 <OPENBL_MEM_JumpToAddress>
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <OPENBL_USART_ReadoutProtect>:
/**
 * @brief  This function is used to enable readout protection.
 * @retval None.
 */
void OPENBL_USART_ReadoutProtect(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8006080:	f7fa f9b5 	bl	80003ee <Common_GetProtectionStatus>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <OPENBL_USART_ReadoutProtect+0x16>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 800608a:	201f      	movs	r0, #31
 800608c:	f7fb f92c 	bl	80012e8 <OPENBL_USART_SendByte>
    OPENBL_USART_SendByte(ACK_BYTE);

    /* Start post processing task if needed */
    Common_StartPostProcessing();
  }
}
 8006090:	e00c      	b.n	80060ac <OPENBL_USART_ReadoutProtect+0x30>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006092:	2079      	movs	r0, #121	; 0x79
 8006094:	f7fb f928 	bl	80012e8 <OPENBL_USART_SendByte>
    OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, ENABLE);
 8006098:	2101      	movs	r1, #1
 800609a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800609e:	f7fe ffed 	bl	800507c <OPENBL_MEM_SetReadOutProtection>
    OPENBL_USART_SendByte(ACK_BYTE);
 80060a2:	2079      	movs	r0, #121	; 0x79
 80060a4:	f7fb f920 	bl	80012e8 <OPENBL_USART_SendByte>
    Common_StartPostProcessing();
 80060a8:	f7fa f9c2 	bl	8000430 <Common_StartPostProcessing>
}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <OPENBL_USART_ReadoutUnprotect>:
/**
 * @brief  This function is used to disable readout protection.
 * @retval None.
 */
void OPENBL_USART_ReadoutUnprotect(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  OPENBL_USART_SendByte(ACK_BYTE);
 80060b4:	2079      	movs	r0, #121	; 0x79
 80060b6:	f7fb f917 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Once the option bytes modification start bit is set in FLASH CR register,
     all the RAM is erased, this causes the erase of the Open Bootloader RAM.
     This is why the last ACK is sent before the call of OPENBL_MEM_SetReadOutProtection */
  OPENBL_USART_SendByte(ACK_BYTE);
 80060ba:	2079      	movs	r0, #121	; 0x79
 80060bc:	f7fb f914 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, DISABLE);
 80060c0:	2100      	movs	r1, #0
 80060c2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80060c6:	f7fe ffd9 	bl	800507c <OPENBL_MEM_SetReadOutProtection>

  /* Start post processing task if needed */
  Common_StartPostProcessing();
 80060ca:	f7fa f9b1 	bl	8000430 <Common_StartPostProcessing>
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <OPENBL_USART_EraseMemory>:
/**
 * @brief  This function is used to erase a memory.
 * @retval None.
 */
void OPENBL_USART_EraseMemory(void)
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b089      	sub	sp, #36	; 0x24
 80060d8:	af00      	add	r7, sp, #0
  uint32_t xor;
  uint32_t counter;
  uint32_t numpage;
  uint16_t data;
  ErrorStatus error_value;
  uint8_t status = ACK_BYTE;
 80060da:	2379      	movs	r3, #121	; 0x79
 80060dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *ramaddress;

  ramaddress = (uint8_t *) USART_RAM_Buf;
 80060de:	4b68      	ldr	r3, [pc, #416]	; (8006280 <OPENBL_USART_EraseMemory+0x1ac>)
 80060e0:	613b      	str	r3, [r7, #16]

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 80060e2:	f7fa f984 	bl	80003ee <Common_GetProtectionStatus>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <OPENBL_USART_EraseMemory+0x20>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 80060ec:	201f      	movs	r0, #31
 80060ee:	f7fb f8fb 	bl	80012e8 <OPENBL_USART_SendByte>
      }
    }

    OPENBL_USART_SendByte(status);
  }
}
 80060f2:	e0c0      	b.n	8006276 <OPENBL_USART_EraseMemory+0x1a2>
    OPENBL_USART_SendByte(ACK_BYTE);
 80060f4:	2079      	movs	r0, #121	; 0x79
 80060f6:	f7fb f8f7 	bl	80012e8 <OPENBL_USART_SendByte>
    data = OPENBL_USART_ReadByte();
 80060fa:	f7fb f8e1 	bl	80012c0 <OPENBL_USART_ReadByte>
 80060fe:	4603      	mov	r3, r0
 8006100:	81fb      	strh	r3, [r7, #14]
    data = (uint16_t)(data << 8) | OPENBL_USART_ReadByte();
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	b29c      	uxth	r4, r3
 8006108:	f7fb f8da 	bl	80012c0 <OPENBL_USART_ReadByte>
 800610c:	4603      	mov	r3, r0
 800610e:	b29b      	uxth	r3, r3
 8006110:	4323      	orrs	r3, r4
 8006112:	81fb      	strh	r3, [r7, #14]
    xor  = ((uint32_t)data & 0xFF00U) >> 8;
 8006114:	89fb      	ldrh	r3, [r7, #14]
 8006116:	0a1b      	lsrs	r3, r3, #8
 8006118:	b29b      	uxth	r3, r3
 800611a:	61fb      	str	r3, [r7, #28]
    xor ^= (uint32_t)data & 0x00FFU;
 800611c:	89fb      	ldrh	r3, [r7, #14]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	4053      	eors	r3, r2
 8006124:	61fb      	str	r3, [r7, #28]
    if ((data & 0xFFF0U) == 0xFFF0U)
 8006126:	89fa      	ldrh	r2, [r7, #14]
 8006128:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800612c:	4013      	ands	r3, r2
 800612e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8006132:	4293      	cmp	r3, r2
 8006134:	d139      	bne.n	80061aa <OPENBL_USART_EraseMemory+0xd6>
      if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 8006136:	f7fb f8c3 	bl	80012c0 <OPENBL_USART_ReadByte>
 800613a:	4603      	mov	r3, r0
 800613c:	461a      	mov	r2, r3
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	429a      	cmp	r2, r3
 8006144:	d002      	beq.n	800614c <OPENBL_USART_EraseMemory+0x78>
        status = NACK_BYTE;
 8006146:	231f      	movs	r3, #31
 8006148:	75fb      	strb	r3, [r7, #23]
 800614a:	e090      	b.n	800626e <OPENBL_USART_EraseMemory+0x19a>
        if ((data == 0xFFFFU) || (data == 0xFFFEU) || (data == 0xFFFDU))
 800614c:	89fb      	ldrh	r3, [r7, #14]
 800614e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006152:	4293      	cmp	r3, r2
 8006154:	d009      	beq.n	800616a <OPENBL_USART_EraseMemory+0x96>
 8006156:	89fb      	ldrh	r3, [r7, #14]
 8006158:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <OPENBL_USART_EraseMemory+0x96>
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8006166:	4293      	cmp	r3, r2
 8006168:	d11c      	bne.n	80061a4 <OPENBL_USART_EraseMemory+0xd0>
          ramaddress[0] = (uint8_t)(data & 0x00FFU);
 800616a:	89fb      	ldrh	r3, [r7, #14]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	701a      	strb	r2, [r3, #0]
          ramaddress[1] = (uint8_t)((data & 0xFF00U) >> 8);
 8006172:	89fb      	ldrh	r3, [r7, #14]
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	b29a      	uxth	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3301      	adds	r3, #1
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
          error_value = OPENBL_MEM_MassErase(OPENBL_DEFAULT_MEM, (uint8_t *) USART_RAM_Buf, USART_RAM_BUFFER_SIZE);
 8006180:	f240 428c 	movw	r2, #1164	; 0x48c
 8006184:	493e      	ldr	r1, [pc, #248]	; (8006280 <OPENBL_USART_EraseMemory+0x1ac>)
 8006186:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800618a:	f7ff f813 	bl	80051b4 <OPENBL_MEM_MassErase>
 800618e:	4603      	mov	r3, r0
 8006190:	71fb      	strb	r3, [r7, #7]
          if (error_value == SUCCESS)
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d102      	bne.n	800619e <OPENBL_USART_EraseMemory+0xca>
            status = ACK_BYTE;
 8006198:	2379      	movs	r3, #121	; 0x79
 800619a:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 800619c:	e067      	b.n	800626e <OPENBL_USART_EraseMemory+0x19a>
            status = NACK_BYTE;
 800619e:	231f      	movs	r3, #31
 80061a0:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 80061a2:	e064      	b.n	800626e <OPENBL_USART_EraseMemory+0x19a>
          status = NACK_BYTE;
 80061a4:	231f      	movs	r3, #31
 80061a6:	75fb      	strb	r3, [r7, #23]
 80061a8:	e061      	b.n	800626e <OPENBL_USART_EraseMemory+0x19a>
      ramaddress = (uint8_t *) USART_RAM_Buf;
 80061aa:	4b35      	ldr	r3, [pc, #212]	; (8006280 <OPENBL_USART_EraseMemory+0x1ac>)
 80061ac:	613b      	str	r3, [r7, #16]
      numpage = (uint32_t)data + 1U;
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	3301      	adds	r3, #1
 80061b2:	60bb      	str	r3, [r7, #8]
      *ramaddress = (uint8_t)(numpage & 0x00FFU);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3301      	adds	r3, #1
 80061c0:	613b      	str	r3, [r7, #16]
      *ramaddress = (uint8_t)((numpage & 0xFF00U) >> 8);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	3301      	adds	r3, #1
 80061d0:	613b      	str	r3, [r7, #16]
      for (counter = numpage; counter != 0U ; counter--)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e02e      	b.n	8006236 <OPENBL_USART_EraseMemory+0x162>
        data  = OPENBL_USART_ReadByte();
 80061d8:	f7fb f872 	bl	80012c0 <OPENBL_USART_ReadByte>
 80061dc:	4603      	mov	r3, r0
 80061de:	81fb      	strh	r3, [r7, #14]
        xor  ^= data;
 80061e0:	89fb      	ldrh	r3, [r7, #14]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	4053      	eors	r3, r2
 80061e6:	61fb      	str	r3, [r7, #28]
        data  = (uint16_t)((data & 0x00FFU) << 8);
 80061e8:	89fb      	ldrh	r3, [r7, #14]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	81fb      	strh	r3, [r7, #14]
        data |= (uint8_t)(OPENBL_USART_ReadByte() & 0x00FFU);
 80061ee:	f7fb f867 	bl	80012c0 <OPENBL_USART_ReadByte>
 80061f2:	4603      	mov	r3, r0
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	81fb      	strh	r3, [r7, #14]
        xor  ^= ((uint32_t)data & 0x00FFU);
 80061fc:	89fb      	ldrh	r3, [r7, #14]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	4053      	eors	r3, r2
 8006204:	61fb      	str	r3, [r7, #28]
        if (counter < (USART_RAM_BUFFER_SIZE / 2U))
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f240 2245 	movw	r2, #581	; 0x245
 800620c:	4293      	cmp	r3, r2
 800620e:	d80f      	bhi.n	8006230 <OPENBL_USART_EraseMemory+0x15c>
          *ramaddress = (uint8_t)(data & 0x00FFU);
 8006210:	89fb      	ldrh	r3, [r7, #14]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	701a      	strb	r2, [r3, #0]
          ramaddress++;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	613b      	str	r3, [r7, #16]
          *ramaddress = (uint8_t)((data & 0xFF00U) >> 8);
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	b29b      	uxth	r3, r3
 8006224:	b2da      	uxtb	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	701a      	strb	r2, [r3, #0]
          ramaddress++;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3301      	adds	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
      for (counter = numpage; counter != 0U ; counter--)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	3b01      	subs	r3, #1
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1cd      	bne.n	80061d8 <OPENBL_USART_EraseMemory+0x104>
      if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 800623c:	f7fb f840 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	429a      	cmp	r2, r3
 800624a:	d002      	beq.n	8006252 <OPENBL_USART_EraseMemory+0x17e>
        status = NACK_BYTE;
 800624c:	231f      	movs	r3, #31
 800624e:	75fb      	strb	r3, [r7, #23]
 8006250:	e00d      	b.n	800626e <OPENBL_USART_EraseMemory+0x19a>
        error_value = OPENBL_MEM_Erase(OPENBL_DEFAULT_MEM, (uint8_t *) USART_RAM_Buf, USART_RAM_BUFFER_SIZE);
 8006252:	f240 428c 	movw	r2, #1164	; 0x48c
 8006256:	490a      	ldr	r1, [pc, #40]	; (8006280 <OPENBL_USART_EraseMemory+0x1ac>)
 8006258:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800625c:	f7fe ffe0 	bl	8005220 <OPENBL_MEM_Erase>
 8006260:	4603      	mov	r3, r0
 8006262:	71fb      	strb	r3, [r7, #7]
        if (error_value == SUCCESS)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <OPENBL_USART_EraseMemory+0x19a>
          status = ACK_BYTE;
 800626a:	2379      	movs	r3, #121	; 0x79
 800626c:	75fb      	strb	r3, [r7, #23]
    OPENBL_USART_SendByte(status);
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	4618      	mov	r0, r3
 8006272:	f7fb f839 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8006276:	bf00      	nop
 8006278:	3724      	adds	r7, #36	; 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
 800627e:	bf00      	nop
 8006280:	200009ac 	.word	0x200009ac

08006284 <OPENBL_USART_WriteProtect>:
/**
 * @brief  This function is used to enable write protect.
 * @retval None.
 */
void OPENBL_USART_WriteProtect(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
  uint32_t xor;
  ErrorStatus error_value;
  uint8_t *ramaddress;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 800628a:	f7fa f8b0 	bl	80003ee <Common_GetProtectionStatus>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <OPENBL_USART_WriteProtect+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006294:	201f      	movs	r0, #31
 8006296:	f7fb f827 	bl	80012e8 <OPENBL_USART_SendByte>
      {
        Common_StartPostProcessing();
      }
    }
  }
}
 800629a:	e044      	b.n	8006326 <OPENBL_USART_WriteProtect+0xa2>
    OPENBL_USART_SendByte(ACK_BYTE);
 800629c:	2079      	movs	r0, #121	; 0x79
 800629e:	f7fb f823 	bl	80012e8 <OPENBL_USART_SendByte>
    data = OPENBL_USART_ReadByte();
 80062a2:	f7fb f80d 	bl	80012c0 <OPENBL_USART_ReadByte>
 80062a6:	4603      	mov	r3, r0
 80062a8:	60bb      	str	r3, [r7, #8]
    ramaddress = (uint8_t *) USART_RAM_Buf;
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <OPENBL_USART_WriteProtect+0xac>)
 80062ac:	60fb      	str	r3, [r7, #12]
    length     = data + 1U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	3301      	adds	r3, #1
 80062b2:	607b      	str	r3, [r7, #4]
    xor = data;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	613b      	str	r3, [r7, #16]
    for (counter = length; counter != 0U ; counter--)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e011      	b.n	80062e2 <OPENBL_USART_WriteProtect+0x5e>
      data  = OPENBL_USART_ReadByte();
 80062be:	f7fa ffff 	bl	80012c0 <OPENBL_USART_ReadByte>
 80062c2:	4603      	mov	r3, r0
 80062c4:	60bb      	str	r3, [r7, #8]
      xor  ^= data;
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4053      	eors	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
      *(__IO uint8_t *)(ramaddress) = (uint8_t) data;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
    for (counter = length; counter != 0U ; counter--)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3b01      	subs	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ea      	bne.n	80062be <OPENBL_USART_WriteProtect+0x3a>
    if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 80062e8:	f7fa ffea 	bl	80012c0 <OPENBL_USART_ReadByte>
 80062ec:	4603      	mov	r3, r0
 80062ee:	461a      	mov	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d003      	beq.n	8006300 <OPENBL_USART_WriteProtect+0x7c>
      OPENBL_USART_SendByte(NACK_BYTE);
 80062f8:	201f      	movs	r0, #31
 80062fa:	f7fa fff5 	bl	80012e8 <OPENBL_USART_SendByte>
}
 80062fe:	e012      	b.n	8006326 <OPENBL_USART_WriteProtect+0xa2>
      ramaddress = (uint8_t *) USART_RAM_Buf;
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <OPENBL_USART_WriteProtect+0xac>)
 8006302:	60fb      	str	r3, [r7, #12]
      error_value = OPENBL_MEM_SetWriteProtection(ENABLE, OPENBL_DEFAULT_MEM, ramaddress, length);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800630c:	2001      	movs	r0, #1
 800630e:	f7fe feef 	bl	80050f0 <OPENBL_MEM_SetWriteProtection>
 8006312:	4603      	mov	r3, r0
 8006314:	70fb      	strb	r3, [r7, #3]
      OPENBL_USART_SendByte(ACK_BYTE);
 8006316:	2079      	movs	r0, #121	; 0x79
 8006318:	f7fa ffe6 	bl	80012e8 <OPENBL_USART_SendByte>
      if (error_value == SUCCESS)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <OPENBL_USART_WriteProtect+0xa2>
        Common_StartPostProcessing();
 8006322:	f7fa f885 	bl	8000430 <Common_StartPostProcessing>
}
 8006326:	bf00      	nop
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	200009ac 	.word	0x200009ac

08006334 <OPENBL_USART_WriteUnprotect>:
/**
 * @brief  This function is used to disable write protect.
 * @retval None.
 */
void OPENBL_USART_WriteUnprotect(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 800633a:	f7fa f858 	bl	80003ee <Common_GetProtectionStatus>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <OPENBL_USART_WriteUnprotect+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006344:	201f      	movs	r0, #31
 8006346:	f7fa ffcf 	bl	80012e8 <OPENBL_USART_SendByte>
    if (error_value == SUCCESS)
    {
      Common_StartPostProcessing();
    }
  }
}
 800634a:	e013      	b.n	8006374 <OPENBL_USART_WriteUnprotect+0x40>
    OPENBL_USART_SendByte(ACK_BYTE);
 800634c:	2079      	movs	r0, #121	; 0x79
 800634e:	f7fa ffcb 	bl	80012e8 <OPENBL_USART_SendByte>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, OPENBL_DEFAULT_MEM, NULL, 0);
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800635a:	2000      	movs	r0, #0
 800635c:	f7fe fec8 	bl	80050f0 <OPENBL_MEM_SetWriteProtection>
 8006360:	4603      	mov	r3, r0
 8006362:	71fb      	strb	r3, [r7, #7]
    OPENBL_USART_SendByte(ACK_BYTE);
 8006364:	2079      	movs	r0, #121	; 0x79
 8006366:	f7fa ffbf 	bl	80012e8 <OPENBL_USART_SendByte>
    if (error_value == SUCCESS)
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <OPENBL_USART_WriteUnprotect+0x40>
      Common_StartPostProcessing();
 8006370:	f7fa f85e 	bl	8000430 <Common_StartPostProcessing>
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <OPENBL_USART_GetAddress>:
/**
 * @brief  This function is used to get a valid address.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
uint8_t OPENBL_USART_GetAddress(uint32_t *Address)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8006384:	2300      	movs	r3, #0
 8006386:	60bb      	str	r3, [r7, #8]
  uint8_t status;
  uint8_t xor;

  data[3] = OPENBL_USART_ReadByte();
 8006388:	f7fa ff9a 	bl	80012c0 <OPENBL_USART_ReadByte>
 800638c:	4603      	mov	r3, r0
 800638e:	72fb      	strb	r3, [r7, #11]
  data[2] = OPENBL_USART_ReadByte();
 8006390:	f7fa ff96 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006394:	4603      	mov	r3, r0
 8006396:	72bb      	strb	r3, [r7, #10]
  data[1] = OPENBL_USART_ReadByte();
 8006398:	f7fa ff92 	bl	80012c0 <OPENBL_USART_ReadByte>
 800639c:	4603      	mov	r3, r0
 800639e:	727b      	strb	r3, [r7, #9]
  data[0] = OPENBL_USART_ReadByte();
 80063a0:	f7fa ff8e 	bl	80012c0 <OPENBL_USART_ReadByte>
 80063a4:	4603      	mov	r3, r0
 80063a6:	723b      	strb	r3, [r7, #8]

  xor = data[3] ^ data[2] ^ data[1] ^ data[0];
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	7abb      	ldrb	r3, [r7, #10]
 80063ac:	4053      	eors	r3, r2
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	7a7b      	ldrb	r3, [r7, #9]
 80063b2:	4053      	eors	r3, r2
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	7a3b      	ldrb	r3, [r7, #8]
 80063b8:	4053      	eors	r3, r2
 80063ba:	73bb      	strb	r3, [r7, #14]

  /* Check the integrity of received data */
  if (OPENBL_USART_ReadByte() != xor)
 80063bc:	f7fa ff80 	bl	80012c0 <OPENBL_USART_ReadByte>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d002      	beq.n	80063d0 <OPENBL_USART_GetAddress+0x54>
  {
    status = NACK_BYTE;
 80063ca:	231f      	movs	r3, #31
 80063cc:	73fb      	strb	r3, [r7, #15]
 80063ce:	e018      	b.n	8006402 <OPENBL_USART_GetAddress+0x86>
  }
  else
  {
    *Address = ((uint32_t)data[3] << 24) | ((uint32_t)data[2] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[0];
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	061a      	lsls	r2, r3, #24
 80063d4:	7abb      	ldrb	r3, [r7, #10]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	431a      	orrs	r2, r3
 80063da:	7a7b      	ldrb	r3, [r7, #9]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	4313      	orrs	r3, r2
 80063e0:	7a3a      	ldrb	r2, [r7, #8]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]

    /* Check if received address is valid or not */
    if (OPENBL_MEM_GetAddressArea(*Address) == AREA_ERROR)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fd7b 	bl	8004ee8 <OPENBL_MEM_GetAddressArea>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <OPENBL_USART_GetAddress+0x82>
    {
      status = NACK_BYTE;
 80063f8:	231f      	movs	r3, #31
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	e001      	b.n	8006402 <OPENBL_USART_GetAddress+0x86>
    }
    else
    {
      status = ACK_BYTE;
 80063fe:	2379      	movs	r3, #121	; 0x79
 8006400:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <OPENBL_USART_SpecialCommand>:
/**
 * @brief  This function is used to execute special command commands.
 * @retval None.
 */
void OPENBL_USART_SpecialCommand(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t data;
  uint8_t xor;

  /* Point to the RAM USART buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t)USART_RAM_Buf;
 8006412:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <OPENBL_USART_SpecialCommand+0xf4>)
 8006414:	60bb      	str	r3, [r7, #8]

  /* Send special command code acknowledgment */
  OPENBL_USART_SendByte(ACK_BYTE);
 8006416:	2079      	movs	r0, #121	; 0x79
 8006418:	f7fa ff66 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Get the command operation code */
  if (OPENBL_USART_GetSpecialCmdOpCode(&op_code, OPENBL_SPECIAL_CMD) == NACK_BYTE)
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	2101      	movs	r1, #1
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f9e3 	bl	80067ec <OPENBL_USART_GetSpecialCmdOpCode>
 8006426:	4603      	mov	r3, r0
 8006428:	2b1f      	cmp	r3, #31
 800642a:	d103      	bne.n	8006434 <OPENBL_USART_SpecialCommand+0x28>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 800642c:	201f      	movs	r0, #31
 800642e:	f7fa ff5b 	bl	80012e8 <OPENBL_USART_SendByte>
        /* Send last acknowledgment */
        OPENBL_USART_SendByte(ACK_BYTE);
      }
    }
  }
}
 8006432:	e061      	b.n	80064f8 <OPENBL_USART_SpecialCommand+0xec>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006434:	2079      	movs	r0, #121	; 0x79
 8006436:	f7fa ff57 	bl	80012e8 <OPENBL_USART_SendByte>
    special_cmd->CmdType = OPENBL_SPECIAL_CMD;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 8006440:	88ba      	ldrh	r2, [r7, #4]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	73bb      	strb	r3, [r7, #14]
    data                     = OPENBL_USART_ReadByte();
 800644a:	f7fa ff39 	bl	80012c0 <OPENBL_USART_ReadByte>
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	b29b      	uxth	r3, r3
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	b29a      	uxth	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 800645e:	7bba      	ldrb	r2, [r7, #14]
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	4053      	eors	r3, r2
 8006464:	73bb      	strb	r3, [r7, #14]
    data                      = OPENBL_USART_ReadByte();
 8006466:	f7fa ff2b 	bl	80012c0 <OPENBL_USART_ReadByte>
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	889a      	ldrh	r2, [r3, #4]
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	b29b      	uxth	r3, r3
 8006476:	4313      	orrs	r3, r2
 8006478:	b29a      	uxth	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 800647e:	7bba      	ldrb	r2, [r7, #14]
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	4053      	eors	r3, r2
 8006484:	73bb      	strb	r3, [r7, #14]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	889b      	ldrh	r3, [r3, #4]
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d903      	bls.n	8006496 <OPENBL_USART_SpecialCommand+0x8a>
      OPENBL_USART_SendByte(NACK_BYTE);
 800648e:	201f      	movs	r0, #31
 8006490:	f7fa ff2a 	bl	80012e8 <OPENBL_USART_SendByte>
}
 8006494:	e030      	b.n	80064f8 <OPENBL_USART_SpecialCommand+0xec>
      if (special_cmd->SizeBuffer1 != 0U)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	889b      	ldrh	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d018      	beq.n	80064d0 <OPENBL_USART_SpecialCommand+0xc4>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	e00f      	b.n	80064c4 <OPENBL_USART_SpecialCommand+0xb8>
          data                        = OPENBL_USART_ReadByte();
 80064a4:	f7fa ff0c 	bl	80012c0 <OPENBL_USART_ReadByte>
 80064a8:	4603      	mov	r3, r0
 80064aa:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	79fa      	ldrb	r2, [r7, #7]
 80064b4:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 80064b6:	7bba      	ldrb	r2, [r7, #14]
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	4053      	eors	r3, r2
 80064bc:	73bb      	strb	r3, [r7, #14]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	3301      	adds	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	889b      	ldrh	r3, [r3, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d3e9      	bcc.n	80064a4 <OPENBL_USART_SpecialCommand+0x98>
      if (OPENBL_USART_ReadByte() != xor)
 80064d0:	f7fa fef6 	bl	80012c0 <OPENBL_USART_ReadByte>
 80064d4:	4603      	mov	r3, r0
 80064d6:	461a      	mov	r2, r3
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <OPENBL_USART_SpecialCommand+0xda>
        OPENBL_USART_SendByte(NACK_BYTE);
 80064de:	201f      	movs	r0, #31
 80064e0:	f7fa ff02 	bl	80012e8 <OPENBL_USART_SendByte>
}
 80064e4:	e008      	b.n	80064f8 <OPENBL_USART_SpecialCommand+0xec>
        OPENBL_USART_SendByte(ACK_BYTE);
 80064e6:	2079      	movs	r0, #121	; 0x79
 80064e8:	f7fa fefe 	bl	80012e8 <OPENBL_USART_SendByte>
        OPENBL_USART_SpecialCommandProcess(special_cmd);
 80064ec:	68b8      	ldr	r0, [r7, #8]
 80064ee:	f7fa ff13 	bl	8001318 <OPENBL_USART_SpecialCommandProcess>
        OPENBL_USART_SendByte(ACK_BYTE);
 80064f2:	2079      	movs	r0, #121	; 0x79
 80064f4:	f7fa fef8 	bl	80012e8 <OPENBL_USART_SendByte>
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	200009ac 	.word	0x200009ac

08006504 <OPENBL_USART_ExtendedSpecialCommand>:
/**
 * @brief  This function is used to execute extended special command commands.
 * @retval None.
 */
void OPENBL_USART_ExtendedSpecialCommand(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
  uint16_t index;
  uint8_t xor;
  uint8_t data;

  /* Point to the RAM USART buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t) USART_RAM_Buf;
 800650a:	4b68      	ldr	r3, [pc, #416]	; (80066ac <OPENBL_USART_ExtendedSpecialCommand+0x1a8>)
 800650c:	60bb      	str	r3, [r7, #8]

  /* Send extended special command code acknowledgment */
  OPENBL_USART_SendByte(ACK_BYTE);
 800650e:	2079      	movs	r0, #121	; 0x79
 8006510:	f7fa feea 	bl	80012e8 <OPENBL_USART_SendByte>

  /* Get the command operation code */
  if (OPENBL_USART_GetSpecialCmdOpCode(&op_code, OPENBL_EXTENDED_SPECIAL_CMD) == NACK_BYTE)
 8006514:	1d3b      	adds	r3, r7, #4
 8006516:	2102      	movs	r1, #2
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f967 	bl	80067ec <OPENBL_USART_GetSpecialCmdOpCode>
 800651e:	4603      	mov	r3, r0
 8006520:	2b1f      	cmp	r3, #31
 8006522:	d103      	bne.n	800652c <OPENBL_USART_ExtendedSpecialCommand+0x28>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006524:	201f      	movs	r0, #31
 8006526:	f7fa fedf 	bl	80012e8 <OPENBL_USART_SendByte>
          }
        }
      }
    }
  }
}
 800652a:	e0ba      	b.n	80066a2 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
    OPENBL_USART_SendByte(ACK_BYTE);
 800652c:	2079      	movs	r0, #121	; 0x79
 800652e:	f7fa fedb 	bl	80012e8 <OPENBL_USART_SendByte>
    special_cmd->CmdType = OPENBL_EXTENDED_SPECIAL_CMD;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2202      	movs	r2, #2
 8006536:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 8006538:	88ba      	ldrh	r2, [r7, #4]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	737b      	strb	r3, [r7, #13]
    data                     = OPENBL_USART_ReadByte();
 8006542:	f7fa febd 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006546:	4603      	mov	r3, r0
 8006548:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	b29b      	uxth	r3, r3
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	b29a      	uxth	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 8006556:	7b7a      	ldrb	r2, [r7, #13]
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	4053      	eors	r3, r2
 800655c:	737b      	strb	r3, [r7, #13]
    data                      = OPENBL_USART_ReadByte();
 800655e:	f7fa feaf 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006562:	4603      	mov	r3, r0
 8006564:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	889a      	ldrh	r2, [r3, #4]
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	b29b      	uxth	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b29a      	uxth	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 8006576:	7b7a      	ldrb	r2, [r7, #13]
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	4053      	eors	r3, r2
 800657c:	737b      	strb	r3, [r7, #13]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	889b      	ldrh	r3, [r3, #4]
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d903      	bls.n	800658e <OPENBL_USART_ExtendedSpecialCommand+0x8a>
      OPENBL_USART_SendByte(NACK_BYTE);
 8006586:	201f      	movs	r0, #31
 8006588:	f7fa feae 	bl	80012e8 <OPENBL_USART_SendByte>
}
 800658c:	e089      	b.n	80066a2 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
      if (special_cmd->SizeBuffer1 != 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	889b      	ldrh	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d017      	beq.n	80065c6 <OPENBL_USART_ExtendedSpecialCommand+0xc2>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8006596:	2300      	movs	r3, #0
 8006598:	81fb      	strh	r3, [r7, #14]
 800659a:	e00f      	b.n	80065bc <OPENBL_USART_ExtendedSpecialCommand+0xb8>
          data                        = OPENBL_USART_ReadByte();
 800659c:	f7fa fe90 	bl	80012c0 <OPENBL_USART_ReadByte>
 80065a0:	4603      	mov	r3, r0
 80065a2:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 80065a4:	89fb      	ldrh	r3, [r7, #14]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4413      	add	r3, r2
 80065aa:	79fa      	ldrb	r2, [r7, #7]
 80065ac:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 80065ae:	7b7a      	ldrb	r2, [r7, #13]
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	4053      	eors	r3, r2
 80065b4:	737b      	strb	r3, [r7, #13]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 80065b6:	89fb      	ldrh	r3, [r7, #14]
 80065b8:	3301      	adds	r3, #1
 80065ba:	81fb      	strh	r3, [r7, #14]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	889b      	ldrh	r3, [r3, #4]
 80065c0:	89fa      	ldrh	r2, [r7, #14]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d3ea      	bcc.n	800659c <OPENBL_USART_ExtendedSpecialCommand+0x98>
      if (OPENBL_USART_ReadByte() != xor)
 80065c6:	f7fa fe7b 	bl	80012c0 <OPENBL_USART_ReadByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	7b7b      	ldrb	r3, [r7, #13]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <OPENBL_USART_ExtendedSpecialCommand+0xd8>
        OPENBL_USART_SendByte(NACK_BYTE);
 80065d4:	201f      	movs	r0, #31
 80065d6:	f7fa fe87 	bl	80012e8 <OPENBL_USART_SendByte>
}
 80065da:	e062      	b.n	80066a2 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
        OPENBL_USART_SendByte(ACK_BYTE);
 80065dc:	2079      	movs	r0, #121	; 0x79
 80065de:	f7fa fe83 	bl	80012e8 <OPENBL_USART_SendByte>
        xor                      = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	737b      	strb	r3, [r7, #13]
        data                     = OPENBL_USART_ReadByte();
 80065e6:	f7fa fe6b 	bl	80012c0 <OPENBL_USART_ReadByte>
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 = ((uint16_t)data) << 8;
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                     ^= data;
 80065fc:	7b7a      	ldrb	r2, [r7, #13]
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	4053      	eors	r3, r2
 8006602:	737b      	strb	r3, [r7, #13]
        data                      = OPENBL_USART_ReadByte();
 8006604:	f7fa fe5c 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006608:	4603      	mov	r3, r0
 800660a:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 |= (uint16_t)data;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                      ^= data;
 8006620:	7b7a      	ldrb	r2, [r7, #13]
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	4053      	eors	r3, r2
 8006626:	737b      	strb	r3, [r7, #13]
        if (special_cmd->SizeBuffer2 > SPECIAL_CMD_SIZE_BUFFER2)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006632:	d903      	bls.n	800663c <OPENBL_USART_ExtendedSpecialCommand+0x138>
          OPENBL_USART_SendByte(NACK_BYTE);
 8006634:	201f      	movs	r0, #31
 8006636:	f7fa fe57 	bl	80012e8 <OPENBL_USART_SendByte>
}
 800663a:	e032      	b.n	80066a2 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
          if (special_cmd->SizeBuffer2 != 0U)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006642:	2b00      	cmp	r3, #0
 8006644:	d019      	beq.n	800667a <OPENBL_USART_ExtendedSpecialCommand+0x176>
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8006646:	2300      	movs	r3, #0
 8006648:	81fb      	strh	r3, [r7, #14]
 800664a:	e010      	b.n	800666e <OPENBL_USART_ExtendedSpecialCommand+0x16a>
              data                        = OPENBL_USART_ReadByte();
 800664c:	f7fa fe38 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006650:	4603      	mov	r3, r0
 8006652:	71fb      	strb	r3, [r7, #7]
              special_cmd->Buffer2[index] = data;
 8006654:	89fb      	ldrh	r3, [r7, #14]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	4413      	add	r3, r2
 800665a:	79fa      	ldrb	r2, [r7, #7]
 800665c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
              xor                        ^= data;
 8006660:	7b7a      	ldrb	r2, [r7, #13]
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	4053      	eors	r3, r2
 8006666:	737b      	strb	r3, [r7, #13]
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8006668:	89fb      	ldrh	r3, [r7, #14]
 800666a:	3301      	adds	r3, #1
 800666c:	81fb      	strh	r3, [r7, #14]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006674:	89fa      	ldrh	r2, [r7, #14]
 8006676:	429a      	cmp	r2, r3
 8006678:	d3e8      	bcc.n	800664c <OPENBL_USART_ExtendedSpecialCommand+0x148>
          if (OPENBL_USART_ReadByte() != xor)
 800667a:	f7fa fe21 	bl	80012c0 <OPENBL_USART_ReadByte>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	7b7b      	ldrb	r3, [r7, #13]
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <OPENBL_USART_ExtendedSpecialCommand+0x18c>
            OPENBL_USART_SendByte(NACK_BYTE);
 8006688:	201f      	movs	r0, #31
 800668a:	f7fa fe2d 	bl	80012e8 <OPENBL_USART_SendByte>
}
 800668e:	e008      	b.n	80066a2 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
            OPENBL_USART_SendByte(ACK_BYTE);
 8006690:	2079      	movs	r0, #121	; 0x79
 8006692:	f7fa fe29 	bl	80012e8 <OPENBL_USART_SendByte>
            OPENBL_USART_SpecialCommandProcess(special_cmd);
 8006696:	68b8      	ldr	r0, [r7, #8]
 8006698:	f7fa fe3e 	bl	8001318 <OPENBL_USART_SpecialCommandProcess>
            OPENBL_USART_SendByte(ACK_BYTE);
 800669c:	2079      	movs	r0, #121	; 0x79
 800669e:	f7fa fe23 	bl	80012e8 <OPENBL_USART_SendByte>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200009ac 	.word	0x200009ac

080066b0 <OPENBL_USART_ConstructCommandsTable>:
/**
  * @brief  This function is used to construct the command list table.
  * @return Returns the number of supported commands.
  */
static uint8_t OPENBL_USART_ConstructCommandsTable(OPENBL_CommandsTypeDef *pUsartCmd)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]

  if (pUsartCmd->GetCommand != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <OPENBL_USART_ConstructCommandsTable+0x22>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GET_COMMAND;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	4a48      	ldr	r2, [pc, #288]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 80066c8:	2100      	movs	r1, #0
 80066ca:	54d1      	strb	r1, [r2, r3]
    i++;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	3301      	adds	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->GetVersion != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <OPENBL_USART_ConstructCommandsTable+0x38>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GET_VERSION;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4a42      	ldr	r2, [pc, #264]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 80066de:	2101      	movs	r1, #1
 80066e0:	54d1      	strb	r1, [r2, r3]
    i++;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	3301      	adds	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->GetID != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <OPENBL_USART_ConstructCommandsTable+0x4e>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GET_ID;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 80066f4:	2102      	movs	r1, #2
 80066f6:	54d1      	strb	r1, [r2, r3]
    i++;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	3301      	adds	r3, #1
 80066fc:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ReadMemory != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d006      	beq.n	8006714 <OPENBL_USART_ConstructCommandsTable+0x64>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_READ_MEMORY;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	4a37      	ldr	r2, [pc, #220]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 800670a:	2111      	movs	r1, #17
 800670c:	54d1      	strb	r1, [r2, r3]
    i++;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	3301      	adds	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->Go != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <OPENBL_USART_ConstructCommandsTable+0x7a>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GO;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	4a32      	ldr	r2, [pc, #200]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006720:	2121      	movs	r1, #33	; 0x21
 8006722:	54d1      	strb	r1, [r2, r3]
    i++;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	3301      	adds	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->WriteMemory != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d006      	beq.n	8006740 <OPENBL_USART_ConstructCommandsTable+0x90>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_WRITE_MEMORY;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006736:	2131      	movs	r1, #49	; 0x31
 8006738:	54d1      	strb	r1, [r2, r3]
    i++;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	3301      	adds	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->EraseMemory != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <OPENBL_USART_ConstructCommandsTable+0xa6>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_EXT_ERASE_MEMORY;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	4a27      	ldr	r2, [pc, #156]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 800674c:	2144      	movs	r1, #68	; 0x44
 800674e:	54d1      	strb	r1, [r2, r3]
    i++;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	3301      	adds	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->WriteProtect != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d006      	beq.n	800676c <OPENBL_USART_ConstructCommandsTable+0xbc>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_WRITE_PROTECT;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006762:	2163      	movs	r1, #99	; 0x63
 8006764:	54d1      	strb	r1, [r2, r3]
    i++;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	3301      	adds	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->WriteUnprotect != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	d006      	beq.n	8006782 <OPENBL_USART_ConstructCommandsTable+0xd2>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_WRITE_UNPROTECT;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006778:	2173      	movs	r1, #115	; 0x73
 800677a:	54d1      	strb	r1, [r2, r3]
    i++;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	3301      	adds	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ReadoutProtect != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d006      	beq.n	8006798 <OPENBL_USART_ConstructCommandsTable+0xe8>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_READ_PROTECT;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 800678e:	2182      	movs	r1, #130	; 0x82
 8006790:	54d1      	strb	r1, [r2, r3]
    i++;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	3301      	adds	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ReadoutUnprotect != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d006      	beq.n	80067ae <OPENBL_USART_ConstructCommandsTable+0xfe>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_READ_UNPROTECT;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 80067a4:	2192      	movs	r1, #146	; 0x92
 80067a6:	54d1      	strb	r1, [r2, r3]
    i++;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	3301      	adds	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->SpecialCommand != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d006      	beq.n	80067c4 <OPENBL_USART_ConstructCommandsTable+0x114>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_SPECIAL_COMMAND;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 80067ba:	2150      	movs	r1, #80	; 0x50
 80067bc:	54d1      	strb	r1, [r2, r3]
    i++;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	3301      	adds	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ExtendedSpecialCommand != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d006      	beq.n	80067da <OPENBL_USART_ConstructCommandsTable+0x12a>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_EXTENDED_SPECIAL_COMMAND;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	4a06      	ldr	r2, [pc, #24]	; (80067e8 <OPENBL_USART_ConstructCommandsTable+0x138>)
 80067d0:	2151      	movs	r1, #81	; 0x51
 80067d2:	54d1      	strb	r1, [r2, r3]
    i++;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	3301      	adds	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
  }

  return (i);
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	20000e38 	.word	0x20000e38

080067ec <OPENBL_USART_GetSpecialCmdOpCode>:
 * @param  OpCode Pointer to the operation code to be returned.
 * @param  CmdType Type of the command, Special command or extended special command.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
static uint8_t OPENBL_USART_GetSpecialCmdOpCode(uint16_t *OpCode, OPENBL_SpecialCmdTypeTypeDef CmdType)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint8_t xor;
  uint8_t status;
  uint8_t index;

  /* Initialize the status variable */
  status = NACK_BYTE;
 80067f8:	231f      	movs	r3, #31
 80067fa:	73fb      	strb	r3, [r7, #15]

  /* Get the command OpCode (2 bytes) */
  op_code[0] = OPENBL_USART_ReadByte(); /* Read the MSB byte */
 80067fc:	f7fa fd60 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006800:	4603      	mov	r3, r0
 8006802:	723b      	strb	r3, [r7, #8]
  op_code[1] = OPENBL_USART_ReadByte(); /* Read the LSB byte */
 8006804:	f7fa fd5c 	bl	80012c0 <OPENBL_USART_ReadByte>
 8006808:	4603      	mov	r3, r0
 800680a:	727b      	strb	r3, [r7, #9]

  /* Get the checksum */
  xor  = op_code[0];
 800680c:	7a3b      	ldrb	r3, [r7, #8]
 800680e:	737b      	strb	r3, [r7, #13]
  xor ^= op_code[1];
 8006810:	7a7a      	ldrb	r2, [r7, #9]
 8006812:	7b7b      	ldrb	r3, [r7, #13]
 8006814:	4053      	eors	r3, r2
 8006816:	737b      	strb	r3, [r7, #13]

  if (OPENBL_USART_ReadByte() != xor)
 8006818:	f7fa fd52 	bl	80012c0 <OPENBL_USART_ReadByte>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	7b7b      	ldrb	r3, [r7, #13]
 8006822:	4293      	cmp	r3, r2
 8006824:	d002      	beq.n	800682c <OPENBL_USART_GetSpecialCmdOpCode+0x40>
  {
    status = NACK_BYTE;
 8006826:	231f      	movs	r3, #31
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	e03b      	b.n	80068a4 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
  }
  else
  {
    /* Get the operation code */
    *OpCode = ((uint16_t)op_code[0] << 8) | (uint16_t)op_code[1];
 800682c:	7a3b      	ldrb	r3, [r7, #8]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	b21a      	sxth	r2, r3
 8006832:	7a7b      	ldrb	r3, [r7, #9]
 8006834:	b21b      	sxth	r3, r3
 8006836:	4313      	orrs	r3, r2
 8006838:	b21b      	sxth	r3, r3
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	801a      	strh	r2, [r3, #0]

    if (CmdType == OPENBL_SPECIAL_CMD)
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d114      	bne.n	8006870 <OPENBL_USART_GetSpecialCmdOpCode+0x84>
    {
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8006846:	2300      	movs	r3, #0
 8006848:	73bb      	strb	r3, [r7, #14]
 800684a:	e00d      	b.n	8006868 <OPENBL_USART_GetSpecialCmdOpCode+0x7c>
      {
        if (SpecialCmdList[index] == *OpCode)
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <OPENBL_USART_GetSpecialCmdOpCode+0xc4>)
 8006850:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d102      	bne.n	8006862 <OPENBL_USART_GetSpecialCmdOpCode+0x76>
        {
          status = ACK_BYTE;
 800685c:	2379      	movs	r3, #121	; 0x79
 800685e:	73fb      	strb	r3, [r7, #15]
          break;
 8006860:	e020      	b.n	80068a4 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	3301      	adds	r3, #1
 8006866:	73bb      	strb	r3, [r7, #14]
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0ee      	beq.n	800684c <OPENBL_USART_GetSpecialCmdOpCode+0x60>
 800686e:	e019      	b.n	80068a4 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else if (CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d114      	bne.n	80068a0 <OPENBL_USART_GetSpecialCmdOpCode+0xb4>
    {
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8006876:	2300      	movs	r3, #0
 8006878:	73bb      	strb	r3, [r7, #14]
 800687a:	e00d      	b.n	8006898 <OPENBL_USART_GetSpecialCmdOpCode+0xac>
      {
        if (ExtendedSpecialCmdList[index] == *OpCode)
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	4a0d      	ldr	r2, [pc, #52]	; (80068b4 <OPENBL_USART_GetSpecialCmdOpCode+0xc8>)
 8006880:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d102      	bne.n	8006892 <OPENBL_USART_GetSpecialCmdOpCode+0xa6>
        {
          status = ACK_BYTE;
 800688c:	2379      	movs	r3, #121	; 0x79
 800688e:	73fb      	strb	r3, [r7, #15]
          break;
 8006890:	e008      	b.n	80068a4 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	3301      	adds	r3, #1
 8006896:	73bb      	strb	r3, [r7, #14]
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0ee      	beq.n	800687c <OPENBL_USART_GetSpecialCmdOpCode+0x90>
 800689e:	e001      	b.n	80068a4 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else
    {
      status = NACK_BYTE;
 80068a0:	231f      	movs	r3, #31
 80068a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	2000003c 	.word	0x2000003c
 80068b4:	20000040 	.word	0x20000040

080068b8 <memset>:
 80068b8:	4402      	add	r2, r0
 80068ba:	4603      	mov	r3, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <__libc_init_array>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	4d0d      	ldr	r5, [pc, #52]	; (8006900 <__libc_init_array+0x38>)
 80068cc:	4c0d      	ldr	r4, [pc, #52]	; (8006904 <__libc_init_array+0x3c>)
 80068ce:	1b64      	subs	r4, r4, r5
 80068d0:	10a4      	asrs	r4, r4, #2
 80068d2:	2600      	movs	r6, #0
 80068d4:	42a6      	cmp	r6, r4
 80068d6:	d109      	bne.n	80068ec <__libc_init_array+0x24>
 80068d8:	4d0b      	ldr	r5, [pc, #44]	; (8006908 <__libc_init_array+0x40>)
 80068da:	4c0c      	ldr	r4, [pc, #48]	; (800690c <__libc_init_array+0x44>)
 80068dc:	f000 f818 	bl	8006910 <_init>
 80068e0:	1b64      	subs	r4, r4, r5
 80068e2:	10a4      	asrs	r4, r4, #2
 80068e4:	2600      	movs	r6, #0
 80068e6:	42a6      	cmp	r6, r4
 80068e8:	d105      	bne.n	80068f6 <__libc_init_array+0x2e>
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f0:	4798      	blx	r3
 80068f2:	3601      	adds	r6, #1
 80068f4:	e7ee      	b.n	80068d4 <__libc_init_array+0xc>
 80068f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fa:	4798      	blx	r3
 80068fc:	3601      	adds	r6, #1
 80068fe:	e7f2      	b.n	80068e6 <__libc_init_array+0x1e>
 8006900:	08006a30 	.word	0x08006a30
 8006904:	08006a30 	.word	0x08006a30
 8006908:	08006a30 	.word	0x08006a30
 800690c:	08006a34 	.word	0x08006a34

08006910 <_init>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr

0800691c <_fini>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	bf00      	nop
 8006920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006922:	bc08      	pop	{r3}
 8006924:	469e      	mov	lr, r3
 8006926:	4770      	bx	lr

08006928 <__OPENBL_SPI_SendByte_veneer>:
 8006928:	f85f f000 	ldr.w	pc, [pc]	; 800692c <__OPENBL_SPI_SendByte_veneer+0x4>
 800692c:	20000245 	.word	0x20000245

08006930 <__OPENBL_SPI_ReadByte_veneer>:
 8006930:	f85f f000 	ldr.w	pc, [pc]	; 8006934 <__OPENBL_SPI_ReadByte_veneer+0x4>
 8006934:	200001f9 	.word	0x200001f9

08006938 <__OPENBL_SPI_IRQHandler_veneer>:
 8006938:	f85f f000 	ldr.w	pc, [pc]	; 800693c <__OPENBL_SPI_IRQHandler_veneer+0x4>
 800693c:	20000275 	.word	0x20000275

Disassembly of section .data:

20000000 <USART_Ops>:
20000000:	080011cd 08001225 0800124d 08001291     ....%...M.......
20000010:	080012e9                                ....

20000014 <SPI_Ops>:
20000014:	08000de5 08000e75 08000e9d 08000ef1     ....u...........
20000024:	08000f35                                5...

20000028 <IWDG_Ops>:
20000028:	08000845 00000000 00000000 00000000     E...............
20000038:	00000000                                ....

2000003c <SpecialCmdList>:
2000003c:	00000102                                ....

20000040 <ExtendedSpecialCmdList>:
20000040:	00000102                                ....

20000044 <EB_Descriptor>:
20000044:	1fff7400 1fff7800 00000400 00000006     .t...x..........
20000054:	08000451 00000000 00000000 00000000     Q...............
	...

20000070 <FLASH_Descriptor>:
20000070:	08000000 08040000 00040000 00000001     ................
20000080:	0800048f 080004a5 080005d5 08000625     ............%...
20000090:	0800058f 00000000 08000671              ........q...

2000009c <OB1_Descriptor>:
2000009c:	1fff7800 1fff7870 00000070 00000003     .x..px..p.......
200000ac:	080008e9 08000901 00000000 00000000     ................
	...

200000c8 <OTP_Descriptor>:
200000c8:	1fff7000 1fff7400 00000400 00000004     .p...t..........
200000d8:	08000a85 08000a9b 00000000 00000000     ................
	...

200000f4 <RAM_Descriptor>:
200000f4:	20001800 20010000 00010000 00000002     ... ... ........
20000104:	08000b99 08000baf 00000000 00000000     ................
20000114:	08000c03 00000000 00000000              ............

20000120 <ICP1_Descriptor>:
20000120:	1fff0000 1fff7000 00007000 00000005     .....p...p......
20000130:	08000fe1 00000000 00000000 00000000     ................
	...

2000014c <SystemCoreClock>:
2000014c:	003d0900                                ..=.

20000150 <uwTickPrio>:
20000150:	00000010                                ....

20000154 <uwTickFreq>:
20000154:	00000001                                ....

20000158 <OPENBL_SPI_Commands.0>:
20000158:	08005301 08005359 08005373 08005399     .S..YS..sS...S..
20000168:	0800543d 080054f5 08005559 0800558d     =T...T..YU...U..
20000178:	080055b1 08005791 0800585d 00000000     .U...W..]X......
	...
200001a0:	08005935 08005a2d                       5Y..-Z..

200001a8 <OPENBL_USART_Commands.0>:
200001a8:	08005e19 08005e71 08005e97 08005ebd     .^..q^...^...^..
200001b8:	08005f61 08006019 0800607d 080060b1     a_...`..}`...`..
200001c8:	080060d5 08006285 08006335 00000000     .`...b..5c......
	...
200001f0:	0800640d 08006505                       .d...e..

200001f8 <OPENBL_SPI_ReadByte>:
{
200001f8:	b480      	push	{r7}
200001fa:	b083      	sub	sp, #12
200001fc:	af00      	add	r7, sp, #0
  while (SpiRxNotEmpty == 0U)
200001fe:	e003      	b.n	20000208 <OPENBL_SPI_ReadByte+0x10>
    IWDG->KR = IWDG_KEY_RELOAD;
20000200:	4b0d      	ldr	r3, [pc, #52]	; (20000238 <OPENBL_SPI_ReadByte+0x40>)
20000202:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
20000206:	601a      	str	r2, [r3, #0]
  while (SpiRxNotEmpty == 0U)
20000208:	4b0c      	ldr	r3, [pc, #48]	; (2000023c <OPENBL_SPI_ReadByte+0x44>)
2000020a:	781b      	ldrb	r3, [r3, #0]
2000020c:	b2db      	uxtb	r3, r3
2000020e:	2b00      	cmp	r3, #0
20000210:	d0f6      	beq.n	20000200 <OPENBL_SPI_ReadByte+0x8>
  SpiRxNotEmpty = 0U;
20000212:	4b0a      	ldr	r3, [pc, #40]	; (2000023c <OPENBL_SPI_ReadByte+0x44>)
20000214:	2200      	movs	r2, #0
20000216:	701a      	strb	r2, [r3, #0]
  data = SPIx->DR;
20000218:	4b09      	ldr	r3, [pc, #36]	; (20000240 <OPENBL_SPI_ReadByte+0x48>)
2000021a:	68db      	ldr	r3, [r3, #12]
2000021c:	71fb      	strb	r3, [r7, #7]
  SPIx->CR2 |= SPI_CR2_RXNEIE;
2000021e:	4b08      	ldr	r3, [pc, #32]	; (20000240 <OPENBL_SPI_ReadByte+0x48>)
20000220:	685b      	ldr	r3, [r3, #4]
20000222:	4a07      	ldr	r2, [pc, #28]	; (20000240 <OPENBL_SPI_ReadByte+0x48>)
20000224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000228:	6053      	str	r3, [r2, #4]
  return data;
2000022a:	79fb      	ldrb	r3, [r7, #7]
}
2000022c:	4618      	mov	r0, r3
2000022e:	370c      	adds	r7, #12
20000230:	46bd      	mov	sp, r7
20000232:	bc80      	pop	{r7}
20000234:	4770      	bx	lr
20000236:	bf00      	nop
20000238:	40003000 	.word	0x40003000
2000023c:	200003c4 	.word	0x200003c4
20000240:	40013000 	.word	0x40013000

20000244 <OPENBL_SPI_SendByte>:
{
20000244:	b480      	push	{r7}
20000246:	b083      	sub	sp, #12
20000248:	af00      	add	r7, sp, #0
2000024a:	4603      	mov	r3, r0
2000024c:	71fb      	strb	r3, [r7, #7]
  while ((SPIx->SR & SPI_SR_TXE) == 0U)
2000024e:	bf00      	nop
20000250:	4b06      	ldr	r3, [pc, #24]	; (2000026c <OPENBL_SPI_SendByte+0x28>)
20000252:	689b      	ldr	r3, [r3, #8]
20000254:	f003 0302 	and.w	r3, r3, #2
20000258:	2b00      	cmp	r3, #0
2000025a:	d0f9      	beq.n	20000250 <OPENBL_SPI_SendByte+0xc>
  *((__IO uint8_t *)&SPIx->DR) = Byte;
2000025c:	4a04      	ldr	r2, [pc, #16]	; (20000270 <OPENBL_SPI_SendByte+0x2c>)
2000025e:	79fb      	ldrb	r3, [r7, #7]
20000260:	7013      	strb	r3, [r2, #0]
}
20000262:	bf00      	nop
20000264:	370c      	adds	r7, #12
20000266:	46bd      	mov	sp, r7
20000268:	bc80      	pop	{r7}
2000026a:	4770      	bx	lr
2000026c:	40013000 	.word	0x40013000
20000270:	4001300c 	.word	0x4001300c

20000274 <OPENBL_SPI_IRQHandler>:
{
20000274:	b580      	push	{r7, lr}
20000276:	af00      	add	r7, sp, #0
  if (((SPIx->SR & SPI_SR_OVR) == RESET)
20000278:	4b20      	ldr	r3, [pc, #128]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
2000027a:	689b      	ldr	r3, [r3, #8]
2000027c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000280:	2b00      	cmp	r3, #0
20000282:	d127      	bne.n	200002d4 <OPENBL_SPI_IRQHandler+0x60>
      && ((SPIx->SR & SPI_SR_RXNE) != RESET)
20000284:	4b1d      	ldr	r3, [pc, #116]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
20000286:	689b      	ldr	r3, [r3, #8]
20000288:	f003 0301 	and.w	r3, r3, #1
2000028c:	2b00      	cmp	r3, #0
2000028e:	d021      	beq.n	200002d4 <OPENBL_SPI_IRQHandler+0x60>
      && ((SPIx->CR2 & SPI_CR2_RXNEIE) != RESET))
20000290:	4b1a      	ldr	r3, [pc, #104]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
20000292:	685b      	ldr	r3, [r3, #4]
20000294:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000298:	2b00      	cmp	r3, #0
2000029a:	d01b      	beq.n	200002d4 <OPENBL_SPI_IRQHandler+0x60>
    if (BusyState == 0U)
2000029c:	4b18      	ldr	r3, [pc, #96]	; (20000300 <OPENBL_SPI_IRQHandler+0x8c>)
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	2b00      	cmp	r3, #0
200002a2:	d109      	bne.n	200002b8 <OPENBL_SPI_IRQHandler+0x44>
      SpiRxNotEmpty = 1U;
200002a4:	4b17      	ldr	r3, [pc, #92]	; (20000304 <OPENBL_SPI_IRQHandler+0x90>)
200002a6:	2201      	movs	r2, #1
200002a8:	701a      	strb	r2, [r3, #0]
      SPIx->CR2 &= ~ SPI_CR2_RXNEIE;
200002aa:	4b14      	ldr	r3, [pc, #80]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002ac:	685b      	ldr	r3, [r3, #4]
200002ae:	4a13      	ldr	r2, [pc, #76]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
200002b4:	6053      	str	r3, [r2, #4]
200002b6:	e00d      	b.n	200002d4 <OPENBL_SPI_IRQHandler+0x60>
      SpiRxNotEmpty = 1U;
200002b8:	4b12      	ldr	r3, [pc, #72]	; (20000304 <OPENBL_SPI_IRQHandler+0x90>)
200002ba:	2201      	movs	r2, #1
200002bc:	701a      	strb	r2, [r3, #0]
      SPIx->CR2 &= ~ SPI_CR2_RXNEIE;
200002be:	4b0f      	ldr	r3, [pc, #60]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002c0:	685b      	ldr	r3, [r3, #4]
200002c2:	4a0e      	ldr	r2, [pc, #56]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
200002c8:	6053      	str	r3, [r2, #4]
      OPENBL_SPI_SendBusyByte();
200002ca:	f000 f81d 	bl	20000308 <OPENBL_SPI_SendBusyByte>
  while (((SPIx->SR & SPI_SR_OVR) != RESET)
200002ce:	e001      	b.n	200002d4 <OPENBL_SPI_IRQHandler+0x60>
    OPENBL_SPI_ClearFlag_OVR();
200002d0:	f000 f83e 	bl	20000350 <OPENBL_SPI_ClearFlag_OVR>
  while (((SPIx->SR & SPI_SR_OVR) != RESET)
200002d4:	4b09      	ldr	r3, [pc, #36]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002d6:	689b      	ldr	r3, [r3, #8]
200002d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
         && ((SPIx->CR2 & SPI_CR2_RXNEIE) != RESET))
200002dc:	2b00      	cmp	r3, #0
200002de:	d00b      	beq.n	200002f8 <OPENBL_SPI_IRQHandler+0x84>
         && ((SPIx->SR & SPI_SR_RXNE) != RESET)
200002e0:	4b06      	ldr	r3, [pc, #24]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002e2:	689b      	ldr	r3, [r3, #8]
200002e4:	f003 0301 	and.w	r3, r3, #1
200002e8:	2b00      	cmp	r3, #0
200002ea:	d005      	beq.n	200002f8 <OPENBL_SPI_IRQHandler+0x84>
         && ((SPIx->CR2 & SPI_CR2_RXNEIE) != RESET))
200002ec:	4b03      	ldr	r3, [pc, #12]	; (200002fc <OPENBL_SPI_IRQHandler+0x88>)
200002ee:	685b      	ldr	r3, [r3, #4]
200002f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200002f4:	2b00      	cmp	r3, #0
200002f6:	d1eb      	bne.n	200002d0 <OPENBL_SPI_IRQHandler+0x5c>
}
200002f8:	bf00      	nop
200002fa:	bd80      	pop	{r7, pc}
200002fc:	40013000 	.word	0x40013000
20000300:	200003c5 	.word	0x200003c5
20000304:	200003c4 	.word	0x200003c4

20000308 <OPENBL_SPI_SendBusyByte>:
{
20000308:	b580      	push	{r7, lr}
2000030a:	af00      	add	r7, sp, #0
  while (SpiRxNotEmpty == 0U)
2000030c:	e003      	b.n	20000316 <OPENBL_SPI_SendBusyByte+0xe>
    IWDG->KR = IWDG_KEY_RELOAD;
2000030e:	4b0c      	ldr	r3, [pc, #48]	; (20000340 <OPENBL_SPI_SendBusyByte+0x38>)
20000310:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
20000314:	601a      	str	r2, [r3, #0]
  while (SpiRxNotEmpty == 0U)
20000316:	4b0b      	ldr	r3, [pc, #44]	; (20000344 <OPENBL_SPI_SendBusyByte+0x3c>)
20000318:	781b      	ldrb	r3, [r3, #0]
2000031a:	b2db      	uxtb	r3, r3
2000031c:	2b00      	cmp	r3, #0
2000031e:	d0f6      	beq.n	2000030e <OPENBL_SPI_SendBusyByte+0x6>
  SpiRxNotEmpty = 0U;
20000320:	4b08      	ldr	r3, [pc, #32]	; (20000344 <OPENBL_SPI_SendBusyByte+0x3c>)
20000322:	2200      	movs	r2, #0
20000324:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SPIx->DR) = SPI_BUSY_BYTE;
20000326:	4b08      	ldr	r3, [pc, #32]	; (20000348 <OPENBL_SPI_SendBusyByte+0x40>)
20000328:	22a5      	movs	r2, #165	; 0xa5
2000032a:	701a      	strb	r2, [r3, #0]
  OPENBL_SPI_ClearFlag_OVR();
2000032c:	f000 f810 	bl	20000350 <OPENBL_SPI_ClearFlag_OVR>
  SPIx->CR2 |= SPI_CR2_RXNEIE;
20000330:	4b06      	ldr	r3, [pc, #24]	; (2000034c <OPENBL_SPI_SendBusyByte+0x44>)
20000332:	685b      	ldr	r3, [r3, #4]
20000334:	4a05      	ldr	r2, [pc, #20]	; (2000034c <OPENBL_SPI_SendBusyByte+0x44>)
20000336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000033a:	6053      	str	r3, [r2, #4]
}
2000033c:	bf00      	nop
2000033e:	bd80      	pop	{r7, pc}
20000340:	40003000 	.word	0x40003000
20000344:	200003c4 	.word	0x200003c4
20000348:	4001300c 	.word	0x4001300c
2000034c:	40013000 	.word	0x40013000

20000350 <OPENBL_SPI_ClearFlag_OVR>:
{
20000350:	b480      	push	{r7}
20000352:	b083      	sub	sp, #12
20000354:	af00      	add	r7, sp, #0
  tmpreg = SPIx->DR;
20000356:	4b06      	ldr	r3, [pc, #24]	; (20000370 <OPENBL_SPI_ClearFlag_OVR+0x20>)
20000358:	68db      	ldr	r3, [r3, #12]
2000035a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
2000035c:	687b      	ldr	r3, [r7, #4]
  tmpreg = SPIx->SR;
2000035e:	4b04      	ldr	r3, [pc, #16]	; (20000370 <OPENBL_SPI_ClearFlag_OVR+0x20>)
20000360:	689b      	ldr	r3, [r3, #8]
20000362:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
20000364:	687b      	ldr	r3, [r7, #4]
}
20000366:	bf00      	nop
20000368:	370c      	adds	r7, #12
2000036a:	46bd      	mov	sp, r7
2000036c:	bc80      	pop	{r7}
2000036e:	4770      	bx	lr
20000370:	40013000 	.word	0x40013000
20000374:	00000000 	.word	0x00000000
