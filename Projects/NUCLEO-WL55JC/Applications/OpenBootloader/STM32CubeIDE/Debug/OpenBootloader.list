
OpenBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d18  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f40  08006f40  00020340  2**0
                  CONTENTS
  4 .ARM          00000000  08006f40  08006f40  00020340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f40  08006f40  00020340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  08006f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000ad8  20000340  08007290  00020340  2**2
                  ALLOC
 10 RAM1_region   00000000  20000e18  20000e18  00020340  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020340  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000e18  20000e18  00020e18  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002036a  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000ef41  00000000  00000000  000203ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003da5  00000000  00000000  0002f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001468  00000000  00000000  00033098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000efa  00000000  00000000  00034500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001fc6d  00000000  00000000  000353fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000183ef  00000000  00000000  00055067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000b6428  00000000  00000000  0006d456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004f34  00000000  00000000  00123880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000bd  00000000  00000000  001287b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000340 	.word	0x20000340
 8000154:	00000000 	.word	0x00000000
 8000158:	08006e24 	.word	0x08006e24

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000344 	.word	0x20000344
 8000174:	08006e24 	.word	0x08006e24

08000178 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b086      	sub	sp, #24
 800017c:	af00      	add	r7, sp, #0
             timer for example or other time source), keeping in mind that Time base
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 800017e:	f001 f95f 	bl	8001440 <HAL_Init>

  /* Configure the System clock */
  SystemClock_Config();
 8000182:	f000 f821 	bl	80001c8 <SystemClock_Config>

  OpenBootloader_Init();
 8000186:	f000 f8b7 	bl	80002f8 <OpenBootloader_Init>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]
  HAL_GPIO_WritePin(LORA_E5_3V3_EN_PORT, LORA_E5_3V3_EN_PIN, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001a2:	f002 faa3 	bl	80026ec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LORA_E5_3V3_EN_PIN;
 80001a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LORA_E5_3V3_EN_PORT, &GPIO_InitStruct);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001bc:	f002 f936 	bl	800242c <HAL_GPIO_Init>

  /* Infinite loop */
  while (1)
  {
    OpenBootloader_ProtocolDetection();
 80001c0:	f000 f8f0 	bl	80003a4 <OpenBootloader_ProtocolDetection>
 80001c4:	e7fc      	b.n	80001c0 <main+0x48>
	...

080001c8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b09a      	sub	sp, #104	; 0x68
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0320 	add.w	r3, r7, #32
 80001d2:	2248      	movs	r2, #72	; 0x48
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f006 fdf8 	bl	8006dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	615a      	str	r2, [r3, #20]
 80001ec:	619a      	str	r2, [r3, #24]

  /* Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001ee:	4b26      	ldr	r3, [pc, #152]	; (8000288 <SystemClock_Config+0xc0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001f6:	4a24      	ldr	r2, [pc, #144]	; (8000288 <SystemClock_Config+0xc0>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	4b22      	ldr	r3, [pc, #136]	; (8000288 <SystemClock_Config+0xc0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800020e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000212:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000214:	2340      	movs	r3, #64	; 0x40
 8000216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000218:	2302      	movs	r3, #2
 800021a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM            = RCC_PLLM_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN            = 6;
 8000224:	2306      	movs	r3, #6
 8000226:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 8000228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800022c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 800022e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000232:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV2;
 8000234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000238:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0320 	add.w	r3, r7, #32
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fdde 	bl	8002e00 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800024a:	f000 f82b 	bl	80002a4 <Error_Handler>
  }

  /* Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK2
 800024e:	236f      	movs	r3, #111	; 0x6f
 8000250:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000252:	2303      	movs	r3, #3
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f003 f962 	bl	8003538 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800027a:	f000 f813 	bl	80002a4 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3768      	adds	r7, #104	; 0x68
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	58000400 	.word	0x58000400

0800028c <System_DeInit>:
/**
  * @brief  This function is used to de-initialized the clock.
  * @retval None
  */
void System_DeInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  USARTx_DeInit();
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <System_DeInit+0x14>)
 8000292:	f004 f881 	bl	8004398 <LL_USART_DeInit>
  HAL_RCC_DeInit();
 8000296:	f002 fd1d 	bl	8002cd4 <HAL_RCC_DeInit>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40013800 	.word	0x40013800

080002a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <Error_Handler+0x4>

080002aa <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  while (1)
 80002ae:	e7fe      	b.n	80002ae <NMI_Handler+0x4>

080002b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <HardFault_Handler+0x4>

080002b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0
  while (1)
 80002ba:	e7fe      	b.n	80002ba <MemManage_Handler+0x4>

080002bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <BusFault_Handler+0x4>

080002c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <UsageFault_Handler+0x4>

080002c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80002f0:	f001 f906 	bl	8001500 <HAL_IncTick>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <OpenBootloader_Init>:
  * @brief  Initialize open Bootloader.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* Register USART interfaces */
  USART_Handle.p_Ops = &USART_Ops;
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <OpenBootloader_Init+0x70>)
 80002fe:	4a1b      	ldr	r2, [pc, #108]	; (800036c <OpenBootloader_Init+0x74>)
 8000300:	601a      	str	r2, [r3, #0]
  USART_Handle.p_Cmd =  OPENBL_USART_GetCommandsList();
 8000302:	f005 fff7 	bl	80062f4 <OPENBL_USART_GetCommandsList>
 8000306:	4603      	mov	r3, r0
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <OpenBootloader_Init+0x70>)
 800030a:	6053      	str	r3, [r2, #4]

  OPENBL_RegisterInterface(&USART_Handle);
 800030c:	4816      	ldr	r0, [pc, #88]	; (8000368 <OpenBootloader_Init+0x70>)
 800030e:	f004 f921 	bl	8004554 <OPENBL_RegisterInterface>


  I2C_Handle.p_Ops = &I2C_Ops;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <OpenBootloader_Init+0x78>)
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <OpenBootloader_Init+0x7c>)
 8000316:	601a      	str	r2, [r3, #0]
  I2C_Handle.p_Cmd = OPENBL_I2C_GetCommandsList();
 8000318:	f004 fd1e 	bl	8004d58 <OPENBL_I2C_GetCommandsList>
 800031c:	4603      	mov	r3, r0
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <OpenBootloader_Init+0x78>)
 8000320:	6053      	str	r3, [r2, #4]

  OPENBL_RegisterInterface(&I2C_Handle);
 8000322:	4813      	ldr	r0, [pc, #76]	; (8000370 <OpenBootloader_Init+0x78>)
 8000324:	f004 f916 	bl	8004554 <OPENBL_RegisterInterface>


  /* Register IWDG interfaces */
  IWDG_Handle.p_Ops = &IWDG_Ops;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <OpenBootloader_Init+0x80>)
 800032a:	4a14      	ldr	r2, [pc, #80]	; (800037c <OpenBootloader_Init+0x84>)
 800032c:	601a      	str	r2, [r3, #0]
  IWDG_Handle.p_Cmd = NULL;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <OpenBootloader_Init+0x80>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]

  OPENBL_RegisterInterface(&IWDG_Handle);
 8000334:	4810      	ldr	r0, [pc, #64]	; (8000378 <OpenBootloader_Init+0x80>)
 8000336:	f004 f90d 	bl	8004554 <OPENBL_RegisterInterface>

  /* Initialize interfaces */
  OPENBL_Init();
 800033a:	f004 f8bd 	bl	80044b8 <OPENBL_Init>

  /* Initialize memories */
  OPENBL_MEM_RegisterMemory(&FLASH_Descriptor);
 800033e:	4810      	ldr	r0, [pc, #64]	; (8000380 <OpenBootloader_Init+0x88>)
 8000340:	f005 fd54 	bl	8005dec <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&RAM_Descriptor);
 8000344:	480f      	ldr	r0, [pc, #60]	; (8000384 <OpenBootloader_Init+0x8c>)
 8000346:	f005 fd51 	bl	8005dec <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&ICP1_Descriptor);
 800034a:	480f      	ldr	r0, [pc, #60]	; (8000388 <OpenBootloader_Init+0x90>)
 800034c:	f005 fd4e 	bl	8005dec <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OB1_Descriptor);
 8000350:	480e      	ldr	r0, [pc, #56]	; (800038c <OpenBootloader_Init+0x94>)
 8000352:	f005 fd4b 	bl	8005dec <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&OTP_Descriptor);
 8000356:	480e      	ldr	r0, [pc, #56]	; (8000390 <OpenBootloader_Init+0x98>)
 8000358:	f005 fd48 	bl	8005dec <OPENBL_MEM_RegisterMemory>
  OPENBL_MEM_RegisterMemory(&EB_Descriptor);
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <OpenBootloader_Init+0x9c>)
 800035e:	f005 fd45 	bl	8005dec <OPENBL_MEM_RegisterMemory>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000035c 	.word	0x2000035c
 800036c:	20000000 	.word	0x20000000
 8000370:	20000364 	.word	0x20000364
 8000374:	20000014 	.word	0x20000014
 8000378:	2000036c 	.word	0x2000036c
 800037c:	20000028 	.word	0x20000028
 8000380:	20000070 	.word	0x20000070
 8000384:	200000f4 	.word	0x200000f4
 8000388:	20000120 	.word	0x20000120
 800038c:	2000009c 	.word	0x2000009c
 8000390:	200000c8 	.word	0x200000c8
 8000394:	20000044 	.word	0x20000044

08000398 <OpenBootloader_DeInit>:
  * @brief  DeInitialize open Bootloader.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_DeInit(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  System_DeInit();
 800039c:	f7ff ff76 	bl	800028c <System_DeInit>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <OpenBootloader_ProtocolDetection>:
  * @brief  This function is used to select which protocol will be used when communicating with the host.
  * @param  None.
  * @retval None.
  */
void OpenBootloader_ProtocolDetection(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  static uint32_t interface_detected = 0;

  if (interface_detected == 0)
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <OpenBootloader_ProtocolDetection+0x34>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d10a      	bne.n	80003c6 <OpenBootloader_ProtocolDetection+0x22>
  {
    interface_detected = OPENBL_InterfaceDetection();
 80003b0:	f004 f8fc 	bl	80045ac <OPENBL_InterfaceDetection>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <OpenBootloader_ProtocolDetection+0x34>)
 80003b8:	6013      	str	r3, [r2, #0]

    /* De-initialize the interfaces that are not detected */
    if (interface_detected == 1U)
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <OpenBootloader_ProtocolDetection+0x34>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d101      	bne.n	80003c6 <OpenBootloader_ProtocolDetection+0x22>
    {
      OPENBL_InterfacesDeInit();
 80003c2:	f004 f8a3 	bl	800450c <OPENBL_InterfacesDeInit>
    }
  }

  if (interface_detected == 1)
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <OpenBootloader_ProtocolDetection+0x34>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d101      	bne.n	80003d2 <OpenBootloader_ProtocolDetection+0x2e>
  {
    OPENBL_CommandProcess();
 80003ce:	f004 f921 	bl	8004614 <OPENBL_CommandProcess>
  }
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000374 	.word	0x20000374

080003dc <Common_SetMsp>:
  * @brief  Assigns the given value to the Main Stack Pointer (MSP).
  * @param  TopOfMainStack  Main Stack Pointer value to set.
  * @retval None.
  */
void Common_SetMsp(uint32_t TopOfMainStack)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f383 8808 	msr	MSP, r3
}
 80003ee:	bf00      	nop
  __set_MSP(TopOfMainStack);
}
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <Common_EnableIrq>:
/**
  * @brief  Enable IRQ Interrupts.
  * @retval None.
  */
void Common_EnableIrq(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80003fe:	b662      	cpsie	i
}
 8000400:	bf00      	nop
  __enable_irq();
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <Common_GetProtectionStatus>:
/**
  * @brief  Checks whether the target Protection Status is set or not.
  * @retval Returns SET if protection is enabled else return RESET.
  */
FlagStatus Common_GetProtectionStatus(void)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
  FlagStatus status;

  if (OPENBL_FLASH_GetReadOutProtectionLevel() != RDP_LEVEL_0)
 8000410:	f000 f8e2 	bl	80005d8 <OPENBL_FLASH_GetReadOutProtectionLevel>
 8000414:	4603      	mov	r3, r0
 8000416:	2baa      	cmp	r3, #170	; 0xaa
 8000418:	d002      	beq.n	8000420 <Common_GetProtectionStatus+0x16>
  {
    status = SET;
 800041a:	2301      	movs	r3, #1
 800041c:	71fb      	strb	r3, [r7, #7]
 800041e:	e001      	b.n	8000424 <Common_GetProtectionStatus+0x1a>
  }
  else
  {
    status = RESET;
 8000420:	2300      	movs	r3, #0
 8000422:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000424:	79fb      	ldrb	r3, [r7, #7]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <Common_SetPostProcessingCallback>:
/**
  * @brief  Register a callback function to be called at the end of commands processing.
  * @retval None.
  */
void Common_SetPostProcessingCallback(Function_Pointer Callback)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  ResetCallback = Callback;
 8000438:	4a03      	ldr	r2, [pc, #12]	; (8000448 <Common_SetPostProcessingCallback+0x18>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6013      	str	r3, [r2, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20000378 	.word	0x20000378

0800044c <Common_StartPostProcessing>:
/**
  * @brief  Start post processing task.
  * @retval None.
  */
void Common_StartPostProcessing()
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  if (ResetCallback != NULL)
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <Common_StartPostProcessing+0x1c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d005      	beq.n	8000464 <Common_StartPostProcessing+0x18>
  {
    ResetCallback();
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <Common_StartPostProcessing+0x1c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4798      	blx	r3

    /* In case there is no system reset, we must reset the callback */
    ResetCallback = NULL;
 800045e:	4b02      	ldr	r3, [pc, #8]	; (8000468 <Common_StartPostProcessing+0x1c>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
  }
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000378 	.word	0x20000378

0800046c <OPENBL_EB_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_EB_Read(uint32_t Address)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	781b      	ldrb	r3, [r3, #0]
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <OPENBL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval None.
  */
void OPENBL_FLASH_Unlock(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 8000486:	f001 f97d 	bl	8001784 <HAL_FLASH_Unlock>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}

0800048e <OPENBL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval None.
  */
void OPENBL_FLASH_Lock(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 8000492:	f001 f999 	bl	80017c8 <HAL_FLASH_Lock>
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}

0800049a <OPENBL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval None.
  */
void OPENBL_FLASH_OB_Unlock(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 800049e:	f001 f971 	bl	8001784 <HAL_FLASH_Unlock>

  HAL_FLASH_OB_Unlock();
 80004a2:	f001 f9ab 	bl	80017fc <HAL_FLASH_OB_Unlock>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}

080004aa <OPENBL_FLASH_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_FLASH_Read(uint32_t Address)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	781b      	ldrb	r3, [r3, #0]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <OPENBL_FLASH_Write>:
  * @param  pData The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_FLASH_Write(uint32_t Address, uint8_t *pData, uint32_t DataLength)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  uint32_t index;
  __ALIGNED(4) uint8_t data[FLASH_PROG_STEP_SIZE] = {0x0U};
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  uint8_t remaining;

  if ((pData != NULL) && (DataLength != 0U))
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d063      	beq.n	80005a2 <OPENBL_FLASH_Write+0xe2>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d060      	beq.n	80005a2 <OPENBL_FLASH_Write+0xe2>
  {
    /* Unlock the flash memory for write operation */
    OPENBL_FLASH_Unlock();
 80004e0:	f7ff ffcf 	bl	8000482 <OPENBL_FLASH_Unlock>

    /* Program double-word by double-word (8 bytes) */
    while ((DataLength >> 3U) > 0U)
 80004e4:	e022      	b.n	800052c <OPENBL_FLASH_Write+0x6c>
    {
      for (index = 0U; index < FLASH_PROG_STEP_SIZE; index++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
 80004ea:	e00c      	b.n	8000506 <OPENBL_FLASH_Write+0x46>
      {
        data[index] = *(pData + index);
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	4413      	add	r3, r2
 80004f2:	7819      	ldrb	r1, [r3, #0]
 80004f4:	f107 0210 	add.w	r2, r7, #16
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	4413      	add	r3, r2
 80004fc:	460a      	mov	r2, r1
 80004fe:	701a      	strb	r2, [r3, #0]
      for (index = 0U; index < FLASH_PROG_STEP_SIZE; index++)
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	3301      	adds	r3, #1
 8000504:	61fb      	str	r3, [r7, #28]
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	2b07      	cmp	r3, #7
 800050a:	d9ef      	bls.n	80004ec <OPENBL_FLASH_Write+0x2c>
      }

      OPENBL_FLASH_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)data))));
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f000 f921 	bl	800075c <OPENBL_FLASH_Program>

      Address    += FLASH_PROG_STEP_SIZE;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3308      	adds	r3, #8
 800051e:	60fb      	str	r3, [r7, #12]
      pData      += FLASH_PROG_STEP_SIZE;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	3308      	adds	r3, #8
 8000524:	60bb      	str	r3, [r7, #8]
      DataLength -= FLASH_PROG_STEP_SIZE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3b08      	subs	r3, #8
 800052a:	607b      	str	r3, [r7, #4]
    while ((DataLength >> 3U) > 0U)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1d8      	bne.n	80004e6 <OPENBL_FLASH_Write+0x26>
    }

    /* If remaining count, go back to fill the rest with 0xFF */
    if (DataLength > 0U)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d031      	beq.n	800059e <OPENBL_FLASH_Write+0xde>
    {
      remaining = FLASH_PROG_STEP_SIZE - DataLength;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f1c3 0308 	rsb	r3, r3, #8
 8000542:	76fb      	strb	r3, [r7, #27]

      /* Copy the remaining bytes */
      for (index = 0U; index < DataLength; index++)
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	e00c      	b.n	8000564 <OPENBL_FLASH_Write+0xa4>
      {
        data[index] = *(pData + index);
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	f107 0210 	add.w	r2, r7, #16
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	4413      	add	r3, r2
 800055a:	460a      	mov	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
      for (index = 0U; index < DataLength; index++)
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	3301      	adds	r3, #1
 8000562:	61fb      	str	r3, [r7, #28]
 8000564:	69fa      	ldr	r2, [r7, #28]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	d3ee      	bcc.n	800054a <OPENBL_FLASH_Write+0x8a>
      }

      /* Fill the upper bytes with 0xFF */
      for (index = 0U; index < remaining; index++)
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	e00a      	b.n	8000588 <OPENBL_FLASH_Write+0xc8>
      {
        data[index + DataLength] = 0xFFU;
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	3320      	adds	r3, #32
 800057a:	443b      	add	r3, r7
 800057c:	22ff      	movs	r2, #255	; 0xff
 800057e:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (index = 0U; index < remaining; index++)
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3301      	adds	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	7efb      	ldrb	r3, [r7, #27]
 800058a:	69fa      	ldr	r2, [r7, #28]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3f0      	bcc.n	8000572 <OPENBL_FLASH_Write+0xb2>
      }

      /* FLASH word program */
      OPENBL_FLASH_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)data))));
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000598:	68f8      	ldr	r0, [r7, #12]
 800059a:	f000 f8df 	bl	800075c <OPENBL_FLASH_Program>
    }

    /* Lock the Flash to disable the flash control register access */
    OPENBL_FLASH_Lock();
 800059e:	f7ff ff76 	bl	800048e <OPENBL_FLASH_Lock>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <OPENBL_FLASH_JumpToAddress>:
  * @brief  This function is used to jump to a given address.
  * @param  Address The address where the function will jump.
  * @retval None.
  */
void OPENBL_FLASH_JumpToAddress(uint32_t Address)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  Function_Pointer jump_to_address;

  /* De-initialize all HW resources used by the Open Bootloader to their reset values */
  OPENBL_DeInit();
 80005b2:	f003 ffa5 	bl	8004500 <OPENBL_DeInit>

  /* Enable IRQ */
  Common_EnableIrq();
 80005b6:	f7ff ff20 	bl	80003fa <Common_EnableIrq>

  jump_to_address = (Function_Pointer)(*(__IO uint32_t *)(Address + 4U));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60fb      	str	r3, [r7, #12]

  /* Initialize user application's stack pointer */
  Common_SetMsp(*(__IO uint32_t *) Address);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff08 	bl	80003dc <Common_SetMsp>

  jump_to_address();
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4798      	blx	r3
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <OPENBL_FLASH_GetReadOutProtectionLevel>:
  *         @arg OB_RDP_LEVEL_0: No protection
  *         @arg OB_RDP_LEVEL_1: Read protection of the memory
  *         @arg OB_RDP_LEVEL_2: Full chip protection
  */
uint32_t OPENBL_FLASH_GetReadOutProtectionLevel(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Get the Option bytes configuration */
  HAL_FLASHEx_OBGetConfig(&flash_ob);
 80005de:	463b      	mov	r3, r7
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fb17 	bl	8001c14 <HAL_FLASHEx_OBGetConfig>

  return flash_ob.RDPLevel;
 80005e6:	693b      	ldr	r3, [r7, #16]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <OPENBL_FLASH_SetReadOutProtectionLevel>:
  *         @arg OB_RDP_LEVEL_1: Read protection of the memory
  *         @arg OB_RDP_LEVEL_2: Full chip protection
  * @retval None.
  */
void OPENBL_FLASH_SetReadOutProtectionLevel(uint32_t Level)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  FLASH_OBProgramInitTypeDef flash_ob;

  if (Level != OB_RDP_LEVEL2)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2bcc      	cmp	r3, #204	; 0xcc
 80005fc:	d017      	beq.n	800062e <OPENBL_FLASH_SetReadOutProtectionLevel+0x3e>
  {
    flash_ob.OptionType = OPTIONBYTE_RDP;
 80005fe:	2302      	movs	r3, #2
 8000600:	60bb      	str	r3, [r7, #8]
    flash_ob.RDPLevel   = Level;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	61bb      	str	r3, [r7, #24]

    /* Unlock the FLASH registers & Option Bytes registers access */
    OPENBL_FLASH_OB_Unlock();
 8000606:	f7ff ff48 	bl	800049a <OPENBL_FLASH_OB_Unlock>

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <OPENBL_FLASH_SetReadOutProtectionLevel+0x48>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <OPENBL_FLASH_SetReadOutProtectionLevel+0x48>)
 8000610:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <OPENBL_FLASH_SetReadOutProtectionLevel+0x48>)
 8000618:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800061c:	611a      	str	r2, [r3, #16]

    /* Change the RDP level */
    HAL_FLASHEx_OBProgram(&flash_ob);
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fa5a 	bl	8001adc <HAL_FLASHEx_OBProgram>

    /* Register system reset callback */
    Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <OPENBL_FLASH_SetReadOutProtectionLevel+0x4c>)
 800062a:	f7ff ff01 	bl	8000430 <Common_SetPostProcessingCallback>
  }
}
 800062e:	bf00      	nop
 8000630:	3760      	adds	r7, #96	; 0x60
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	58004000 	.word	0x58004000
 800063c:	08000d05 	.word	0x08000d05

08000640 <OPENBL_FLASH_SetWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
ErrorStatus OPENBL_FLASH_SetWriteProtection(FunctionalState State, uint8_t *ListOfPages, uint32_t Length)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	73fb      	strb	r3, [r7, #15]
  ErrorStatus status = SUCCESS;
 800064e:	2301      	movs	r3, #1
 8000650:	75fb      	strb	r3, [r7, #23]

  if (State == ENABLE)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d107      	bne.n	8000668 <OPENBL_FLASH_SetWriteProtection+0x28>
  {
    OPENBL_FLASH_EnableWriteProtection(ListOfPages, Length);
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	68b8      	ldr	r0, [r7, #8]
 800065c:	f000 f89a 	bl	8000794 <OPENBL_FLASH_EnableWriteProtection>

    /* Register system reset callback */
    Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <OPENBL_FLASH_SetWriteProtection+0x48>)
 8000662:	f7ff fee5 	bl	8000430 <Common_SetPostProcessingCallback>
 8000666:	e00a      	b.n	800067e <OPENBL_FLASH_SetWriteProtection+0x3e>
  }
  else if (State == DISABLE)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <OPENBL_FLASH_SetWriteProtection+0x3a>
  {
    OPENBL_FLASH_DisableWriteProtection();
 800066e:	f000 f8d3 	bl	8000818 <OPENBL_FLASH_DisableWriteProtection>

    /* Register system reset callback */
    Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <OPENBL_FLASH_SetWriteProtection+0x48>)
 8000674:	f7ff fedc 	bl	8000430 <Common_SetPostProcessingCallback>
 8000678:	e001      	b.n	800067e <OPENBL_FLASH_SetWriteProtection+0x3e>
  }
  else
  {
    status = ERROR;
 800067a:	2300      	movs	r3, #0
 800067c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800067e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08000d05 	.word	0x08000d05

0800068c <OPENBL_FLASH_Erase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Erase operation done
  *          - ERROR:   Erase operation failed or the value of one parameter is not ok
  */
ErrorStatus OPENBL_FLASH_Erase(uint8_t *p_Data, uint32_t DataLength)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  uint32_t counter;
  uint32_t pages_number;
  uint32_t page_error   = 0U;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  uint32_t errors       = 0U;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  ErrorStatus status    = SUCCESS;
 800069e:	2301      	movs	r3, #1
 80006a0:	77fb      	strb	r3, [r7, #31]
  FLASH_EraseInitTypeDef erase_init_struct;

  /* Unlock the flash memory for erase operation */
  OPENBL_FLASH_Unlock();
 80006a2:	f7ff feee 	bl	8000482 <OPENBL_FLASH_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <OPENBL_FLASH_Erase+0xb4>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a25      	ldr	r2, [pc, #148]	; (8000740 <OPENBL_FLASH_Erase+0xb4>)
 80006ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <OPENBL_FLASH_Erase+0xb4>)
 80006b4:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80006b8:	611a      	str	r2, [r3, #16]

  pages_number  = (uint32_t)(*(uint16_t *)(p_Data));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	61bb      	str	r3, [r7, #24]

  /* The sector number size is 2 bytes */
  p_Data += 2U;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3302      	adds	r3, #2
 80006c4:	607b      	str	r3, [r7, #4]

  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60bb      	str	r3, [r7, #8]
  erase_init_struct.NbPages   = 1U;
 80006ca:	2301      	movs	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]

  for (counter = 0U; ((counter < pages_number) && (counter < (DataLength / 2U))) ; counter++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
 80006d2:	e01c      	b.n	800070e <OPENBL_FLASH_Erase+0x82>
  {
    erase_init_struct.Page = ((uint32_t)(*(uint16_t *)(p_Data)));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]

    if (status != ERROR)
 80006da:	7ffb      	ldrb	r3, [r7, #31]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00e      	beq.n	80006fe <OPENBL_FLASH_Erase+0x72>
    {
      if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK)
 80006e0:	f107 0214 	add.w	r2, r7, #20
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f99e 	bl	8001a2c <HAL_FLASHEx_Erase>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d005      	beq.n	8000702 <OPENBL_FLASH_Erase+0x76>
      {
        errors++;
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	3301      	adds	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	e001      	b.n	8000702 <OPENBL_FLASH_Erase+0x76>
      }
    }
    else
    {
      /* Reset the status for next erase operation */
      status = SUCCESS;
 80006fe:	2301      	movs	r3, #1
 8000700:	77fb      	strb	r3, [r7, #31]
    }

    /* The page number size is 2 bytes */
    p_Data += 2U;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3302      	adds	r3, #2
 8000706:	607b      	str	r3, [r7, #4]
  for (counter = 0U; ((counter < pages_number) && (counter < (DataLength / 2U))) ; counter++)
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	3301      	adds	r3, #1
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	429a      	cmp	r2, r3
 8000714:	d204      	bcs.n	8000720 <OPENBL_FLASH_Erase+0x94>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	085b      	lsrs	r3, r3, #1
 800071a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071c:	429a      	cmp	r2, r3
 800071e:	d3d9      	bcc.n	80006d4 <OPENBL_FLASH_Erase+0x48>
  }

  /* Lock the Flash to disable the flash control register access */
  OPENBL_FLASH_Lock();
 8000720:	f7ff feb5 	bl	800048e <OPENBL_FLASH_Lock>

  if (errors > 0)
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <OPENBL_FLASH_Erase+0xa4>
  {
    status = ERROR;
 800072a:	2300      	movs	r3, #0
 800072c:	77fb      	strb	r3, [r7, #31]
 800072e:	e001      	b.n	8000734 <OPENBL_FLASH_Erase+0xa8>
  }
  else
  {
    status = SUCCESS;
 8000730:	2301      	movs	r3, #1
 8000732:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8000734:	7ffb      	ldrb	r3, [r7, #31]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	58004000 	.word	0x58004000

08000744 <OPENBL_Enable_BusyState_Flag>:
 * @brief  This function is used to Set Flash busy state variable to activate busy state sending
 *         during flash operations
 * @retval None.
*/
void OPENBL_Enable_BusyState_Flag(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <OPENBL_Disable_BusyState_Flag>:
/**
 * @brief  This function is used to disable the send of busy state in I2C non stretch mode.
 * @retval None.
*/
void OPENBL_Disable_BusyState_Flag(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <OPENBL_FLASH_Program>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None.
  */
static void OPENBL_FLASH_Program(uint32_t Address, uint64_t Data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	e9c7 2300 	strd	r2, r3, [r7]
  /* Clear all FLASH errors flags before starting write operation */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <OPENBL_FLASH_Program+0x34>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <OPENBL_FLASH_Program+0x34>)
 800076e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <OPENBL_FLASH_Program+0x34>)
 8000776:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800077a:	611a      	str	r2, [r3, #16]

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 800077c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000780:	68f9      	ldr	r1, [r7, #12]
 8000782:	2001      	movs	r0, #1
 8000784:	f000 ffba 	bl	80016fc <HAL_FLASH_Program>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58004000 	.word	0x58004000

08000794 <OPENBL_FLASH_EnableWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
static ErrorStatus OPENBL_FLASH_EnableWriteProtection(uint8_t *ListOfPages, uint32_t Length)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09a      	sub	sp, #104	; 0x68
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  ErrorStatus status       = SUCCESS;
 800079e:	2301      	movs	r3, #1
 80007a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Unlock the FLASH registers & Option Bytes registers access */
  OPENBL_FLASH_OB_Unlock();
 80007a4:	f7ff fe79 	bl	800049a <OPENBL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <OPENBL_FLASH_EnableWriteProtection+0x80>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a19      	ldr	r2, [pc, #100]	; (8000814 <OPENBL_FLASH_EnableWriteProtection+0x80>)
 80007ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <OPENBL_FLASH_EnableWriteProtection+0x80>)
 80007b6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80007ba:	611a      	str	r2, [r3, #16]

  flash_ob.OptionType = OPTIONBYTE_WRP;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]

  /* Write protection of bank 1 area WRPA 1 area */
  if (Length >= 2U)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d90d      	bls.n	80007e2 <OPENBL_FLASH_EnableWriteProtection+0x4e>
  {
    flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAA;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
    flash_ob.WRPStartOffset = *(ListOfPages);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	617b      	str	r3, [r7, #20]
    flash_ob.WRPEndOffset   = *(ListOfPages + 1U);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	61bb      	str	r3, [r7, #24]

    HAL_FLASHEx_OBProgram(&flash_ob);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f97d 	bl	8001adc <HAL_FLASHEx_OBProgram>
  }

  /* Write protection of bank 1 area WRPA 2 area */
  if (Length >= 4U)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d90e      	bls.n	8000806 <OPENBL_FLASH_EnableWriteProtection+0x72>
  {
    flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAB;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
    flash_ob.WRPStartOffset = *(ListOfPages + 2U);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3302      	adds	r3, #2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	617b      	str	r3, [r7, #20]
    flash_ob.WRPEndOffset   = *(ListOfPages + 3U);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3303      	adds	r3, #3
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	61bb      	str	r3, [r7, #24]

    HAL_FLASHEx_OBProgram(&flash_ob);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f96b 	bl	8001adc <HAL_FLASHEx_OBProgram>
  }

  return status;
 8000806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800080a:	4618      	mov	r0, r3
 800080c:	3768      	adds	r7, #104	; 0x68
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58004000 	.word	0x58004000

08000818 <OPENBL_FLASH_DisableWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
static ErrorStatus OPENBL_FLASH_DisableWriteProtection(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b098      	sub	sp, #96	; 0x60
 800081c:	af00      	add	r7, sp, #0
  ErrorStatus status       = SUCCESS;
 800081e:	2301      	movs	r3, #1
 8000820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  FLASH_OBProgramInitTypeDef flash_ob;

  /* Unlock the FLASH registers & Option Bytes registers access */
  OPENBL_FLASH_OB_Unlock();
 8000824:	f7ff fe39 	bl	800049a <OPENBL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <OPENBL_FLASH_DisableWriteProtection+0x5c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <OPENBL_FLASH_DisableWriteProtection+0x5c>)
 800082e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <OPENBL_FLASH_DisableWriteProtection+0x5c>)
 8000836:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800083a:	611a      	str	r2, [r3, #16]

  flash_ob.OptionType = OPTIONBYTE_WRP;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]

  /* Disable write protection of bank 1 area WRPA 1 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAA;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPStartOffset = FLASH_PAGE_MAX_NUMBER;
 8000844:	237f      	movs	r3, #127	; 0x7f
 8000846:	60fb      	str	r3, [r7, #12]
  flash_ob.WRPEndOffset   = 0x00U;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]

  HAL_FLASHEx_OBProgram(&flash_ob);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f944 	bl	8001adc <HAL_FLASHEx_OBProgram>

  /* Disable write protection of bank 1 area WRPA 2 area */
  flash_ob.WRPArea        = OB_WRPAREA_BANK1_AREAB;
 8000854:	2301      	movs	r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
  flash_ob.WRPStartOffset = FLASH_PAGE_MAX_NUMBER;
 8000858:	237f      	movs	r3, #127	; 0x7f
 800085a:	60fb      	str	r3, [r7, #12]
  flash_ob.WRPEndOffset   = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]

  HAL_FLASHEx_OBProgram(&flash_ob);
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f93a 	bl	8001adc <HAL_FLASHEx_OBProgram>

  return status;
 8000868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800086c:	4618      	mov	r0, r3
 800086e:	3760      	adds	r7, #96	; 0x60
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58004000 	.word	0x58004000

08000878 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800087c:	f3bf 8f4f 	dsb	sy
}
 8000880:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <__NVIC_SystemReset+0x24>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800088a:	4904      	ldr	r1, [pc, #16]	; (800089c <__NVIC_SystemReset+0x24>)
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_SystemReset+0x28>)
 800088e:	4313      	orrs	r3, r2
 8000890:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000892:	f3bf 8f4f 	dsb	sy
}
 8000896:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <__NVIC_SystemReset+0x20>
 800089c:	e000ed00 	.word	0xe000ed00
 80008a0:	05fa0004 	.word	0x05fa0004

080008a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c8:	68fb      	ldr	r3, [r7, #12]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f8:	68fb      	ldr	r3, [r7, #12]
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f043 0201 	orr.w	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	2b02      	cmp	r3, #2
 8000934:	d101      	bne.n	800093a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	2b04      	cmp	r3, #4
 8000958:	d101      	bne.n	800095e <LL_I2C_IsActiveFlag_RXNE+0x18>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll ISR          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	2b08      	cmp	r3, #8
 800097c:	d101      	bne.n	8000982 <LL_I2C_IsActiveFlag_ADDR+0x18>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <LL_I2C_IsActiveFlag_ADDR+0x1a>
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll ICR          ADDRCF        LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f043 0208 	orr.w	r2, r3, #8
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	61da      	str	r2, [r3, #28]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	b2db      	uxtb	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80009d0:	78fa      	ldrb	r2, [r7, #3]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <OPENBL_I2C_Init>:
/**
 * @brief  This function is used to initialize the used I2C instance.
 * @retval None.
 */
static void OPENBL_I2C_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct;

  I2C_InitStruct.PeripheralMode      = LL_I2C_MODE_I2C;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.Timing              = I2C_TIMING;
 80009ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80009ee:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter        = LL_I2C_ANALOGFILTER_ENABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter       = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1         = I2C_ADDRESS;
 80009f8:	23ba      	movs	r3, #186	; 0xba
 80009fa:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge     = LL_I2C_NACK;
 80009fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a00:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize         = LL_I2C_OWNADDRESS1_7BIT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]

  LL_I2C_Init(I2Cx, &I2C_InitStruct);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <OPENBL_I2C_Init+0x40>)
 8000a0c:	f003 f8d6 	bl	8003bbc <LL_I2C_Init>
  LL_I2C_Enable(I2Cx);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <OPENBL_I2C_Init+0x40>)
 8000a12:	f7ff ff77 	bl	8000904 <LL_I2C_Enable>
}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40005800 	.word	0x40005800

08000a24 <OPENBL_I2C_Configuration>:
/**
 * @brief  This function is used to configure I2C pins and then initialize the used I2C instance.
 * @retval None.
 */
void OPENBL_I2C_Configuration(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable all resources clocks --------------------------------------------*/
  /* Enable used GPIOx clocks */
  I2Cx_GPIO_CLK_ENABLE();
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff3a 	bl	80008a4 <LL_AHB2_GRP1_EnableClock>

  /* Enable I2C clock */
  I2Cx_CLK_ENABLE();
 8000a30:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a34:	f7ff ff4e 	bl	80008d4 <LL_APB1_GRP1_EnableClock>

  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000a3e:	2312      	movs	r3, #18
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2302      	movs	r3, #2
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = I2Cx_ALTERNATE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(I2Cx_SCL_PIN_PORT, &GPIO_InitStruct);
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <OPENBL_I2C_Configuration+0x64>)
 8000a54:	f001 fcea 	bl	800242c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = I2Cx_SDA_PIN;
 8000a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2302      	movs	r3, #2
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = I2Cx_ALTERNATE;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(I2Cx_SDA_PIN_PORT, &GPIO_InitStruct);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f001 fcd9 	bl	800242c <HAL_GPIO_Init>

  OPENBL_I2C_Init();
 8000a7a:	f7ff ffb1 	bl	80009e0 <OPENBL_I2C_Init>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	48000400 	.word	0x48000400

08000a8c <OPENBL_I2C_ProtocolDetection>:
/**
 * @brief  This function is used to detect if there is any activity on I2C protocol.
 * @retval None.
 */
uint8_t OPENBL_I2C_ProtocolDetection(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* Check if the I2Cx is addressed */
  if ((I2Cx->ISR & I2C_ISR_ADDR) != 0)
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <OPENBL_I2C_ProtocolDetection+0x2c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <OPENBL_I2C_ProtocolDetection+0x18>
  {
    I2cDetected = 1U;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <OPENBL_I2C_ProtocolDetection+0x30>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e002      	b.n	8000aaa <OPENBL_I2C_ProtocolDetection+0x1e>
  }
  else
  {
    I2cDetected = 0U;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <OPENBL_I2C_ProtocolDetection+0x30>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  }

  return I2cDetected;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <OPENBL_I2C_ProtocolDetection+0x30>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	2000037c 	.word	0x2000037c

08000ac0 <OPENBL_I2C_GetCommandOpcode>:
/**
 * @brief  This function is used to get the command opcode from the host.
 * @retval Returns the command.
 */
uint8_t OPENBL_I2C_GetCommandOpcode(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  uint8_t command_opc = 0x0U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	71fb      	strb	r3, [r7, #7]

  while (LL_I2C_IsActiveFlag_ADDR(I2Cx) == 0)
 8000aca:	e001      	b.n	8000ad0 <OPENBL_I2C_GetCommandOpcode+0x10>
  {
    OPENBL_IWDG_Refresh();
 8000acc:	f000 f8f6 	bl	8000cbc <OPENBL_IWDG_Refresh>
  while (LL_I2C_IsActiveFlag_ADDR(I2Cx) == 0)
 8000ad0:	480f      	ldr	r0, [pc, #60]	; (8000b10 <OPENBL_I2C_GetCommandOpcode+0x50>)
 8000ad2:	f7ff ff4a 	bl	800096a <LL_I2C_IsActiveFlag_ADDR>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f7      	beq.n	8000acc <OPENBL_I2C_GetCommandOpcode+0xc>
  }

  LL_I2C_ClearFlag_ADDR(I2Cx);
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <OPENBL_I2C_GetCommandOpcode+0x50>)
 8000ade:	f7ff ff56 	bl	800098e <LL_I2C_ClearFlag_ADDR>

  /* Get the command opcode */
  command_opc = OPENBL_I2C_ReadByte();
 8000ae2:	f000 f817 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]

  /* Check the data integrity */
  if ((command_opc ^ OPENBL_I2C_ReadByte()) != 0xFFU)
 8000aea:	f000 f813 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4053      	eors	r3, r2
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d001      	beq.n	8000b00 <OPENBL_I2C_GetCommandOpcode+0x40>
  {
    command_opc = ERROR_COMMAND;
 8000afc:	23ec      	movs	r3, #236	; 0xec
 8000afe:	71fb      	strb	r3, [r7, #7]
  }

  OPENBL_I2C_WaitStop();
 8000b00:	f006 f9a2 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>

  return command_opc;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005800 	.word	0x40005800

08000b14 <OPENBL_I2C_ReadByte>:
/**
  * @brief  This function is used to read one byte from I2C pipe.
  * @retval Returns the read byte.
  */
uint8_t OPENBL_I2C_ReadByte(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  uint32_t timeout = 0U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]

  while (LL_I2C_IsActiveFlag_RXNE(I2Cx) == 0)
 8000b1e:	e009      	b.n	8000b34 <OPENBL_I2C_ReadByte+0x20>
  {
    OPENBL_IWDG_Refresh();
 8000b20:	f000 f8cc 	bl	8000cbc <OPENBL_IWDG_Refresh>

    if ((timeout++) >= OPENBL_I2C_TIMEOUT)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
 8000b2e:	d301      	bcc.n	8000b34 <OPENBL_I2C_ReadByte+0x20>
    {
      /* System Reset */
      NVIC_SystemReset();
 8000b30:	f7ff fea2 	bl	8000878 <__NVIC_SystemReset>
  while (LL_I2C_IsActiveFlag_RXNE(I2Cx) == 0)
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <OPENBL_I2C_ReadByte+0x3c>)
 8000b36:	f7ff ff06 	bl	8000946 <LL_I2C_IsActiveFlag_RXNE>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0ef      	beq.n	8000b20 <OPENBL_I2C_ReadByte+0xc>
    }
  }

  return LL_I2C_ReceiveData8(I2Cx);
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <OPENBL_I2C_ReadByte+0x3c>)
 8000b42:	f7ff ff33 	bl	80009ac <LL_I2C_ReceiveData8>
 8000b46:	4603      	mov	r3, r0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40005800 	.word	0x40005800

08000b54 <OPENBL_I2C_SendByte>:
  * @brief  This function is used to send one byte through I2C pipe.
  * @param  Byte The byte to be sent.
  * @retval None.
  */
void OPENBL_I2C_SendByte(uint8_t Byte)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]

  if (LL_I2C_IsActiveFlag_TXIS(I2Cx) == 0)
 8000b62:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <OPENBL_I2C_SendByte+0x50>)
 8000b64:	f7ff fedd 	bl	8000922 <LL_I2C_IsActiveFlag_TXIS>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d110      	bne.n	8000b90 <OPENBL_I2C_SendByte+0x3c>
  {
    while (LL_I2C_IsActiveFlag_TXIS(I2Cx) == 0)
 8000b6e:	e009      	b.n	8000b84 <OPENBL_I2C_SendByte+0x30>
    {
      OPENBL_IWDG_Refresh();
 8000b70:	f000 f8a4 	bl	8000cbc <OPENBL_IWDG_Refresh>

      if ((timeout++) >= OPENBL_I2C_TIMEOUT)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60fa      	str	r2, [r7, #12]
 8000b7a:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
 8000b7e:	d301      	bcc.n	8000b84 <OPENBL_I2C_SendByte+0x30>
      {
        /* System Reset */
        NVIC_SystemReset();
 8000b80:	f7ff fe7a 	bl	8000878 <__NVIC_SystemReset>
    while (LL_I2C_IsActiveFlag_TXIS(I2Cx) == 0)
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <OPENBL_I2C_SendByte+0x50>)
 8000b86:	f7ff fecc 	bl	8000922 <LL_I2C_IsActiveFlag_TXIS>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0ef      	beq.n	8000b70 <OPENBL_I2C_SendByte+0x1c>
      }
    }
  }

  LL_I2C_TransmitData8(I2Cx, Byte);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <OPENBL_I2C_SendByte+0x50>)
 8000b96:	f7ff ff15 	bl	80009c4 <LL_I2C_TransmitData8>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40005800 	.word	0x40005800

08000ba8 <OPENBL_I2C_WaitAddress>:
/**
  * @brief  This function is used to wait until the address is matched.
  * @retval None.
  */
void OPENBL_I2C_WaitAddress(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  uint32_t timeout = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]

  while (LL_I2C_IsActiveFlag_ADDR(I2Cx) == 0)
 8000bb2:	e009      	b.n	8000bc8 <OPENBL_I2C_WaitAddress+0x20>
  {
    OPENBL_IWDG_Refresh();
 8000bb4:	f000 f882 	bl	8000cbc <OPENBL_IWDG_Refresh>

    if ((timeout++) >= OPENBL_I2C_TIMEOUT)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
 8000bc2:	d301      	bcc.n	8000bc8 <OPENBL_I2C_WaitAddress+0x20>
    {
      /* System Reset */
      NVIC_SystemReset();
 8000bc4:	f7ff fe58 	bl	8000878 <__NVIC_SystemReset>
  while (LL_I2C_IsActiveFlag_ADDR(I2Cx) == 0)
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <OPENBL_I2C_WaitAddress+0x3c>)
 8000bca:	f7ff fece 	bl	800096a <LL_I2C_IsActiveFlag_ADDR>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0ef      	beq.n	8000bb4 <OPENBL_I2C_WaitAddress+0xc>
    }
  }

  LL_I2C_ClearFlag_ADDR(I2Cx);
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <OPENBL_I2C_WaitAddress+0x3c>)
 8000bd6:	f7ff feda 	bl	800098e <LL_I2C_ClearFlag_ADDR>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40005800 	.word	0x40005800

08000be8 <OPENBL_I2C_SendAcknowledgeByte>:
/**
  * @brief  This function is used to send Acknowledgment.
  * @retval None.
  */
void OPENBL_I2C_SendAcknowledgeByte(uint8_t Byte)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until address is matched */
  OPENBL_I2C_WaitAddress();
 8000bf2:	f7ff ffd9 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  /* Send ACK or NACK byte */
  OPENBL_I2C_SendByte(Byte);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffab 	bl	8000b54 <OPENBL_I2C_SendByte>

  /* Wait until NACK is detected */
  OPENBL_I2C_WaitNack();
 8000bfe:	f006 f91f 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>

  /* Wait until STOP byte is detected*/
  OPENBL_I2C_WaitStop();
 8000c02:	f006 f921 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <OPENBL_I2C_SpecialCommandProcess>:
 *         The user must define the special commands routine here.
 * @param  SpecialCmd Pointer to the OPENBL_SpecialCmdTypeDef structure.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
void OPENBL_I2C_SpecialCommandProcess(OPENBL_SpecialCmdTypeDef *SpecialCmd)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  switch (SpecialCmd->OpCode)
  {
    /* Unknown command opcode */
    default:
      if (SpecialCmd->CmdType == OPENBL_SPECIAL_CMD)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10e      	bne.n	8000c3c <OPENBL_I2C_SpecialCommandProcess+0x2e>
      {
        /* Send NULL data size */
        OPENBL_I2C_SendByte(0x00U);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ff98 	bl	8000b54 <OPENBL_I2C_SendByte>
        OPENBL_I2C_SendByte(0x00U);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ff95 	bl	8000b54 <OPENBL_I2C_SendByte>

        /* Wait for address to match */
        OPENBL_I2C_WaitAddress();
 8000c2a:	f7ff ffbd 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

        /* Send NULL status size */
        OPENBL_I2C_SendByte(0x00U);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff90 	bl	8000b54 <OPENBL_I2C_SendByte>
        OPENBL_I2C_SendByte(0x00U);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff ff8d 	bl	8000b54 <OPENBL_I2C_SendByte>
      {
        /* Send NULL status size */
        OPENBL_I2C_SendByte(0x00U);
        OPENBL_I2C_SendByte(0x00U);
      }
      break;
 8000c3a:	e009      	b.n	8000c50 <OPENBL_I2C_SpecialCommandProcess+0x42>
      else if (SpecialCmd->CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d105      	bne.n	8000c50 <OPENBL_I2C_SpecialCommandProcess+0x42>
        OPENBL_I2C_SendByte(0x00U);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff ff85 	bl	8000b54 <OPENBL_I2C_SendByte>
        OPENBL_I2C_SendByte(0x00U);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff82 	bl	8000b54 <OPENBL_I2C_SendByte>
      break;
 8000c50:	bf00      	nop
  }
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <OPENBL_Enable_BusyState_Sending>:
 * @brief  This function is used to Set Flash busy state variable to activate busy state sending
 *         during flash operations
 * @retval None.
*/
void OPENBL_Enable_BusyState_Sending(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* Enable Flash busy state sending */
  OPENBL_Enable_BusyState_Flag();
 8000c5e:	f7ff fd71 	bl	8000744 <OPENBL_Enable_BusyState_Flag>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <OPENBL_Disable_BusyState_Sending>:
/**
 * @brief  This function is used to disable the send of busy state in I2C non stretch mode.
 * @retval None.
*/
void OPENBL_Disable_BusyState_Sending(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* Disable Flash busy state sending */
  OPENBL_Disable_BusyState_Flag();
 8000c6a:	f7ff fd71 	bl	8000750 <OPENBL_Disable_BusyState_Flag>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <OPENBL_IWDG_Configuration>:
/**
  * @brief  This function is used to configure the watchdog.
  * @retval None.
  */
void OPENBL_IWDG_Configuration(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  IWDGHandle.Instance       = IWDG;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <OPENBL_IWDG_Configuration+0x40>)
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <OPENBL_IWDG_Configuration+0x44>)
 8000c7c:	601a      	str	r2, [r3, #0]
  IWDGHandle.Init.Prescaler = IWDG_PRESCALER_256;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <OPENBL_IWDG_Configuration+0x40>)
 8000c80:	2206      	movs	r2, #6
 8000c82:	605a      	str	r2, [r3, #4]
  IWDGHandle.Init.Window    = IWDG_WINDOW_DISABLE;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <OPENBL_IWDG_Configuration+0x40>)
 8000c86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c8a:	60da      	str	r2, [r3, #12]
  IWDGHandle.Init.Reload    = IWDG_KEY_RELOAD;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <OPENBL_IWDG_Configuration+0x40>)
 8000c8e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000c92:	609a      	str	r2, [r3, #8]

  /* In case the user has enabled the IWDG through HW before entering the Open Bootloader */
  IWDG->KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <OPENBL_IWDG_Configuration+0x44>)
 8000c96:	f245 5255 	movw	r2, #21845	; 0x5555
 8000c9a:	601a      	str	r2, [r3, #0]
  IWDG->PR = IWDG_PRESCALER_256;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <OPENBL_IWDG_Configuration+0x44>)
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	605a      	str	r2, [r3, #4]
  IWDG->KR = IWDG_KEY_RELOAD;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <OPENBL_IWDG_Configuration+0x44>)
 8000ca4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000ca8:	601a      	str	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000380 	.word	0x20000380
 8000cb8:	40003000 	.word	0x40003000

08000cbc <OPENBL_IWDG_Refresh>:
/**
  * @brief  This function is used to refresh the watchdog.
  * @retval None.
  */
void OPENBL_IWDG_Refresh(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Refresh IWDG: reload counter */
  if (HAL_IWDG_Refresh(&IWDGHandle) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <OPENBL_IWDG_Refresh+0x18>)
 8000cc2:	f001 fd2a 	bl	800271a <HAL_IWDG_Refresh>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <OPENBL_IWDG_Refresh+0x14>
  {
    Error_Handler();
 8000ccc:	f7ff faea 	bl	80002a4 <Error_Handler>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000380 	.word	0x20000380

08000cd8 <__NVIC_SystemReset>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000cdc:	f3bf 8f4f 	dsb	sy
}
 8000ce0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <__NVIC_SystemReset+0x24>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cea:	4904      	ldr	r1, [pc, #16]	; (8000cfc <__NVIC_SystemReset+0x24>)
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_SystemReset+0x28>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf2:	f3bf 8f4f 	dsb	sy
}
 8000cf6:	bf00      	nop
    __NOP();
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <__NVIC_SystemReset+0x20>
 8000cfc:	e000ed00 	.word	0xe000ed00
 8000d00:	05fa0004 	.word	0x05fa0004

08000d04 <OPENBL_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval None.
  */
void OPENBL_OB_Launch(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Set the option start bit */
  HAL_FLASH_OB_Launch();
 8000d08:	f000 fdba 	bl	8001880 <HAL_FLASH_OB_Launch>

  /* Set the option lock bit and Lock the flash */
  HAL_FLASH_OB_Lock();
 8000d0c:	f000 fd9c 	bl	8001848 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 8000d10:	f000 fd5a 	bl	80017c8 <HAL_FLASH_Lock>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <OPENBL_OB_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_OB_Read(uint32_t Address)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
	...

08000d30 <OPENBL_OB_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_OB_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t timeout = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Unlock the FLASH & Option Bytes Registers access */
  HAL_FLASH_Unlock();
 8000d40:	f000 fd20 	bl	8001784 <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 8000d44:	f000 fd5a 	bl	80017fc <HAL_FLASH_OB_Unlock>

  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a57      	ldr	r2, [pc, #348]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000d4e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b55      	ldr	r3, [pc, #340]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000d56:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000d5a:	611a      	str	r2, [r3, #16]

  /* Write USER OPT + RDP level */
  if (DataLength >= 1U)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d013      	beq.n	8000d8a <OPENBL_OB_Write+0x5a>
  {
    WRITE_REG(FLASH->OPTR, (*(Data) | (*(Data + 1U) << 8U) | (*(Data + 2U) << 16U) | (*(Data + 3U) << 24U)));
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	431a      	orrs	r2, r3
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3302      	adds	r3, #2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3303      	adds	r3, #3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	061b      	lsls	r3, r3, #24
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000d88:	621a      	str	r2, [r3, #32]
  }

  /* Write PCROP1ASR */
  if (DataLength > 8U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d904      	bls.n	8000d9a <OPENBL_OB_Write+0x6a>
  {
    WRITE_REG(FLASH->PCROP1ASR, (*(Data + 8U)));
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3308      	adds	r3, #8
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Write PCROP1AER */
  if (DataLength > 16U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b10      	cmp	r3, #16
 8000d9e:	d90a      	bls.n	8000db6 <OPENBL_OB_Write+0x86>
  {
    WRITE_REG(FLASH->PCROP1AER, (*(Data + 16U) | (*(Data + 19U) << 24U)));
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3310      	adds	r3, #16
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3313      	adds	r3, #19
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	061b      	lsls	r3, r3, #24
 8000db0:	431a      	orrs	r2, r3
 8000db2:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write WRP1AR */
  if (DataLength > 24U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b18      	cmp	r3, #24
 8000dba:	d90a      	bls.n	8000dd2 <OPENBL_OB_Write+0xa2>
  {
    WRITE_REG(FLASH->WRP1AR, (*(Data + 24U) | (*(Data + 26U) << 16U)));
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	331a      	adds	r3, #26
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Write WRP1BR */
  if (DataLength > 32U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b20      	cmp	r3, #32
 8000dd6:	d90a      	bls.n	8000dee <OPENBL_OB_Write+0xbe>
  {
    WRITE_REG(FLASH->WRP1BR, (*(Data + 32U) | (*(Data + 34U) << 16U)));
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3320      	adds	r3, #32
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3322      	adds	r3, #34	; 0x22
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	431a      	orrs	r2, r3
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Write PCROP1BSR */
  if (DataLength > 40U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b28      	cmp	r3, #40	; 0x28
 8000df2:	d904      	bls.n	8000dfe <OPENBL_OB_Write+0xce>
  {
    WRITE_REG(FLASH->PCROP1BSR, (*(Data + 40U)));
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3328      	adds	r3, #40	; 0x28
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Write PCROP1BER */
  if (DataLength > 48U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b30      	cmp	r3, #48	; 0x30
 8000e02:	d904      	bls.n	8000e0e <OPENBL_OB_Write+0xde>
  {
    WRITE_REG(FLASH->PCROP1BER, (*(Data + 48U)));
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3330      	adds	r3, #48	; 0x30
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Write IPCCBR */
  if (DataLength > 104U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b68      	cmp	r3, #104	; 0x68
 8000e12:	d913      	bls.n	8000e3c <OPENBL_OB_Write+0x10c>
  {
    WRITE_REG(FLASH->IPCCBR, (*(Data + 104U) | (*(Data + 105U) << 8U)));
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3368      	adds	r3, #104	; 0x68
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3369      	adds	r3, #105	; 0x69
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	431a      	orrs	r2, r3
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Check the BSY bit for potential FLASH on going operation */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e2a:	e007      	b.n	8000e3c <OPENBL_OB_Write+0x10c>
  {
    if ((timeout++) >= OPENBL_OB_TIMEOUT)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	617a      	str	r2, [r7, #20]
 8000e32:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8000e36:	d301      	bcc.n	8000e3c <OPENBL_OB_Write+0x10c>
    {
      NVIC_SystemReset();
 8000e38:	f7ff ff4e 	bl	8000cd8 <__NVIC_SystemReset>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d0f0      	beq.n	8000e2c <OPENBL_OB_Write+0xfc>
    }
  }
  timeout = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  /* Check the PESD bit*/
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PESD))
 8000e4e:	e007      	b.n	8000e60 <OPENBL_OB_Write+0x130>
  {
    if ((timeout++) >= OPENBL_OB_TIMEOUT)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	617a      	str	r2, [r7, #20]
 8000e56:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8000e5a:	d301      	bcc.n	8000e60 <OPENBL_OB_Write+0x130>
    {
      NVIC_SystemReset();
 8000e5c:	f7ff ff3c 	bl	8000cd8 <__NVIC_SystemReset>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PESD))
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e6c:	d0f0      	beq.n	8000e50 <OPENBL_OB_Write+0x120>
    }
  }
  timeout = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  /* Trigger options bytes programming operation */
  SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	6153      	str	r3, [r2, #20]

  /* Check the BSY bit for potential FLASH on going operation */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e7e:	e007      	b.n	8000e90 <OPENBL_OB_Write+0x160>
  {
    if ((timeout++) >= OPENBL_OB_TIMEOUT)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	617a      	str	r2, [r7, #20]
 8000e86:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8000e8a:	d301      	bcc.n	8000e90 <OPENBL_OB_Write+0x160>
    {
      NVIC_SystemReset();
 8000e8c:	f7ff ff24 	bl	8000cd8 <__NVIC_SystemReset>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <OPENBL_OB_Write+0x17c>)
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9c:	d0f0      	beq.n	8000e80 <OPENBL_OB_Write+0x150>
    }
  }

  /* Register system reset callback */
  Common_SetPostProcessingCallback(OPENBL_OB_Launch);
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <OPENBL_OB_Write+0x180>)
 8000ea0:	f7ff fac6 	bl	8000430 <Common_SetPostProcessingCallback>
}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	58004000 	.word	0x58004000
 8000eb0:	08000d05 	.word	0x08000d05

08000eb4 <OPENBL_OTP_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_OTP_Read(uint32_t Address)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <OPENBL_OTP_Write>:
  * @param  pData The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_OTP_Write(uint32_t Address, uint8_t *pData, uint32_t DataLength)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b088      	sub	sp, #32
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  uint32_t index;
  uint8_t remaining_data[OTP_PROG_STEP_SIZE] = {0x0};
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint8_t remaining;

  if ((pData != NULL) && (DataLength != 0U))
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d04f      	beq.n	8000f84 <OPENBL_OTP_Write+0xba>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d04c      	beq.n	8000f84 <OPENBL_OTP_Write+0xba>
  {
    /* Unlock the flash memory for write operation */
    HAL_FLASH_Unlock();
 8000eea:	f000 fc4b 	bl	8001784 <HAL_FLASH_Unlock>

    /* Program double-word by double-word (8 bytes) */
    while ((DataLength >> 3U) > 0U)
 8000eee:	e00e      	b.n	8000f0e <OPENBL_OTP_Write+0x44>
    {
      OPENBL_OTP_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)pData))));
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 f84a 	bl	8000f90 <OPENBL_OTP_Program>

      Address    += OTP_PROG_STEP_SIZE;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3308      	adds	r3, #8
 8000f00:	60fb      	str	r3, [r7, #12]
      pData      += OTP_PROG_STEP_SIZE;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3308      	adds	r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
      DataLength -= OTP_PROG_STEP_SIZE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	607b      	str	r3, [r7, #4]
    while ((DataLength >> 3U) > 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	08db      	lsrs	r3, r3, #3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1ec      	bne.n	8000ef0 <OPENBL_OTP_Write+0x26>
    }

    /* If remaining count, go back to fill the rest with 0xFF */
    if (DataLength > 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d031      	beq.n	8000f80 <OPENBL_OTP_Write+0xb6>
    {
      remaining = OTP_PROG_STEP_SIZE - DataLength;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f1c3 0308 	rsb	r3, r3, #8
 8000f24:	76fb      	strb	r3, [r7, #27]

      /* copy the remaining bytes */
      for (index = 0U; index < DataLength; index++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e00c      	b.n	8000f46 <OPENBL_OTP_Write+0x7c>
      {
        remaining_data[index] = *(pData + index);
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	4413      	add	r3, r2
 8000f32:	7819      	ldrb	r1, [r3, #0]
 8000f34:	f107 0210 	add.w	r2, r7, #16
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
      for (index = 0U; index < DataLength; index++)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3ee      	bcc.n	8000f2c <OPENBL_OTP_Write+0x62>
      }

      /* Fill the upper bytes with 0xFF */
      for (index = 0U; index < remaining; index++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e00a      	b.n	8000f6a <OPENBL_OTP_Write+0xa0>
      {
        remaining_data[index + DataLength] = 0xFFU;
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	3320      	adds	r3, #32
 8000f5c:	443b      	add	r3, r7
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (index = 0U; index < remaining; index++)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3301      	adds	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	7efb      	ldrb	r3, [r7, #27]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3f0      	bcc.n	8000f54 <OPENBL_OTP_Write+0x8a>
      }

      /* FLASH word program */
      OPENBL_OTP_Program(Address, (uint64_t)(*((uint64_t *)((uint32_t)remaining_data))));
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f000 f808 	bl	8000f90 <OPENBL_OTP_Program>
    }

    /* Lock the Flash to disable the flash control register access */
    HAL_FLASH_Lock();
 8000f80:	f000 fc22 	bl	80017c8 <HAL_FLASH_Lock>
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 8000f84:	f000 fc20 	bl	80017c8 <HAL_FLASH_Lock>
}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <OPENBL_OTP_Program>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None.
  */
static void OPENBL_OTP_Program(uint32_t Address, uint64_t Data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Clear all FLASH errors flags before starting write operation */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <OPENBL_OTP_Program+0x34>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <OPENBL_OTP_Program+0x34>)
 8000fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <OPENBL_OTP_Program+0x34>)
 8000faa:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000fae:	611a      	str	r2, [r3, #16]

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8000fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fba0 	bl	80016fc <HAL_FLASH_Program>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58004000 	.word	0x58004000

08000fc8 <OPENBL_RAM_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_RAM_Read(uint32_t Address)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <OPENBL_RAM_Write>:
  * @param  pData The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_RAM_Write(uint32_t Address, uint8_t *pData, uint32_t DataLength)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
  uint32_t index;
  uint32_t aligned_length = DataLength;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	613b      	str	r3, [r7, #16]

  if (aligned_length & 0x3)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <OPENBL_RAM_Write+0x24>
  {
    aligned_length = (aligned_length & 0xFCU) + 4U;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000ffe:	3304      	adds	r3, #4
 8001000:	613b      	str	r3, [r7, #16]
  }

  for (index = 0U; index < aligned_length; index += 4U)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00a      	b.n	800101e <OPENBL_RAM_Write+0x40>
  {
    *(__IO uint32_t *)(Address + index) = *(__IO uint32_t *)(pData + index);
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	4413      	add	r3, r2
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	440a      	add	r2, r1
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < aligned_length; index += 4U)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3304      	adds	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3f0      	bcc.n	8001008 <OPENBL_RAM_Write+0x2a>
  }
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <OPENBL_RAM_JumpToAddress>:
  * @brief  This function is used to jump to a given address.
  * @param  Address The address where the function will jump.
  * @retval None.
  */
void OPENBL_RAM_JumpToAddress(uint32_t Address)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  Function_Pointer jump_to_address;

  /* De-initialize all HW resources used by the Open Bootloader to their reset values */
  OPENBL_DeInit();
 800103a:	f003 fa61 	bl	8004500 <OPENBL_DeInit>

  /* Enable IRQ */
  Common_EnableIrq();
 800103e:	f7ff f9dc 	bl	80003fa <Common_EnableIrq>

  jump_to_address = (Function_Pointer)(*(__IO uint32_t *)(Address + 4U));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Initialize user application's stack pointer */
  Common_SetMsp(*(__IO uint32_t *) Address);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f9c4 	bl	80003dc <Common_SetMsp>

  jump_to_address();
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4798      	blx	r3
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <OPENBL_ICP_Read>:
  * @brief  This function is used to read data from a given address.
  * @param  Address The address to be read.
  * @retval Returns the read value.
  */
uint8_t OPENBL_ICP_Read(uint32_t Address)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <LL_AHB2_GRP1_EnableClock>:
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4013      	ands	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ec:	4013      	ands	r3, r2
 80010ee:	660b      	str	r3, [r1, #96]	; 0x60
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 0201 	bic.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <LL_USART_EnableAutoBaudRate>:
  * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_ABREN);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <LL_USART_SetAutoBaudRateMode>:
  *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
  *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	605a      	str	r2, [r3, #4]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	2b20      	cmp	r3, #32
 800118a:	d101      	bne.n	8001190 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	2b40      	cmp	r3, #64	; 0x40
 80011ae:	d101      	bne.n	80011b4 <LL_USART_IsActiveFlag_TC+0x18>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <LL_USART_IsActiveFlag_TC+0x1a>
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	b2db      	uxtb	r3, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <OPENBL_USART_Init>:
/**
 * @brief  This function is used to initialize the used USART instance.
 * @retval None.
 */
static void OPENBL_USART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct;

  USART_InitStruct.PrescalerValue      = LL_USART_PRESCALER_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
  USART_InitStruct.BaudRate            = 115200U;
 80011fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001202:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth           = LL_USART_DATAWIDTH_9B;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits            = LL_USART_STOPBITS_1;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity              = LL_USART_PARITY_EVEN;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	613b      	str	r3, [r7, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8001218:	230c      	movs	r3, #12
 800121a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.OverSampling        = LL_USART_OVERSAMPLING_16;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]

  if (IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx))
  {
    LL_USART_EnableAutoBaudRate(USARTx);
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <OPENBL_USART_Init+0x54>)
 8001222:	f7ff ff88 	bl	8001136 <LL_USART_EnableAutoBaudRate>
    LL_USART_SetAutoBaudRateMode(USARTx, LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME);
 8001226:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <OPENBL_USART_Init+0x54>)
 800122c:	f7ff ff92 	bl	8001154 <LL_USART_SetAutoBaudRateMode>
  {
    LL_USART_DisableAutoBaudRate(USARTx);
    USART_InitStruct.BaudRate = 115200U;
  }

  LL_USART_Init(USARTx, &USART_InitStruct);
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <OPENBL_USART_Init+0x54>)
 8001236:	f003 f8db 	bl	80043f0 <LL_USART_Init>
  LL_USART_Enable(USARTx);
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <OPENBL_USART_Init+0x54>)
 800123c:	f7ff ff5d 	bl	80010fa <LL_USART_Enable>
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013800 	.word	0x40013800

0800124c <OPENBL_USART_Configuration>:
/**
 * @brief  This function is used to configure USART pins and then initialize the used USART instance.
 * @retval None.
 */
void OPENBL_USART_Configuration(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable all resources clocks --------------------------------------------*/
  /* Enable used GPIOx clocks */
  USARTx_GPIO_CLK_TX_ENABLE();
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff ff0f 	bl	8001076 <LL_AHB2_GRP1_EnableClock>
  USARTx_GPIO_CLK_RX_ENABLE();
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff ff0c 	bl	8001076 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  USARTx_CLK_ENABLE();
 800125e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001262:	f7ff ff20 	bl	80010a6 <LL_APB2_GRP1_EnableClock>
    +-----+-------------+
    | TX  |     PA9     |
    +-----+-------------+
    | RX  |     PA10    |
    +-----+-------------+ */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001266:	2340      	movs	r3, #64	; 0x40
 8001268:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800126e:	2301      	movs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001272:	2302      	movs	r3, #2
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = USARTx_ALTERNATE;
 8001276:	2307      	movs	r3, #7
 8001278:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <OPENBL_USART_Configuration+0x54>)
 8001280:	f001 f8d4 	bl	800242c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <OPENBL_USART_Configuration+0x54>)
 800128e:	f001 f8cd 	bl	800242c <HAL_GPIO_Init>

  OPENBL_USART_Init();
 8001292:	f7ff ffaf 	bl	80011f4 <OPENBL_USART_Init>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	48000400 	.word	0x48000400

080012a4 <OPENBL_USART_DeInit>:
/**
 * @brief  This function is used to De-initialize the USART pins and instance.
 * @retval None.
 */
void OPENBL_USART_DeInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Only de-initialize the USART if it is not the current detected interface */
  if (UsartDetected == 0U)
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <OPENBL_USART_DeInit+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d106      	bne.n	80012be <OPENBL_USART_DeInit+0x1a>
  {
    LL_USART_Disable(USARTx);
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <OPENBL_USART_DeInit+0x24>)
 80012b2:	f7ff ff31 	bl	8001118 <LL_USART_Disable>

    USARTx_CLK_DISABLE();
 80012b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012ba:	f7ff ff0c 	bl	80010d6 <LL_APB2_GRP1_DisableClock>
  }
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000390 	.word	0x20000390
 80012c8:	40013800 	.word	0x40013800

080012cc <OPENBL_USART_ProtocolDetection>:
/**
 * @brief  This function is used to detect if there is any activity on USART protocol.
 * @retval Returns 1 if interface is detected else 0.
 */
uint8_t OPENBL_USART_ProtocolDetection(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Check if the USARTx is addressed */
  if (((USARTx->ISR & LL_USART_ISR_ABRF) != 0) && ((USARTx->ISR & LL_USART_ISR_ABRE) == 0))
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <OPENBL_USART_ProtocolDetection+0x3c>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00e      	beq.n	80012fa <OPENBL_USART_ProtocolDetection+0x2e>
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <OPENBL_USART_ProtocolDetection+0x3c>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d108      	bne.n	80012fa <OPENBL_USART_ProtocolDetection+0x2e>
  {
    /* Read byte in order to flush the 0x7F synchronization byte */
    OPENBL_USART_ReadByte();
 80012e8:	f000 f82a 	bl	8001340 <OPENBL_USART_ReadByte>

    /* Acknowledge the host */
    OPENBL_USART_SendByte(ACK_BYTE);
 80012ec:	2079      	movs	r0, #121	; 0x79
 80012ee:	f000 f83b 	bl	8001368 <OPENBL_USART_SendByte>

    UsartDetected = 1U;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <OPENBL_USART_ProtocolDetection+0x40>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e002      	b.n	8001300 <OPENBL_USART_ProtocolDetection+0x34>
  }
  else
  {
    UsartDetected = 0U;
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <OPENBL_USART_ProtocolDetection+0x40>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
  }

  return UsartDetected;
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <OPENBL_USART_ProtocolDetection+0x40>)
 8001302:	781b      	ldrb	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013800 	.word	0x40013800
 800130c:	20000390 	.word	0x20000390

08001310 <OPENBL_USART_GetCommandOpcode>:
/**
 * @brief  This function is used to get the command opcode from the host.
 * @retval Returns the command.
 */
uint8_t OPENBL_USART_GetCommandOpcode(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  uint8_t command_opc;

  /* Get the command opcode */
  command_opc = OPENBL_USART_ReadByte();
 8001316:	f000 f813 	bl	8001340 <OPENBL_USART_ReadByte>
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]

  /* Check the data integrity */
  if ((command_opc ^ OPENBL_USART_ReadByte()) != 0xFFU)
 800131e:	f000 f80f 	bl	8001340 <OPENBL_USART_ReadByte>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4053      	eors	r3, r2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	d001      	beq.n	8001334 <OPENBL_USART_GetCommandOpcode+0x24>
  {
    command_opc = ERROR_COMMAND;
 8001330:	23ec      	movs	r3, #236	; 0xec
 8001332:	71fb      	strb	r3, [r7, #7]
  }

  return command_opc;
 8001334:	79fb      	ldrb	r3, [r7, #7]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <OPENBL_USART_ReadByte>:
/**
  * @brief  This function is used to read one byte from USART pipe.
  * @retval Returns the read byte.
  */
uint8_t OPENBL_USART_ReadByte(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  while (!LL_USART_IsActiveFlag_RXNE(USARTx))
 8001344:	e001      	b.n	800134a <OPENBL_USART_ReadByte+0xa>
  {
    OPENBL_IWDG_Refresh();
 8001346:	f7ff fcb9 	bl	8000cbc <OPENBL_IWDG_Refresh>
  while (!LL_USART_IsActiveFlag_RXNE(USARTx))
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <OPENBL_USART_ReadByte+0x24>)
 800134c:	f7ff ff14 	bl	8001178 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f7      	beq.n	8001346 <OPENBL_USART_ReadByte+0x6>
  }

  return LL_USART_ReceiveData8(USARTx);
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <OPENBL_USART_ReadByte+0x24>)
 8001358:	f7ff ff32 	bl	80011c0 <LL_USART_ReceiveData8>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40013800 	.word	0x40013800

08001368 <OPENBL_USART_SendByte>:
  * @brief  This function is used to send one byte through USART pipe.
  * @param  Byte The byte to be sent.
  * @retval None.
  */
void OPENBL_USART_SendByte(uint8_t Byte)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  LL_USART_TransmitData8(USARTx, (Byte & 0xFFU));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <OPENBL_USART_SendByte+0x2c>)
 8001378:	f7ff ff2e 	bl	80011d8 <LL_USART_TransmitData8>

  while (!LL_USART_IsActiveFlag_TC(USARTx))
 800137c:	bf00      	nop
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <OPENBL_USART_SendByte+0x2c>)
 8001380:	f7ff ff0c 	bl	800119c <LL_USART_IsActiveFlag_TC>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f9      	beq.n	800137e <OPENBL_USART_SendByte+0x16>
  {
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013800 	.word	0x40013800

08001398 <OPENBL_USART_SpecialCommandProcess>:
 *         The user must define the special commands routine here.
 * @param  SpecialCmd Pointer to the OPENBL_SpecialCmdTypeDef structure.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
void OPENBL_USART_SpecialCommandProcess(OPENBL_SpecialCmdTypeDef *SpecialCmd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  switch (SpecialCmd->OpCode)
  {
    /* Unknown command opcode */
    default:
      if (SpecialCmd->CmdType == OPENBL_SPECIAL_CMD)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10c      	bne.n	80013c2 <OPENBL_USART_SpecialCommandProcess+0x2a>
      {
        /* Send NULL data size */
        OPENBL_USART_SendByte(0x00U);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffdd 	bl	8001368 <OPENBL_USART_SendByte>
        OPENBL_USART_SendByte(0x00U);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff ffda 	bl	8001368 <OPENBL_USART_SendByte>

        /* Send NULL status size */
        OPENBL_USART_SendByte(0x00U);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ffd7 	bl	8001368 <OPENBL_USART_SendByte>
        OPENBL_USART_SendByte(0x00U);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff ffd4 	bl	8001368 <OPENBL_USART_SendByte>
      {
        /* Send NULL status size */
        OPENBL_USART_SendByte(0x00U);
        OPENBL_USART_SendByte(0x00U);
      }
      break;
 80013c0:	e009      	b.n	80013d6 <OPENBL_USART_SpecialCommandProcess+0x3e>
      else if (SpecialCmd->CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d105      	bne.n	80013d6 <OPENBL_USART_SpecialCommandProcess+0x3e>
        OPENBL_USART_SendByte(0x00U);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ffcc 	bl	8001368 <OPENBL_USART_SendByte>
        OPENBL_USART_SendByte(0x00U);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffc9 	bl	8001368 <OPENBL_USART_SendByte>
      break;
 80013d6:	bf00      	nop
  }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e4:	f000 f825 	bl	8001432 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	; (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800140e:	f005 fce5 	bl	8006ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7fe feb1 	bl	8000178 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   r0, =_estack
 8001418:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 8001424:	08006f50 	.word	0x08006f50
  ldr r2, =_sbss
 8001428:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 800142c:	20000e18 	.word	0x20000e18

08001430 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>

08001432 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f000 f924 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001450:	f002 fa54 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8001454:	4603      	mov	r3, r0
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <HAL_Init+0x3c>)
 8001458:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145a:	200f      	movs	r0, #15
 800145c:	f000 f816 	bl	800148c <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e001      	b.n	8001470 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800146c:	f000 f808 	bl	8001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001470:	79fb      	ldrb	r3, [r7, #7]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000014c 	.word	0x2000014c

08001480 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_InitTick+0x6c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d024      	beq.n	80014ea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a0:	f002 fa2c 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_InitTick+0x6c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f912 	bl	80016e2 <HAL_SYSTICK_Config>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10f      	bne.n	80014e4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	d809      	bhi.n	80014de <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ca:	2200      	movs	r2, #0
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	f04f 30ff 	mov.w	r0, #4294967295
 80014d2:	f000 f8ec 	bl	80016ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_InitTick+0x70>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e007      	b.n	80014ee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e004      	b.n	80014ee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000154 	.word	0x20000154
 80014fc:	20000150 	.word	0x20000150

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_IncTick+0x1c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x20>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_IncTick+0x20>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000154 	.word	0x20000154
 8001520:	20000394 	.word	0x20000394

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_GetTick+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000394 	.word	0x20000394

08001538 <__NVIC_SetPriorityGrouping>:
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_SetPriority>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff90 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff49 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff60 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff92 	bl	80015f0 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff61 	bl	800159c <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffb2 	bl	8001654 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_FLASH_Program+0x80>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_FLASH_Program+0x1a>
 8001712:	2302      	movs	r3, #2
 8001714:	e02d      	b.n	8001772 <HAL_FLASH_Program+0x76>
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_FLASH_Program+0x80>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_FLASH_Program+0x80>)
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001726:	f000 f8bb 	bl	80018a0 <FLASH_WaitForLastOperation>
 800172a:	4603      	mov	r3, r0
 800172c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d11a      	bne.n	800176a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800173a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f000 f910 	bl	8001964 <FLASH_Program_DoubleWord>
 8001744:	e004      	b.n	8001750 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f000 f930 	bl	80019b0 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001754:	f000 f8a4 	bl	80018a0 <FLASH_WaitForLastOperation>
 8001758:	4603      	mov	r3, r0
 800175a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_FLASH_Program+0x84>)
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	4906      	ldr	r1, [pc, #24]	; (8001780 <HAL_FLASH_Program+0x84>)
 8001766:	4013      	ands	r3, r2
 8001768:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <HAL_FLASH_Program+0x80>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001770:	7dfb      	ldrb	r3, [r7, #23]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000398 	.word	0x20000398
 8001780:	58004000 	.word	0x58004000

08001784 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da0b      	bge.n	80017ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_FLASH_Unlock+0x3c>)
 800179a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_FLASH_Unlock+0x40>)
 80017a0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_FLASH_Unlock+0x38>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da01      	bge.n	80017ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	58004000 	.word	0x58004000
 80017c0:	45670123 	.word	0x45670123
 80017c4:	cdef89ab 	.word	0xcdef89ab

080017c8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_FLASH_Lock+0x30>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_FLASH_Lock+0x30>)
 80017d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017dc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_FLASH_Lock+0x30>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db01      	blt.n	80017ea <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80017ea:	79fb      	ldrb	r3, [r7, #7]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58004000 	.word	0x58004000

080017fc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]

  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_FLASH_OB_Unlock+0x40>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00d      	beq.n	800182e <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_FLASH_OB_Unlock+0x40>)
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_FLASH_OB_Unlock+0x44>)
 8001816:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_FLASH_OB_Unlock+0x40>)
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_FLASH_OB_Unlock+0x48>)
 800181c:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_FLASH_OB_Unlock+0x40>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800182e:	79fb      	ldrb	r3, [r7, #7]
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	58004000 	.word	0x58004000
 8001840:	08192a3b 	.word	0x08192a3b
 8001844:	4c5d6e7f 	.word	0x4c5d6e7f

08001848 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_FLASH_OB_Lock+0x34>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_FLASH_OB_Lock+0x34>)
 8001858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800185c:	6153      	str	r3, [r2, #20]

  /* verify option bytes are lock */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_FLASH_OB_Lock+0x34>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	58004000 	.word	0x58004000

08001880 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  /* The OB launch is done from the same register either from CPU1 or CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_FLASH_OB_Launch+0x1c>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_FLASH_OB_Launch+0x1c>)
 800188a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800188e:	6153      	str	r3, [r2, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	58004000 	.word	0x58004000

080018a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff fe3c 	bl	8001524 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80018ae:	e009      	b.n	80018c4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80018b0:	f7ff fe38 	bl	8001524 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d801      	bhi.n	80018c4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e047      	b.n	8001954 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d0ee      	beq.n	80018b0 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80018ee:	4013      	ands	r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <FLASH_WaitForLastOperation+0x6c>
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001906:	4915      	ldr	r1, [pc, #84]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 8001908:	4313      	orrs	r3, r2
 800190a:	618b      	str	r3, [r1, #24]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <FLASH_WaitForLastOperation+0x80>
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800191e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00e      	beq.n	8001944 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <FLASH_WaitForLastOperation+0xc0>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e011      	b.n	8001954 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001930:	f7ff fdf8 	bl	8001524 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d801      	bhi.n	8001944 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e007      	b.n	8001954 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <FLASH_WaitForLastOperation+0xbc>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001950:	d0ee      	beq.n	8001930 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	58004000 	.word	0x58004000
 8001960:	20000398 	.word	0x20000398

08001964 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <FLASH_Program_DoubleWord+0x48>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <FLASH_Program_DoubleWord+0x48>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001982:	f3bf 8f6f 	isb	sy
}
 8001986:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	000a      	movs	r2, r1
 8001996:	2300      	movs	r3, #0
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	3104      	adds	r1, #4
 800199c:	4613      	mov	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	58004000 	.word	0x58004000

080019b0 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80019ba:	2340      	movs	r3, #64	; 0x40
 80019bc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <FLASH_Program_Fast+0x78>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <FLASH_Program_Fast+0x78>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d2:	f3ef 8310 	mrs	r3, PRIMASK
 80019d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80019d8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80019da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	3304      	adds	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3304      	adds	r3, #4
 80019f2:	617b      	str	r3, [r7, #20]
    row_index--;
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ef      	bne.n	80019e0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8001a00:	bf00      	nop
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <FLASH_Program_Fast+0x78>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d0f8      	beq.n	8001a02 <FLASH_Program_Fast+0x52>
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f383 8810 	msr	PRIMASK, r3
}
 8001a1a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001a1c:	bf00      	nop
 8001a1e:	3724      	adds	r7, #36	; 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	58004000 	.word	0x58004000

08001a2c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_FLASHEx_Erase+0xac>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_FLASHEx_Erase+0x16>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e046      	b.n	8001ad0 <HAL_FLASHEx_Erase+0xa4>
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_FLASHEx_Erase+0xac>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_FLASHEx_Erase+0xac>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a52:	f7ff ff25 	bl	80018a0 <FLASH_WaitForLastOperation>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d133      	bne.n	8001ac8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d108      	bne.n	8001a7a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8001a68:	f000 f944 	bl	8001cf4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a70:	f7ff ff16 	bl	80018a0 <FLASH_WaitForLastOperation>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e024      	b.n	8001ac4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	e012      	b.n	8001ab0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001a8a:	68b8      	ldr	r0, [r7, #8]
 8001a8c:	f000 f942 	bl	8001d14 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a94:	f7ff ff04 	bl	80018a0 <FLASH_WaitForLastOperation>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	601a      	str	r2, [r3, #0]
          break;
 8001aa8:	e00a      	b.n	8001ac0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4413      	add	r3, r2
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3e4      	bcc.n	8001a8a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001ac0:	f000 f984 	bl	8001dcc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001ac4:	f000 f93e 	bl	8001d44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_FLASHEx_Erase+0xac>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]

  return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000398 	.word	0x20000398

08001adc <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_FLASHEx_OBProgram+0x130>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_FLASHEx_OBProgram+0x14>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e089      	b.n	8001c04 <HAL_FLASHEx_OBProgram+0x128>
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_FLASHEx_OBProgram+0x130>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001af6:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <HAL_FLASHEx_OBProgram+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_FLASHEx_OBProgram+0x3e>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6858      	ldr	r0, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f000 f969 	bl	8001dec <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0306 	and.w	r3, r3, #6
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d109      	bne.n	8001b3a <HAL_FLASHEx_OBProgram+0x5e>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, pOBInit->RDPLevel);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6958      	ldr	r0, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6999      	ldr	r1, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f000 f982 	bl	8001e3c <FLASH_OB_OptrConfig>
 8001b38:	e025      	b.n	8001b86 <HAL_FLASHEx_OBProgram+0xaa>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <HAL_FLASHEx_OBProgram+0x88>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 8001b46:	f000 fb03 	bl	8002150 <FLASH_OB_GetUser>
 8001b4a:	60f8      	str	r0, [r7, #12]

    /* Remove BOR LEVEL User Type*/
    optr &= ~OB_USER_BOR_LEV;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001b52:	60fb      	str	r3, [r7, #12]

    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f96d 	bl	8001e3c <FLASH_OB_OptrConfig>
 8001b62:	e010      	b.n	8001b86 <HAL_FLASHEx_OBProgram+0xaa>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00a      	beq.n	8001b86 <HAL_FLASHEx_OBProgram+0xaa>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 8001b70:	f000 fad6 	bl	8002120 <FLASH_OB_GetRDP>
 8001b74:	60f8      	str	r0, [r7, #12]
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, optr);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6958      	ldr	r0, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f000 f95b 	bl	8001e3c <FLASH_OB_OptrConfig>
  {
    /* Do Nothing */
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01c      	beq.n	8001bcc <HAL_FLASHEx_OBProgram+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_OB_PCROP_CONFIG(pOBInit->PCROPConfig));

    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_FLASHEx_OBProgram+0x134>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <HAL_FLASHEx_OBProgram+0xd4>
    {
      /* Configure the Zone 1A Proprietary code readout protection */
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69d8      	ldr	r0, [r3, #28]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a19      	ldr	r1, [r3, #32]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	461a      	mov	r2, r3
 8001bac:	f000 f964 	bl	8001e78 <FLASH_OB_PCROP1AConfig>
    }

    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_FLASHEx_OBProgram+0xf0>
    {
      /* Configure the Zone 1B Proprietary code readout protection */
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 f98a 	bl	8001ee0 <FLASH_OB_PCROP1BConfig>
    }
  }

#if defined(DUAL_CORE)
  /*  Secure mode and CPU2 Boot Vector */
  if ((pOBInit->OptionType & (OPTIONBYTE_SECURE_MODE | OPTIONBYTE_C2_BOOT_VECT | OPTIONBYTE_C2_DEBUG_ACCESS | OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS)) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_FLASHEx_OBProgram+0x102>
  {
    /* Set the secure flash, SRAM memory start address, CPU2 boot reset vector or CPU2 debug access */
    FLASH_OB_SecureConfig(pOBInit);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f9af 	bl	8001f3c <FLASH_OB_SecureConfig>
  }

  /* IPCC mailbox data buffer address */
  if ((pOBInit->OptionType & OPTIONBYTE_IPCC_BUF_ADDR) != 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <HAL_FLASHEx_OBProgram+0x118>
  {
    /* Configure the IPCC data buffer address */
    FLASH_OB_IPCCBufferAddrConfig(pOBInit->IPCCdataBufAddr);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f992 	bl	8001f18 <FLASH_OB_IPCCBufferAddrConfig>
  }
#endif /* DUAL_CORE */

  /* Proceed the OB Write Operation */
  status = FLASH_OB_ProceedWriteOperation();
 8001bf4:	f000 fbc6 	bl	8002384 <FLASH_OB_ProceedWriteOperation>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	72fb      	strb	r3, [r7, #11]

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_FLASHEx_OBProgram+0x130>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000398 	.word	0x20000398
 8001c10:	80000001 	.word	0x80000001

08001c14 <HAL_FLASHEx_OBGetConfig>:
  *                  pOBInit->PCROPConfig should indicate which area is requested
  *                  for the WRP and PCROP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f640 721f 	movw	r2, #3871	; 0xf1f
 8001c22:	601a      	str	r2, [r3, #0]

  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_FLASHEx_OBGetConfig+0x20>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d109      	bne.n	8001c48 <HAL_FLASHEx_OBGetConfig+0x34>
  {
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6858      	ldr	r0, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0108 	add.w	r1, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	330c      	adds	r3, #12
 8001c42:	461a      	mov	r2, r3
 8001c44:	f000 fa40 	bl	80020c8 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001c48:	f000 fa6a 	bl	8002120 <FLASH_OB_GetRDP>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->UserConfig = FLASH_OB_GetUser();
 8001c52:	f000 fa7d 	bl	8002150 <FLASH_OB_GetUser>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  pOBInit->UserType = OB_USER_ALL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_FLASHEx_OBGetConfig+0xdc>)
 8001c60:	615a      	str	r2, [r3, #20]

  /* Get the Zone 1A and 1B Proprietary code readout protection */
  FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr), &(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 001c 	add.w	r0, r3, #28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f103 0120 	add.w	r1, r3, #32
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	332c      	adds	r3, #44	; 0x2c
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4623      	mov	r3, r4
 8001c82:	f000 fa7d 	bl	8002180 <FLASH_OB_GetPCROP>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f043 0203 	orr.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	61da      	str	r2, [r3, #28]

#if defined(DUAL_CORE)
  /* Get the IPCC start Address */
  pOBInit->IPCCdataBufAddr = FLASH_OB_GetIPCCBufferAddr();
 8001c92:	f000 fab1 	bl	80021f8 <FLASH_OB_GetIPCCBufferAddr>
 8001c96:	4602      	mov	r2, r0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the Secure Flash start address, Secure Hide Protection start address Secure Backup SRAM2 start address, Secure non-Backup SRAM1 start address and the Security Mode, */
  FLASH_OB_GetSecureMemoryConfig(&(pOBInit->SecureFlashStartAddr), &(pOBInit->HideProtectionStartAddr), &(pOBInit->SecureSRAM2StartAddr), &(pOBInit->SecureSRAM1StartAddr), &(pOBInit->SecureMode));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3340      	adds	r3, #64	; 0x40
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4623      	mov	r3, r4
 8001cbc:	f000 faae 	bl	800221c <FLASH_OB_GetSecureMemoryConfig>

  /* Get the M0+ Secure Boot reset vector address and Secure Boot memory selection */
  FLASH_OB_GetC2BootResetConfig(&(pOBInit->C2SecureBootVectAddr), &(pOBInit->C2BootRegion));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	334c      	adds	r3, #76	; 0x4c
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f000 fb0d 	bl	80022ec <FLASH_OB_GetC2BootResetConfig>

  /* Get the Sub-GHz radio SPI Secure Access */
  pOBInit->SUBGHZSPISecureAccess = FLASH_OB_GetSUBGHZSPISecureAccess();
 8001cd2:	f000 fb3b 	bl	800234c <FLASH_OB_GetSUBGHZSPISecureAccess>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the CPU2 Debug Access Mode */
  pOBInit->C2DebugAccessMode = FLASH_OB_GetC2DebugAccessMode();
 8001cdc:	f000 fb44 	bl	8002368 <FLASH_OB_GetC2DebugAccessMode>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* DUAL_CORE */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	cf8f7e00 	.word	0xcf8f7e00

08001cf4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <FLASH_MassErase+0x1c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <FLASH_MassErase+0x1c>)
 8001cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6153      	str	r3, [r2, #20]
#endif
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	58004000 	.word	0x58004000

08001d14 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <FLASH_PageErase+0x2c>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <FLASH_PageErase+0x2c>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6153      	str	r3, [r2, #20]
#endif
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	58004000 	.word	0x58004000

08001d44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d117      	bne.n	8001d84 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d76:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d82:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d117      	bne.n	8001dc0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001db2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <FLASH_FlushCaches+0x84>)
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	58004000 	.word	0x58004000

08001dcc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <FLASH_AcknowledgePageErase+0x1c>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <FLASH_AcknowledgePageErase+0x1c>)
 8001dd6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001dda:	f023 0302 	bic.w	r3, r3, #2
 8001dde:	6153      	str	r3, [r2, #20]
#endif
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	58004000 	.word	0x58004000

08001dec <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset Specifies the end page of the write protected area
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the Flash - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10b      	bne.n	8001e16 <FLASH_OB_WRPConfig+0x2a>
  {
    MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <FLASH_OB_WRPConfig+0x4c>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f023 127f 	bic.w	r2, r3, #8323199	; 0x7f007f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	0419      	lsls	r1, r3, #16
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <FLASH_OB_WRPConfig+0x4c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	62cb      	str	r3, [r1, #44]	; 0x2c
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
               (WRPStartOffset | (WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos)));
  }
}
 8001e14:	e00a      	b.n	8001e2c <FLASH_OB_WRPConfig+0x40>
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <FLASH_OB_WRPConfig+0x4c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f023 127f 	bic.w	r2, r3, #8323199	; 0x7f007f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0419      	lsls	r1, r3, #16
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	4904      	ldr	r1, [pc, #16]	; (8001e38 <FLASH_OB_WRPConfig+0x4c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	58004000 	.word	0x58004000

08001e3c <FLASH_OB_OptrConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @retval None
  */
#endif
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <FLASH_OB_OptrConfig+0x38>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001e54:	43db      	mvns	r3, r3
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	4904      	ldr	r1, [pc, #16]	; (8001e74 <FLASH_OB_OptrConfig+0x38>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	620b      	str	r3, [r1, #32]
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	58004000 	.word	0x58004000

08001e78 <FLASH_OB_PCROP1AConfig>:
  * @param  PCROP1AEndAddr Specifies the Zone 1A end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1AStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1AConfig(uint32_t PCROPConfig, uint32_t PCROP1AStartAddr, uint32_t PCROP1AEndAddr)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_CONFIG(PCROPConfig));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AEndAddr));

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <FLASH_OB_PCROP1AConfig+0x64>)
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	61fb      	str	r3, [r7, #28]

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d014      	beq.n	8001ebe <FLASH_OB_PCROP1AConfig+0x46>
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	61bb      	str	r3, [r7, #24]
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ea4:	0a9b      	lsrs	r3, r3, #10
 8001ea6:	617b      	str	r3, [r7, #20]

    /* Set Zone A start offset */
    WRITE_REG(FLASH->PCROP1ASR, startoffset);
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <FLASH_OB_PCROP1AConfig+0x64>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6253      	str	r3, [r2, #36]	; 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eb4:	61fb      	str	r3, [r7, #28]
    pcrop1aend |= endoffset;
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da03      	bge.n	8001ecc <FLASH_OB_PCROP1AConfig+0x54>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eca:	61fb      	str	r3, [r7, #28]
  }

  /* set 1A End register */
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <FLASH_OB_PCROP1AConfig+0x64>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	58004000 	.word	0x58004000

08001ee0 <FLASH_OB_PCROP1BConfig>:
  * @param  PCROP1BEndAddr Specifies the Zone 1B end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1BStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1BConfig(uint32_t PCROP1BStartAddr, uint32_t PCROP1BEndAddr)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BEndAddr));

  /* Compute offset depending on pcrop granularity */
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ef0:	0a9b      	lsrs	r3, r3, #10
 8001ef2:	60fb      	str	r3, [r7, #12]
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	60bb      	str	r3, [r7, #8]

  /* Configure the Proprietary code readout protection start address */
  WRITE_REG(FLASH->PCROP1BSR, startoffset);
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <FLASH_OB_PCROP1BConfig+0x34>)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6353      	str	r3, [r2, #52]	; 0x34

  /* Configure the Proprietary code readout protection end address */
  WRITE_REG(FLASH->PCROP1BER, endoffset);
 8001f04:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <FLASH_OB_PCROP1BConfig+0x34>)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	58004000 	.word	0x58004000

08001f18 <FLASH_OB_IPCCBufferAddrConfig>:
  * @param  IPCCDataBufAddr IPCC data buffer start address area in SRAM1 or SRAM2
  *         This parameter must be the double-word aligned
  * @retval None
  */
static void FLASH_OB_IPCCBufferAddrConfig(uint32_t IPCCDataBufAddr)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_IPCC_BUF_ADDR(IPCCDataBufAddr));

  /* Configure the option bytes register */
  WRITE_REG(FLASH->IPCCBR, (uint32_t)((IPCCDataBufAddr - SRAM1_BASE) >> 4));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <FLASH_OB_IPCCBufferAddrConfig+0x20>)
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	58004000 	.word	0x58004000

08001f3c <FLASH_OB_SecureConfig>:
  * @param  pOBParam Pointer to an @ref FLASH_OBProgramInitTypeDef structure that
  *         contains the configuration information for the programming
  * @retval void
  */
static void FLASH_OB_SecureConfig(FLASH_OBProgramInitTypeDef *pOBParam)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <FLASH_OB_SecureConfig+0x184>)
 8001f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4a:	60fb      	str	r3, [r7, #12]
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8001f4c:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <FLASH_OB_SecureConfig+0x184>)
 8001f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f52:	60bb      	str	r3, [r7, #8]

  if ((pOBParam->OptionType & OPTIONBYTE_SECURE_MODE) != 0U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d063      	beq.n	8002028 <FLASH_OB_SecureConfig+0xec>
    assert_param(IS_OB_SNBRSA_START_ADDR(pOBParam->SecureSRAM1StartAddr));
    assert_param(IS_OB_HDPSA_START_ADDR(pOBParam->HideProtectionStartAddr));
    assert_param(IS_OB_SECURE_MODE(pOBParam->SecureMode));

    /* Configure SFR register content with start FLASH PAGE index to secure and start FLASH PAGE index for hide protection area */
    MODIFY_REG(sfr_reg_val, (FLASH_SFR_SFSA | FLASH_SFR_HDPSA), \
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 127f 	bic.w	r2, r3, #8323199	; 0x7f007f
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f6e:	0ad9      	lsrs	r1, r3, #11
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f78:	0adb      	lsrs	r3, r3, #11
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
               ((((pOBParam->SecureFlashStartAddr - FLASH_BASE) / FLASH_PAGE_SIZE) << FLASH_SFR_SFSA_Pos) | \
                (((pOBParam->HideProtectionStartAddr - FLASH_BASE) / FLASH_PAGE_SIZE) << FLASH_SFR_HDPSA_Pos)));

    /* Configure SRRVR register */
    MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRSA | FLASH_SRRVR_SNBRSA), \
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f023 5379 	bic.w	r3, r3, #1044381696	; 0x3e400000
 8001f88:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f90:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001f94:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8001f98:	0a92      	lsrs	r2, r2, #10
 8001f9a:	0491      	lsls	r1, r2, #18
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001fa4:	0a92      	lsrs	r2, r2, #10
 8001fa6:	0652      	lsls	r2, r2, #25
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]
               (((((pOBParam->SecureSRAM2StartAddr - SRAM2_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SBRSA_Pos)) | \
                ((((pOBParam->SecureSRAM1StartAddr - SRAM1_BASE) >> SRAM_SECURE_PAGE_GRANULARITY_OFFSET) << FLASH_SRRVR_SNBRSA_Pos))));

    /* If Full System Secure mode is requested, clear all the corresponding bit */
    /* Else set the corresponding bit */
    if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d108      	bne.n	8001fc8 <FLASH_OB_SecureConfig+0x8c>
    {
      CLEAR_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f023 1380 	bic.w	r3, r3, #8388736	; 0x800080
 8001fbc:	60fb      	str	r3, [r7, #12]
      CLEAR_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f023 4381 	bic.w	r3, r3, #1082130432	; 0x40800000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	e02f      	b.n	8002028 <FLASH_OB_SecureConfig+0xec>
    }
    else if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_DISABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2bf0      	cmp	r3, #240	; 0xf0
 8001fce:	d108      	bne.n	8001fe2 <FLASH_OB_SecureConfig+0xa6>
    {
      SET_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f043 1380 	orr.w	r3, r3, #8388736	; 0x800080
 8001fd6:	60fb      	str	r3, [r7, #12]
      SET_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f043 4381 	orr.w	r3, r3, #1082130432	; 0x40800000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	e022      	b.n	8002028 <FLASH_OB_SecureConfig+0xec>
    }
    else /* Enable Secure Area bit per bit */
    {
      /* Set Flash Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001fe6:	f107 010c 	add.w	r1, r7, #12
 8001fea:	2301      	movs	r3, #1
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	f000 f9e9 	bl	80023c4 <FLASH_OB_ConfigSecureMode>

      /* Set Hide Protection Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001ff6:	f107 010c 	add.w	r1, r7, #12
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002000:	f000 f9e0 	bl	80023c4 <FLASH_OB_ConfigSecureMode>

      /* Set SRAM1 Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002008:	f107 0108 	add.w	r1, r7, #8
 800200c:	2304      	movs	r3, #4
 800200e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002012:	f000 f9d7 	bl	80023c4 <FLASH_OB_ConfigSecureMode>

      /* Set SRAM2 Area in secure if requested */
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800201a:	f107 0108 	add.w	r1, r7, #8
 800201e:	2308      	movs	r3, #8
 8002020:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002024:	f000 f9ce 	bl	80023c4 <FLASH_OB_ConfigSecureMode>
    }
  }

  /* Boot vector */
  if ((pOBParam->OptionType & OPTIONBYTE_C2_BOOT_VECT) != 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01f      	beq.n	8002074 <FLASH_OB_SecureConfig+0x138>
    /* Check the parameters */
    assert_param(IS_OB_BOOT_VECTOR_ADDR(pOBParam->C2SecureBootVectAddr));
    assert_param(IS_OB_BOOT_REGION(pOBParam->C2BootRegion));

    /* Set the boot vector */
    if (pOBParam->C2BootRegion == OB_C2_BOOT_FROM_FLASH)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800203c:	d10d      	bne.n	800205a <FLASH_OB_SecureConfig+0x11e>
    {
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <FLASH_OB_SecureConfig+0x188>)
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002048:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800204c:	0891      	lsrs	r1, r2, #2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002052:	430a      	orrs	r2, r1
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	e00c      	b.n	8002074 <FLASH_OB_SecureConfig+0x138>
    }
    else
    {
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <FLASH_OB_SecureConfig+0x188>)
 800205e:	4013      	ands	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002064:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8002068:	0891      	lsrs	r1, r2, #2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800206e:	430a      	orrs	r2, r1
 8002070:	4313      	orrs	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
    }
  }

  /* CPU2 Debug Access */
  if ((pOBParam->OptionType & OPTIONBYTE_C2_DEBUG_ACCESS) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <FLASH_OB_SecureConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_OB_C2_DEBUG_MODE(pOBParam->C2DebugAccessMode));

    /* Set the CPU2 Debug Access */
    MODIFY_REG(sfr_reg_val, FLASH_SFR_DDS, (uint32_t)pOBParam->C2DebugAccessMode);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  /* Sub-GHz radio SPI Access */
  if ((pOBParam->OptionType & OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS) != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <FLASH_OB_SecureConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_OB_SUBGHZSPI_SECURE_ACCESS(pOBParam->SUBGHZSPISecureAccess));

    /* Set the Sub-GHz radio SPI Secure Access */
    MODIFY_REG(sfr_reg_val, FLASH_SFR_SUBGHZSPISD, (uint32_t)pOBParam->SUBGHZSPISecureAccess);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  }

  /* Update Flash registers */
  WRITE_REG(FLASH->SFR, sfr_reg_val);
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <FLASH_OB_SecureConfig+0x184>)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  WRITE_REG(FLASH->SRRVR, srrvr_reg_val);
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <FLASH_OB_SecureConfig+0x184>)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	58004000 	.word	0x58004000
 80020c4:	7fff0000 	.word	0x7fff0000

080020c8 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset Specifies the address where to copied the end page of
  *                            the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <FLASH_OB_GetWRP+0x54>)
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <FLASH_OB_GetWRP+0x54>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	601a      	str	r2, [r3, #0]
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 80020f4:	e00c      	b.n	8002110 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <FLASH_OB_GetWRP+0x54>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <FLASH_OB_GetWRP+0x54>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	58004000 	.word	0x58004000

08002120 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <FLASH_OB_GetRDP+0x2c>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2baa      	cmp	r3, #170	; 0xaa
 8002132:	d004      	beq.n	800213e <FLASH_OB_GetRDP+0x1e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2bcc      	cmp	r3, #204	; 0xcc
 8002138:	d001      	beq.n	800213e <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800213a:	23bb      	movs	r3, #187	; 0xbb
 800213c:	e000      	b.n	8002140 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdplvl;
 800213e:	687b      	ldr	r3, [r7, #4]
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	58004000 	.word	0x58004000

08002150 <FLASH_OB_GetUser>:
  *         @arg @ref OB_BOOT0_RESET or @ref OB_BOOT0_SET
  *         @arg @ref OB_BOOT_LOCK_DISABLE or @ref OB_BOOT_LOCK_ENABLE
  */
#endif
static uint32_t FLASH_OB_GetUser(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <FLASH_OB_GetUser+0x28>)
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <FLASH_OB_GetUser+0x2c>)
 800215c:	4013      	ands	r3, r2
 800215e:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, (FLASH_OPTR_RDP | FLASH_OPTR_ESE));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	607b      	str	r3, [r7, #4]

  return user_config;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	58004000 	.word	0x58004000
 800217c:	cf8f7e00 	.word	0xcf8f7e00

08002180 <FLASH_OB_GetPCROP>:
  * @param PCROP1BEndAddr [out] Specifies the address where to copied the end address of
  *                       the Zone 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr, uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  uint32_t pcrop;

  pcrop             = (READ_BIT(FLASH->PCROP1BSR, FLASH_PCROP1BSR_PCROP1B_STRT));
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <FLASH_OB_GetPCROP+0x74>)
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	b2db      	uxtb	r3, r3
 8002194:	617b      	str	r3, [r7, #20]
  *PCROP1BStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	601a      	str	r2, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1BER, FLASH_PCROP1BER_PCROP1B_END));
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <FLASH_OB_GetPCROP+0x74>)
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	617b      	str	r3, [r7, #20]
  *PCROP1BEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	601a      	str	r2, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1ASR, FLASH_PCROP1ASR_PCROP1A_STRT));
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <FLASH_OB_GetPCROP+0x74>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	617b      	str	r3, [r7, #20]
  *PCROP1AStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	029b      	lsls	r3, r3, #10
 80021c2:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	601a      	str	r2, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1AER, FLASH_PCROP1AER_PCROP1A_END));
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <FLASH_OB_GetPCROP+0x74>)
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	617b      	str	r3, [r7, #20]
  *PCROP1AEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]

  *PCROPConfig      = (READ_REG(FLASH->PCROP1AER) & FLASH_PCROP1AER_PCROP_RDP);
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <FLASH_OB_GetPCROP+0x74>)
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	58004000 	.word	0x58004000

080021f8 <FLASH_OB_GetIPCCBufferAddr>:
  *           Value return between Min_Data = 0x0 and Max_Data = 0x3FFF
  *           This value correspond to the first double-word of the IPCC mailbox data buffer area
  *           in SRAM starting from 0x20000000 (SRAM1 start address to SRAM2 end address).
  */
static uint32_t FLASH_OB_GetIPCCBufferAddr(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA) << 4) + SRAM1_BASE);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <FLASH_OB_GetIPCCBufferAddr+0x1c>)
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	011a      	lsls	r2, r3, #4
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <FLASH_OB_GetIPCCBufferAddr+0x20>)
 8002204:	4013      	ands	r3, r2
 8002206:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	58004000 	.word	0x58004000
 8002218:	0003fff0 	.word	0x0003fff0

0800221c <FLASH_OB_GetSecureMemoryConfig>:
  *                               @arg @ref OB_SECURE_SRAM2_DISABLE : SRAM2 Security disabled
  *                               @arg @ref OB_SECURE_SYSTEM_AND_ALL_AREAS_ENABLE : All System Security enabled
  * @retval None
  */
static void FLASH_OB_GetSecureMemoryConfig(uint32_t *SecureFlashStartAddr, uint32_t *HideProtectionStartAddr, uint32_t *SecureSRAM2StartAddr, uint32_t *SecureSRAM1StartAddr, uint32_t *SecureMode)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <FLASH_OB_GetSecureMemoryConfig+0xcc>)
 800222c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002230:	61fb      	str	r3, [r7, #28]
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <FLASH_OB_GetSecureMemoryConfig+0xcc>)
 8002234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002238:	61bb      	str	r3, [r7, #24]

  /* Get Secure Flash start address */
  uint32_t user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002240:	617b      	str	r3, [r7, #20]

  *SecureFlashStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002248:	02da      	lsls	r2, r3, #11
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]

  /* Get Hide Protection Area start address */
  user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_HDPSA) >> FLASH_SFR_HDPSA_Pos);
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002256:	617b      	str	r3, [r7, #20]

  *HideProtectionStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800225e:	02da      	lsls	r2, r3, #11
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	601a      	str	r2, [r3, #0]

  /* Get Secure SRAM2 start address */
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SBRSA) >> FLASH_SRRVR_SBRSA_Pos);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	617b      	str	r3, [r7, #20]

  *SecureSRAM2StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2_BASE);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002276:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]

  /* Get Secure SRAM1 start address */
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SNBRSA) >> FLASH_SRRVR_SNBRSA_Pos);
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	617b      	str	r3, [r7, #20]

  *SecureSRAM1StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM1_BASE);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	029b      	lsls	r3, r3, #10
 800228c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	601a      	str	r2, [r3, #0]

  /* Get Secure Area mode */
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 8002294:	2310      	movs	r3, #16
 8002296:	2201      	movs	r2, #1
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	69f8      	ldr	r0, [r7, #28]
 800229c:	f000 f8b2 	bl	8002404 <FLASH_OB_GetSecureMode>
 80022a0:	4604      	mov	r4, r0
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 80022a2:	2320      	movs	r3, #32
 80022a4:	2202      	movs	r2, #2
 80022a6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80022aa:	69f8      	ldr	r0, [r7, #28]
 80022ac:	f000 f8aa 	bl	8002404 <FLASH_OB_GetSecureMode>
 80022b0:	4603      	mov	r3, r0
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 80022b2:	431c      	orrs	r4, r3
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 80022b4:	2340      	movs	r3, #64	; 0x40
 80022b6:	2204      	movs	r2, #4
 80022b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022bc:	69b8      	ldr	r0, [r7, #24]
 80022be:	f000 f8a1 	bl	8002404 <FLASH_OB_GetSecureMode>
 80022c2:	4603      	mov	r3, r0
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 80022c4:	431c      	orrs	r4, r3
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE, OB_SECURE_SRAM2_DISABLE));
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	2208      	movs	r2, #8
 80022ca:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80022ce:	69b8      	ldr	r0, [r7, #24]
 80022d0:	f000 f898 	bl	8002404 <FLASH_OB_GetSecureMode>
 80022d4:	4603      	mov	r3, r0
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 80022d6:	ea44 0203 	orr.w	r2, r4, r3
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	601a      	str	r2, [r3, #0]
}
 80022de:	bf00      	nop
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	58004000 	.word	0x58004000

080022ec <FLASH_OB_GetC2BootResetConfig>:
  * @param  C2BootResetVectAddr Specifies the address where to copied the CPU2 Secure Boot reset vector address
  * @param  C2BootResetRegion   Specifies the Secure Boot reset memory region
  * @retval None
  */
static void FLASH_OB_GetC2BootResetConfig(uint32_t *C2BootResetVectAddr, uint32_t *C2BootResetRegion)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  *C2BootResetRegion = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_C2OPT));
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <FLASH_OB_GetC2BootResetConfig+0x58>)
 80022f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	601a      	str	r2, [r3, #0]

  if (*C2BootResetRegion == OB_C2_BOOT_FROM_FLASH)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800230c:	d10a      	bne.n	8002324 <FLASH_OB_GetC2BootResetConfig+0x38>
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <FLASH_OB_GetC2BootResetConfig+0x58>)
 8002310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <FLASH_OB_GetC2BootResetConfig+0x5c>)
 8002318:	4013      	ands	r3, r2
 800231a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
  }
}
 8002322:	e009      	b.n	8002338 <FLASH_OB_GetC2BootResetConfig+0x4c>
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <FLASH_OB_GetC2BootResetConfig+0x58>)
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232a:	009a      	lsls	r2, r3, #2
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <FLASH_OB_GetC2BootResetConfig+0x5c>)
 800232e:	4013      	ands	r3, r2
 8002330:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58004000 	.word	0x58004000
 8002348:	0003fffc 	.word	0x0003fffc

0800234c <FLASH_OB_GetSUBGHZSPISecureAccess>:
  * @retval Returned value can be one of the following values:
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_DISABLE : Sub-GHz radio SPI Secure access disabled
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_ENABLE : Sub-GHz radio SPI Secure access enabled
  */
static uint32_t FLASH_OB_GetSUBGHZSPISecureAccess(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return (READ_BIT(FLASH->SFR, FLASH_SFR_SUBGHZSPISD));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <FLASH_OB_GetSUBGHZSPISecureAccess+0x18>)
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	58004000 	.word	0x58004000

08002368 <FLASH_OB_GetC2DebugAccessMode>:
  * @retval Returned value can be one of the following values:
  *           @arg @ref OB_C2_DEBUG_ACCESS_DISABLE : CPU2 debug access disabled
  *           @arg @ref OB_C2_DEBUG_ACCESS_ENABLE : CPU2 debug access enabled
  */
static uint32_t FLASH_OB_GetC2DebugAccessMode(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return (READ_BIT(FLASH->SFR, FLASH_SFR_DDS));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <FLASH_OB_GetC2DebugAccessMode+0x18>)
 800236e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	58004000 	.word	0x58004000

08002384 <FLASH_OB_ProceedWriteOperation>:
/**
  * @brief  Proceed the OB Write Operation.
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_ProceedWriteOperation(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800238a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800238e:	f7ff fa87 	bl	80018a0 <FLASH_WaitForLastOperation>
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]

  if (status == HAL_OK)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10b      	bne.n	80023b4 <FLASH_OB_ProceedWriteOperation+0x30>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <FLASH_OB_ProceedWriteOperation+0x3c>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <FLASH_OB_ProceedWriteOperation+0x3c>)
 80023a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a6:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ac:	f7ff fa78 	bl	80018a0 <FLASH_WaitForLastOperation>
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	58004000 	.word	0x58004000

080023c4 <FLASH_OB_ConfigSecureMode>:
  * @param Bit Bit in FLASH register to update
  * @param ValueEnable Constant to check in comparison with SecureMode as enabled
  * @retval None
  */
static void FLASH_OB_ConfigSecureMode(uint32_t SecureMode, uint32_t *Reg, uint32_t Bit, uint32_t ValueEnable)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  /* Check if SecureMode is requested */
  if ((SecureMode & ValueEnable) == ValueEnable)
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d107      	bne.n	80023ee <FLASH_OB_ConfigSecureMode+0x2a>
  {
    CLEAR_BIT(*Reg, Bit);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SET_BIT(*Reg, Bit);
  }
}
 80023ec:	e005      	b.n	80023fa <FLASH_OB_ConfigSecureMode+0x36>
    SET_BIT(*Reg, Bit);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <FLASH_OB_GetSecureMode>:
  *                               ValueEnable
  *                               ValueDisable
  *                               Null
  */
static uint32_t FLASH_OB_GetSecureMode(uint32_t Reg, uint32_t Bit, uint32_t ValueEnable, uint32_t ValueDisable)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  /* Return status of bit (set as enable, set as disable) */
  if (READ_BIT(Reg, Bit) == 0U)
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <FLASH_OB_GetSecureMode+0x1c>
  {
    return ValueEnable;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	e000      	b.n	8002422 <FLASH_OB_GetSecureMode+0x1e>
  }
  else
  {
    return ValueDisable;
 8002420:	683b      	ldr	r3, [r7, #0]
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e140      	b.n	80026be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8132 	beq.w	80026b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d005      	beq.n	800246c <HAL_GPIO_Init+0x40>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d130      	bne.n	80024ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a2:	2201      	movs	r2, #1
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0201 	and.w	r2, r3, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d017      	beq.n	800250a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d123      	bne.n	800255e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	6939      	ldr	r1, [r7, #16]
 800255a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 808c 	beq.w	80026b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025a0:	4a4e      	ldr	r2, [pc, #312]	; (80026dc <HAL_GPIO_Init+0x2b0>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ca:	d00d      	beq.n	80025e8 <HAL_GPIO_Init+0x1bc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <HAL_GPIO_Init+0x2b4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x1b8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <HAL_GPIO_Init+0x2b8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_GPIO_Init+0x1b4>
 80025dc:	2302      	movs	r3, #2
 80025de:	e004      	b.n	80025ea <HAL_GPIO_Init+0x1be>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x1be>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_GPIO_Init+0x1be>
 80025e8:	2300      	movs	r3, #0
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	f002 0203 	and.w	r2, r2, #3
 80025f0:	0092      	lsls	r2, r2, #2
 80025f2:	4093      	lsls	r3, r2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025fa:	4938      	ldr	r1, [pc, #224]	; (80026dc <HAL_GPIO_Init+0x2b0>)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800262e:	4a2e      	ldr	r2, [pc, #184]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002636:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002688:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b2:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f47f aeb7 	bne.w	800243c <HAL_GPIO_Init+0x10>
  }
}
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40010000 	.word	0x40010000
 80026e0:	48000400 	.word	0x48000400
 80026e4:	48000800 	.word	0x48000800
 80026e8:	58000800 	.word	0x58000800

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002708:	e002      	b.n	8002710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800272a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_PWR_EnableBkUpAccess+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	58000400 	.word	0x58000400

08002754 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_PWREx_GetVoltageRange+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	58000400 	.word	0x58000400

0800276c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277c:	d101      	bne.n	8002782 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	58000400 	.word	0x58000400

08002790 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800279e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027da:	d101      	bne.n	80027e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002834:	d101      	bne.n	800283a <LL_RCC_HSE_IsReady+0x18>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_RCC_HSE_IsReady+0x1a>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800286e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288e:	d101      	bne.n	8002894 <LL_RCC_HSI_IsReady+0x18>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LL_RCC_HSI_IsReady+0x1a>
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d101      	bne.n	80028de <LL_RCC_LSE_IsReady+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_RCC_LSE_IsReady+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d101      	bne.n	8002940 <LL_RCC_LSI_IsReady+0x18>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <LL_RCC_LSI_IsReady+0x1a>
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6013      	str	r3, [r2, #0]
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6013      	str	r3, [r2, #0]
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d101      	bne.n	8002998 <LL_RCC_MSI_IsReady+0x16>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_RCC_MSI_IsReady+0x18>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d101      	bne.n	80029b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 0203 	bic.w	r2, r3, #3
 8002a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b84:	6013      	str	r3, [r2, #0]
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba0:	6013      	str	r3, [r2, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bbc:	d101      	bne.n	8002bc2 <LL_RCC_PLL_IsReady+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_RCC_PLL_IsReady+0x1a>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d101      	bne.n	8002c3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5c:	d101      	bne.n	8002c62 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d101      	bne.n	8002c86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca2:	d101      	bne.n	8002ca8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc4:	d101      	bne.n	8002cca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cda:	f7fe fc23 	bl	8001524 <HAL_GetTick>
 8002cde:	6078      	str	r0, [r7, #4]

  /* Set MSION bit */
  LL_RCC_MSI_Enable();
 8002ce0:	f7ff fe33 	bl	800294a <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_DeInit+0x24>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fc1d 	bl	8001524 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_DeInit+0x24>
    {
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e074      	b.n	8002de2 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_MSI_IsReady() == 0U)
 8002cf8:	f7ff fe43 	bl	8002982 <LL_RCC_MSI_IsReady>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f1      	beq.n	8002ce6 <HAL_RCC_DeInit+0x12>
    }
  }

  /* Set MSIRANGE default value */
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8002d02:	2060      	movs	r0, #96	; 0x60
 8002d04:	f7ff fe5d 	bl	80029c2 <LL_RCC_MSI_SetRange>

  /* Set MSITRIM bits to the reset value*/
  LL_RCC_MSI_SetCalibTrimming(RCC_MSICALIBRATION_DEFAULT);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7ff fe84 	bl	8002a16 <LL_RCC_MSI_SetCalibTrimming>

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(RCC_HSICALIBRATION_DEFAULT);
 8002d0e:	2040      	movs	r0, #64	; 0x40
 8002d10:	f7ff fdc5 	bl	800289e <LL_RCC_HSI_SetCalibTrimming>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d14:	f7fe fc06 	bl	8001524 <HAL_GetTick>
 8002d18:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]

  /* Wait till MSI oscillator used as system clock */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_DeInit+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fbfe 	bl	8001524 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_DeInit+0x66>
    {
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e053      	b.n	8002de2 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8002d3a:	f7ff fe93 	bl	8002a64 <LL_RCC_GetSysClkSource>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ef      	bne.n	8002d24 <HAL_RCC_DeInit+0x50>
    }
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, PLLON, HSEPRE bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4e:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RCC_DeInit+0x118>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d54:	f7fe fbe6 	bl	8001524 <HAL_GetTick>
 8002d58:	6078      	str	r0, [r7, #4]

  /* Wait till HSE is disabled */
  while (LL_RCC_HSE_IsReady() != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fbe2 	bl	8001524 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e039      	b.n	8002de2 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_HSE_IsReady() != 0U)
 8002d6e:	f7ff fd58 	bl	8002822 <LL_RCC_HSE_IsReady>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f1      	bne.n	8002d5c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Reset HSEBYPPWR bit once HSE is OFF */
  LL_RCC_HSE_DisableTcxo();
 8002d78:	f7ff fd18 	bl	80027ac <LL_RCC_HSE_DisableTcxo>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d7c:	f7fe fbd2 	bl	8001524 <HAL_GetTick>
 8002d80:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is fully stopped */
  while (LL_RCC_PLL_IsReady() != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_DeInit+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fbce 	bl	8001524 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b0a      	cmp	r3, #10
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_DeInit+0xc2>
    {
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e025      	b.n	8002de2 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_PLL_IsReady() != 0U)
 8002d96:	f7ff ff08 	bl	8002baa <LL_RCC_PLL_IsReady>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f1      	bne.n	8002d84 <HAL_RCC_DeInit+0xb0>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, RCC_PLLCFR_RESET_VALUE);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_RCC_DeInit+0x11c>)
 8002da6:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	621a      	str	r2, [r3, #32]

  /* EXTCFGR reset*/
  WRITE_REG(RCC->EXTCFGR, RCC_EXTCFGR_RESET_VALUE);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002dc2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_DeInit+0x120>)
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <HAL_RCC_DeInit+0x124>)
 8002dca:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_DeInit+0x128>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fb5b 	bl	800148c <HAL_InitTick>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_DeInit+0x10c>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_DeInit+0x10e>
  }
  else
  {
    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	feeef4ff 	.word	0xfeeef4ff
 8002df0:	22040100 	.word	0x22040100
 8002df4:	2000014c 	.word	0x2000014c
 8002df8:	003d0900 	.word	0x003d0900
 8002dfc:	20000150 	.word	0x20000150

08002e00 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e38b      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e12:	f7ff fe27 	bl	8002a64 <LL_RCC_GetSysClkSource>
 8002e16:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e18:	f7ff fefa 	bl	8002c10 <LL_RCC_PLL_GetMainSource>
 8002e1c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80c9 	beq.w	8002fbe <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x3e>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d17b      	bne.n	8002f30 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d178      	bne.n	8002f30 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e3e:	f7ff fda0 	bl	8002982 <LL_RCC_MSI_IsReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_OscConfig+0x54>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e36a      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x72>
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e70:	e006      	b.n	8002e80 <HAL_RCC_OscConfig+0x80>
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d222      	bcs.n	8002eca <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fd4b 	bl	8003924 <RCC_SetFlashLatencyFromMSIRange>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e348      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea2:	f043 0308 	orr.w	r3, r3, #8
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fda7 	bl	8002a16 <LL_RCC_MSI_SetCalibTrimming>
 8002ec8:	e021      	b.n	8002f0e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fd8e 	bl	8002a16 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fd10 	bl	8003924 <RCC_SetFlashLatencyFromMSIRange>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e30d      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f0e:	f000 fcf5 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4aa1      	ldr	r2, [pc, #644]	; (800319c <HAL_RCC_OscConfig+0x39c>)
 8002f16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f18:	4ba1      	ldr	r3, [pc, #644]	; (80031a0 <HAL_RCC_OscConfig+0x3a0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fab5 	bl	800148c <HAL_InitTick>
 8002f22:	4603      	mov	r3, r0
 8002f24:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d047      	beq.n	8002fbc <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	e2fc      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f38:	f7ff fd07 	bl	800294a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe faf2 	bl	8001524 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f44:	f7fe faee 	bl	8001524 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e2e9      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f56:	f7ff fd14 	bl	8002982 <LL_RCC_MSI_IsReady>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f1      	beq.n	8002f44 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fd43 	bl	8002a16 <LL_RCC_MSI_SetCalibTrimming>
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f92:	f7ff fce8 	bl	8002966 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f96:	f7fe fac5 	bl	8001524 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fac1 	bl	8001524 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e2bc      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fb0:	f7ff fce7 	bl	8002982 <LL_RCC_MSI_IsReady>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f1      	bne.n	8002f9e <HAL_RCC_OscConfig+0x19e>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fbc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d05f      	beq.n	800308a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_OscConfig+0x1dc>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d10a      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	f7ff fc21 	bl	8002822 <LL_RCC_HSE_IsReady>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d050      	beq.n	8003088 <HAL_RCC_OscConfig+0x288>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d14c      	bne.n	8003088 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e29b      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d102      	bne.n	8003018 <HAL_RCC_OscConfig+0x218>
 8003012:	f7ff fbea 	bl	80027ea <LL_RCC_HSE_Enable>
 8003016:	e00d      	b.n	8003034 <HAL_RCC_OscConfig+0x234>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003020:	d104      	bne.n	800302c <HAL_RCC_OscConfig+0x22c>
 8003022:	f7ff fbb5 	bl	8002790 <LL_RCC_HSE_EnableTcxo>
 8003026:	f7ff fbe0 	bl	80027ea <LL_RCC_HSE_Enable>
 800302a:	e003      	b.n	8003034 <HAL_RCC_OscConfig+0x234>
 800302c:	f7ff fbeb 	bl	8002806 <LL_RCC_HSE_Disable>
 8003030:	f7ff fbbc 	bl	80027ac <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fa72 	bl	8001524 <HAL_GetTick>
 8003040:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fa6e 	bl	8001524 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e269      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003056:	f7ff fbe4 	bl	8002822 <LL_RCC_HSE_IsReady>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f1      	beq.n	8003044 <HAL_RCC_OscConfig+0x244>
 8003060:	e013      	b.n	800308a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe fa5f 	bl	8001524 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306a:	f7fe fa5b 	bl	8001524 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	; 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e256      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800307c:	f7ff fbd1 	bl	8002822 <LL_RCC_HSE_IsReady>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x26a>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04b      	beq.n	800312e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2a8>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d113      	bne.n	80030ca <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d110      	bne.n	80030ca <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a8:	f7ff fbe8 	bl	800287c <LL_RCC_HSI_IsReady>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x2be>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e235      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fbeb 	bl	800289e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	e031      	b.n	800312e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d019      	beq.n	8003106 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d2:	f7ff fbb7 	bl	8002844 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe fa25 	bl	8001524 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030de:	f7fe fa21 	bl	8001524 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e21c      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030f0:	f7ff fbc4 	bl	800287c <LL_RCC_HSI_IsReady>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f1      	beq.n	80030de <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fbcd 	bl	800289e <LL_RCC_HSI_SetCalibTrimming>
 8003104:	e013      	b.n	800312e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003106:	f7ff fbab 	bl	8002860 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe fa0b 	bl	8001524 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe fa07 	bl	8001524 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e202      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003124:	f7ff fbaa 	bl	800287c <LL_RCC_HSI_IsReady>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f1      	bne.n	8003112 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d06f      	beq.n	800321a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d057      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	429a      	cmp	r2, r3
 8003158:	d036      	beq.n	80031c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1db      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d018      	beq.n	80031ae <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800317c:	f7ff fbc4 	bl	8002908 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003180:	f7fe f9d0 	bl	8001524 <HAL_GetTick>
 8003184:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003186:	e00d      	b.n	80031a4 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe f9cc 	bl	8001524 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b11      	cmp	r3, #17
 8003194:	d906      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1c7      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
 800319a:	bf00      	nop
 800319c:	2000014c 	.word	0x2000014c
 80031a0:	20000150 	.word	0x20000150
          while (LL_RCC_LSI_IsReady() != 0U)
 80031a4:	f7ff fbc0 	bl	8002928 <LL_RCC_LSI_IsReady>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ec      	bne.n	8003188 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b6:	f023 0210 	bic.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c8:	f7ff fb8e 	bl	80028e8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe f9aa 	bl	8001524 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fe f9a6 	bl	8001524 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b11      	cmp	r3, #17
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1a1      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80031e6:	f7ff fb9f 	bl	8002928 <LL_RCC_LSI_IsReady>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f1      	beq.n	80031d4 <HAL_RCC_OscConfig+0x3d4>
 80031f0:	e013      	b.n	800321a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f2:	f7ff fb89 	bl	8002908 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe f995 	bl	8001524 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe f991 	bl	8001524 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b11      	cmp	r3, #17
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e18c      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003210:	f7ff fb8a 	bl	8002928 <LL_RCC_LSI_IsReady>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f1      	bne.n	80031fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80d8 	beq.w	80033d8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003228:	f7ff faa0 	bl	800276c <LL_PWR_IsEnabledBkUpAccess>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003232:	f7ff fa81 	bl	8002738 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fe f975 	bl	8001524 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe f971 	bl	8001524 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e16c      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003250:	f7ff fa8c 	bl	800276c <LL_PWR_IsEnabledBkUpAccess>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f1      	beq.n	800323e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d07b      	beq.n	800335a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b85      	cmp	r3, #133	; 0x85
 8003268:	d003      	beq.n	8003272 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b05      	cmp	r3, #5
 8003270:	d109      	bne.n	8003286 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003286:	f7fe f94d 	bl	8001524 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f93f 	bl	8001524 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e138      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032b8:	f7ff fb05 	bl	80028c6 <LL_RCC_LSE_IsReady>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ef      	beq.n	80032a2 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b81      	cmp	r3, #129	; 0x81
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b85      	cmp	r3, #133	; 0x85
 80032d0:	d121      	bne.n	8003316 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe f927 	bl	8001524 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fe f919 	bl	8001524 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e112      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ec      	beq.n	80032ee <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003314:	e060      	b.n	80033d8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe f905 	bl	8001524 <HAL_GetTick>
 800331a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003330:	e00a      	b.n	8003348 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fe f8f7 	bl	8001524 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0f0      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ec      	bne.n	8003332 <HAL_RCC_OscConfig+0x532>
 8003358:	e03e      	b.n	80033d8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fe f8e3 	bl	8001524 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800336c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe f8d5 	bl	8001524 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0ce      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ec      	bne.n	8003376 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe f8c2 	bl	8001524 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f8b4 	bl	8001524 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0ad      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033ce:	f7ff fa7a 	bl	80028c6 <LL_RCC_LSE_IsReady>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ef      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a3 	beq.w	8003528 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	d076      	beq.n	80034d6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d14b      	bne.n	8003488 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	f7ff fbcd 	bl	8002b8e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f896 	bl	8001524 <HAL_GetTick>
 80033f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe f892 	bl	8001524 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b0a      	cmp	r3, #10
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e08d      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800340e:	f7ff fbcc 	bl	8002baa <LL_RCC_PLL_IsReady>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f1      	bne.n	80033fc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	4b45      	ldr	r3, [pc, #276]	; (8003534 <HAL_RCC_OscConfig+0x734>)
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003430:	0212      	lsls	r2, r2, #8
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003438:	4311      	orrs	r1, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003444:	430a      	orrs	r2, r1
 8003446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344a:	4313      	orrs	r3, r2
 800344c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344e:	f7ff fb90 	bl	8002b72 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003460:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe f85f 	bl	8001524 <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe f85b 	bl	8001524 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b0a      	cmp	r3, #10
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e056      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800347c:	f7ff fb95 	bl	8002baa <LL_RCC_PLL_IsReady>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f1      	beq.n	800346a <HAL_RCC_OscConfig+0x66a>
 8003486:	e04f      	b.n	8003528 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	f7ff fb81 	bl	8002b8e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe f838 	bl	8001524 <HAL_GetTick>
 80034b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe f834 	bl	8001524 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b0a      	cmp	r3, #10
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e02f      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80034ca:	f7ff fb6e 	bl	8002baa <LL_RCC_PLL_IsReady>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f1      	bne.n	80034b8 <HAL_RCC_OscConfig+0x6b8>
 80034d4:	e028      	b.n	8003528 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e023      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d115      	bne.n	8003524 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	429a      	cmp	r2, r3
 8003504:	d10e      	bne.n	8003524 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	429a      	cmp	r2, r3
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	11c1808c 	.word	0x11c1808c

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e12c      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b98      	ldr	r3, [pc, #608]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d91b      	bls.n	8003592 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b95      	ldr	r3, [pc, #596]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4993      	ldr	r1, [pc, #588]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356a:	f7fd ffdb 	bl	8001524 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003570:	e008      	b.n	8003584 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003572:	f7fd ffd7 	bl	8001524 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e110      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003584:	4b8a      	ldr	r3, [pc, #552]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d1ef      	bne.n	8003572 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fa69 	bl	8002a7a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a8:	f7fd ffbc 	bl	8001524 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035b0:	f7fd ffb8 	bl	8001524 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0f1      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035c2:	f7ff fb30 	bl	8002c26 <LL_RCC_IsActiveFlag_HPRE>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f1      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d016      	beq.n	8003606 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa5f 	bl	8002aa0 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035e2:	f7fd ff9f 	bl	8001524 <HAL_GetTick>
 80035e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ea:	f7fd ff9b 	bl	8001524 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0d4      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035fc:	f7ff fb24 	bl	8002c48 <LL_RCC_IsActiveFlag_C2HPRE>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f1      	beq.n	80035ea <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fa57 	bl	8002aca <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800361c:	f7fd ff82 	bl	8001524 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003624:	f7fd ff7e 	bl	8001524 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0b7      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003636:	f7ff fb19 	bl	8002c6c <LL_RCC_IsActiveFlag_SHDHPRE>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f1      	beq.n	8003624 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fa50 	bl	8002af6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003656:	f7fd ff65 	bl	8001524 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800365e:	f7fd ff61 	bl	8001524 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e09a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003670:	f7ff fb0e 	bl	8002c90 <LL_RCC_IsActiveFlag_PPRE1>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f1      	beq.n	800365e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fa45 	bl	8002b1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003692:	f7fd ff47 	bl	8001524 <HAL_GetTick>
 8003696:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800369a:	f7fd ff43 	bl	8001524 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e07c      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036ac:	f7ff fb01 	bl	8002cb2 <LL_RCC_IsActiveFlag_PPRE2>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f1      	beq.n	800369a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d043      	beq.n	800374a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80036ca:	f7ff f8aa 	bl	8002822 <LL_RCC_HSE_IsReady>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11e      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e066      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d106      	bne.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036e0:	f7ff fa63 	bl	8002baa <LL_RCC_PLL_IsReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d113      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e05b      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036f6:	f7ff f944 	bl	8002982 <LL_RCC_MSI_IsReady>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e050      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003704:	f7ff f8ba 	bl	800287c <LL_RCC_HSI_IsReady>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e049      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f991 	bl	8002a3e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fd ff02 	bl	8001524 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fd fefe 	bl	8001524 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e035      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	f7ff f993 	bl	8002a64 <LL_RCC_GetSysClkSource>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	429a      	cmp	r2, r3
 8003748:	d1ec      	bne.n	8003724 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d21b      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 0207 	bic.w	r2, r3, #7
 8003760:	4913      	ldr	r1, [pc, #76]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fd fedc 	bl	8001524 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	e008      	b.n	8003782 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003770:	f7fd fed8 	bl	8001524 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e011      	b.n	80037a6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d1ef      	bne.n	8003770 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003790:	f000 f8b4 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003794:	4603      	mov	r3, r0
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_RCC_ClockConfig+0x27c>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCC_ClockConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fe74 	bl	800148c <HAL_InitTick>
 80037a4:	4603      	mov	r3, r0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58004000 	.word	0x58004000
 80037b4:	2000014c 	.word	0x2000014c
 80037b8:	20000150 	.word	0x20000150

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ca:	f7ff f94b 	bl	8002a64 <LL_RCC_GetSysClkSource>
 80037ce:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d0:	f7ff fa1e 	bl	8002c10 <LL_RCC_PLL_GetMainSource>
 80037d4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x2c>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d139      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d136      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037e8:	f7ff f8db 	bl	80029a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d115      	bne.n	800381e <HAL_RCC_GetSysClockFreq+0x62>
 80037f2:	f7ff f8d6 	bl	80029a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x4e>
 80037fc:	f7ff f8f4 	bl	80029e8 <LL_RCC_MSI_GetRange>
 8003800:	4603      	mov	r3, r0
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	e005      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x5a>
 800380a:	f7ff f8f8 	bl	80029fe <LL_RCC_MSI_GetRangeAfterStandby>
 800380e:	4603      	mov	r3, r0
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	4a36      	ldr	r2, [pc, #216]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	e014      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x8c>
 800381e:	f7ff f8c0 	bl	80029a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d106      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x7a>
 8003828:	f7ff f8de 	bl	80029e8 <LL_RCC_MSI_GetRange>
 800382c:	4603      	mov	r3, r0
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	e005      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x86>
 8003836:	f7ff f8e2 	bl	80029fe <LL_RCC_MSI_GetRangeAfterStandby>
 800383a:	4603      	mov	r3, r0
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003848:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d115      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003854:	e012      	b.n	800387c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d102      	bne.n	8003862 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e00c      	b.n	800387c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d109      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003868:	f7fe ffae 	bl	80027c8 <LL_RCC_HSE_IsEnabledDiv2>
 800386c:	4603      	mov	r3, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e001      	b.n	800387c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800387a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387c:	f7ff f8f2 	bl	8002a64 <LL_RCC_GetSysClkSource>
 8003880:	4603      	mov	r3, r0
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d12f      	bne.n	80038e6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003886:	f7ff f9c3 	bl	8002c10 <LL_RCC_PLL_GetMainSource>
 800388a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0xde>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d003      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8003898:	e00d      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e00d      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038a0:	f7fe ff92 	bl	80027c8 <LL_RCC_HSE_IsEnabledDiv2>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80038ac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038ae:	e005      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038b2:	60fb      	str	r3, [r7, #12]
        break;
 80038b4:	e002      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	60fb      	str	r3, [r7, #12]
        break;
 80038ba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038bc:	f7ff f986 	bl	8002bcc <LL_RCC_PLL_GetN>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	fb03 f402 	mul.w	r4, r3, r2
 80038c8:	f7ff f997 	bl	8002bfa <LL_RCC_PLL_GetDivider>
 80038cc:	4603      	mov	r3, r0
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	3301      	adds	r3, #1
 80038d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80038d6:	f7ff f985 	bl	8002be4 <LL_RCC_PLL_GetR>
 80038da:	4603      	mov	r3, r0
 80038dc:	0f5b      	lsrs	r3, r3, #29
 80038de:	3301      	adds	r3, #1
 80038e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80038e4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80038e6:	697b      	ldr	r3, [r7, #20]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}
 80038f0:	08006ecc 	.word	0x08006ecc
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	01e84800 	.word	0x01e84800

080038fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b598      	push	{r3, r4, r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003900:	f7ff ff5c 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003904:	4604      	mov	r4, r0
 8003906:	f7ff f91c 	bl	8002b42 <LL_RCC_GetAHBPrescaler>
 800390a:	4603      	mov	r3, r0
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	4a03      	ldr	r2, [pc, #12]	; (8003920 <HAL_RCC_GetHCLKFreq+0x24>)
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd98      	pop	{r3, r4, r7, pc}
 8003920:	08006e6c 	.word	0x08006e6c

08003924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	4a10      	ldr	r2, [pc, #64]	; (8003978 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800393c:	f7ff f90c 	bl	8002b58 <LL_RCC_GetAHB3Prescaler>
 8003940:	4603      	mov	r3, r0
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	4a0c      	ldr	r2, [pc, #48]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4a09      	ldr	r2, [pc, #36]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0c9c      	lsrs	r4, r3, #18
 8003960:	f7fe fef8 	bl	8002754 <HAL_PWREx_GetVoltageRange>
 8003964:	4603      	mov	r3, r0
 8003966:	4619      	mov	r1, r3
 8003968:	4620      	mov	r0, r4
 800396a:	f000 f80b 	bl	8003984 <RCC_SetFlashLatency>
 800396e:	4603      	mov	r3, r0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bd90      	pop	{r4, r7, pc}
 8003978:	08006ecc 	.word	0x08006ecc
 800397c:	08006e6c 	.word	0x08006e6c
 8003980:	431bde83 	.word	0x431bde83

08003984 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08e      	sub	sp, #56	; 0x38
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800398e:	4a3a      	ldr	r2, [pc, #232]	; (8003a78 <RCC_SetFlashLatency+0xf4>)
 8003990:	f107 0320 	add.w	r3, r7, #32
 8003994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003998:	6018      	str	r0, [r3, #0]
 800399a:	3304      	adds	r3, #4
 800399c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800399e:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <RCC_SetFlashLatency+0xf8>)
 80039a0:	f107 0318 	add.w	r3, r7, #24
 80039a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a8:	6018      	str	r0, [r3, #0]
 80039aa:	3304      	adds	r3, #4
 80039ac:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80039ae:	4a34      	ldr	r2, [pc, #208]	; (8003a80 <RCC_SetFlashLatency+0xfc>)
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80039b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039ba:	2300      	movs	r3, #0
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d11b      	bne.n	80039fe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ca:	e014      	b.n	80039f6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	3338      	adds	r3, #56	; 0x38
 80039d2:	443b      	add	r3, r7
 80039d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4293      	cmp	r3, r2
 80039de:	d807      	bhi.n	80039f0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3338      	adds	r3, #56	; 0x38
 80039e6:	443b      	add	r3, r7
 80039e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039ee:	e021      	b.n	8003a34 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	3301      	adds	r3, #1
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d9e7      	bls.n	80039cc <RCC_SetFlashLatency+0x48>
 80039fc:	e01a      	b.n	8003a34 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a02:	e014      	b.n	8003a2e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	3338      	adds	r3, #56	; 0x38
 8003a0a:	443b      	add	r3, r7
 8003a0c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d807      	bhi.n	8003a28 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	3338      	adds	r3, #56	; 0x38
 8003a1e:	443b      	add	r3, r7
 8003a20:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a26:	e005      	b.n	8003a34 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d9e7      	bls.n	8003a04 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <RCC_SetFlashLatency+0x100>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 0207 	bic.w	r2, r3, #7
 8003a3c:	4911      	ldr	r1, [pc, #68]	; (8003a84 <RCC_SetFlashLatency+0x100>)
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a44:	f7fd fd6e 	bl	8001524 <HAL_GetTick>
 8003a48:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a4a:	e008      	b.n	8003a5e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a4c:	f7fd fd6a 	bl	8001524 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e007      	b.n	8003a6e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <RCC_SetFlashLatency+0x100>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1ef      	bne.n	8003a4c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3738      	adds	r7, #56	; 0x38
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	08006e50 	.word	0x08006e50
 8003a7c:	08006e58 	.word	0x08006e58
 8003a80:	08006e60 	.word	0x08006e60
 8003a84:	58004000 	.word	0x58004000

08003a88 <LL_I2C_Enable>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <LL_I2C_Disable>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <LL_I2C_ConfigFilters>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0219      	lsls	r1, r3, #8
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <LL_I2C_SetOwnAddress1>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b04:	f023 0307 	bic.w	r3, r3, #7
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	609a      	str	r2, [r3, #8]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <LL_I2C_EnableOwnAddress1>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <LL_I2C_DisableOwnAddress1>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <LL_I2C_SetTiming>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	611a      	str	r2, [r3, #16]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <LL_I2C_SetMode>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <LL_I2C_AcknowledgeNextData>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	605a      	str	r2, [r3, #4]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff6d 	bl	8003aa6 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ff74 	bl	8003ac4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffb9 	bl	8003b5a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff4d 	bl	8003a88 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ffa4 	bl	8003b3c <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff76 	bl	8003af0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff86 	bl	8003b1e <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ffab 	bl	8003b74 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ffb7 	bl	8003b98 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003c2a:	2301      	movs	r3, #1
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c46:	d101      	bne.n	8003c4c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_HSI_IsReady>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c68:	d101      	bne.n	8003c6e <LL_RCC_HSI_IsReady+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_RCC_HSI_IsReady+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <LL_RCC_LSE_IsReady>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d101      	bne.n	8003c90 <LL_RCC_LSE_IsReady+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_RCC_LSE_IsReady+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d101      	bne.n	8003cb0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_MSI_GetRange>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cdc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_GetSysClkSource>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <LL_RCC_GetAHBPrescaler>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <LL_RCC_GetAPB1Prescaler>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_GetAPB2Prescaler>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <LL_RCC_GetUSARTClockSource>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	4313      	orrs	r3, r2
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_PLL_GetN>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <LL_RCC_PLL_GetR>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_PLL_GetDivider>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_PLL_GetMainSource>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0303 	and.w	r3, r3, #3
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
	...

08003dc0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d131      	bne.n	8003e36 <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffb4 	bl	8003d40 <LL_RCC_GetUSARTClockSource>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003dde:	d015      	beq.n	8003e0c <LL_RCC_GetUSARTClockFreq+0x4c>
 8003de0:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003de4:	d81b      	bhi.n	8003e1e <LL_RCC_GetUSARTClockFreq+0x5e>
 8003de6:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <LL_RCC_GetUSARTClockFreq+0xf4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <LL_RCC_GetUSARTClockFreq+0x34>
 8003dec:	4a32      	ldr	r2, [pc, #200]	; (8003eb8 <LL_RCC_GetUSARTClockFreq+0xf8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <LL_RCC_GetUSARTClockFreq+0x3c>
 8003df2:	e014      	b.n	8003e1e <LL_RCC_GetUSARTClockFreq+0x5e>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003df4:	f000 f868 	bl	8003ec8 <RCC_GetSystemClockFreq>
 8003df8:	60f8      	str	r0, [r7, #12]
        break;
 8003dfa:	e055      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003dfc:	f7ff ff2b 	bl	8003c56 <LL_RCC_HSI_IsReady>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d149      	bne.n	8003e9a <LL_RCC_GetUSARTClockFreq+0xda>
        {
          usart_frequency = HSI_VALUE;
 8003e06:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <LL_RCC_GetUSARTClockFreq+0xfc>)
 8003e08:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003e0a:	e046      	b.n	8003e9a <LL_RCC_GetUSARTClockFreq+0xda>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8003e0c:	f7ff ff34 	bl	8003c78 <LL_RCC_LSE_IsReady>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d143      	bne.n	8003e9e <LL_RCC_GetUSARTClockFreq+0xde>
        {
          usart_frequency = LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003e1c:	e03f      	b.n	8003e9e <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8003e1e:	f000 f853 	bl	8003ec8 <RCC_GetSystemClockFreq>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f8f7 	bl	8004018 <RCC_GetHCLK1ClockFreq>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f91d 	bl	800406c <RCC_GetPCLK2ClockFreq>
 8003e32:	60f8      	str	r0, [r7, #12]
        break;
 8003e34:	e038      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>
    }
  }
  else
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ff82 	bl	8003d40 <LL_RCC_GetUSARTClockSource>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003e42:	d015      	beq.n	8003e70 <LL_RCC_GetUSARTClockFreq+0xb0>
 8003e44:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003e48:	d81b      	bhi.n	8003e82 <LL_RCC_GetUSARTClockFreq+0xc2>
 8003e4a:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <LL_RCC_GetUSARTClockFreq+0x100>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <LL_RCC_GetUSARTClockFreq+0x98>
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <LL_RCC_GetUSARTClockFreq+0x104>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <LL_RCC_GetUSARTClockFreq+0xa0>
 8003e56:	e014      	b.n	8003e82 <LL_RCC_GetUSARTClockFreq+0xc2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003e58:	f000 f836 	bl	8003ec8 <RCC_GetSystemClockFreq>
 8003e5c:	60f8      	str	r0, [r7, #12]
        break;
 8003e5e:	e023      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003e60:	f7ff fef9 	bl	8003c56 <LL_RCC_HSI_IsReady>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d11b      	bne.n	8003ea2 <LL_RCC_GetUSARTClockFreq+0xe2>
        {
          usart_frequency = HSI_VALUE;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <LL_RCC_GetUSARTClockFreq+0xfc>)
 8003e6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003e6e:	e018      	b.n	8003ea2 <LL_RCC_GetUSARTClockFreq+0xe2>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8003e70:	f7ff ff02 	bl	8003c78 <LL_RCC_LSE_IsReady>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d115      	bne.n	8003ea6 <LL_RCC_GetUSARTClockFreq+0xe6>
        {
          usart_frequency = LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003e80:	e011      	b.n	8003ea6 <LL_RCC_GetUSARTClockFreq+0xe6>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8003e82:	f000 f821 	bl	8003ec8 <RCC_GetSystemClockFreq>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f8c5 	bl	8004018 <RCC_GetHCLK1ClockFreq>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f8d7 	bl	8004044 <RCC_GetPCLK1ClockFreq>
 8003e96:	60f8      	str	r0, [r7, #12]
        break;
 8003e98:	e006      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e004      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8003ea6:	bf00      	nop
    }
  }
  return usart_frequency;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	00030001 	.word	0x00030001
 8003eb8:	00030002 	.word	0x00030002
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	000c0004 	.word	0x000c0004
 8003ec4:	000c0008 	.word	0x000c0008

08003ec8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003ece:	f7ff ff0b 	bl	8003ce8 <LL_RCC_GetSysClkSource>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d861      	bhi.n	8003f9c <RCC_GetSystemClockFreq+0xd4>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <RCC_GetSystemClockFreq+0x18>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f9d 	.word	0x08003f9d
 8003ee8:	08003f9d 	.word	0x08003f9d
 8003eec:	08003f9d 	.word	0x08003f9d
 8003ef0:	08003f79 	.word	0x08003f79
 8003ef4:	08003f9d 	.word	0x08003f9d
 8003ef8:	08003f9d 	.word	0x08003f9d
 8003efc:	08003f9d 	.word	0x08003f9d
 8003f00:	08003f7f 	.word	0x08003f7f
 8003f04:	08003f9d 	.word	0x08003f9d
 8003f08:	08003f9d 	.word	0x08003f9d
 8003f0c:	08003f9d 	.word	0x08003f9d
 8003f10:	08003f95 	.word	0x08003f95
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f14:	f7ff fec1 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d115      	bne.n	8003f4a <RCC_GetSystemClockFreq+0x82>
 8003f1e:	f7ff febc 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <RCC_GetSystemClockFreq+0x6e>
 8003f28:	f7ff fec7 	bl	8003cba <LL_RCC_MSI_GetRange>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	e005      	b.n	8003f42 <RCC_GetSystemClockFreq+0x7a>
 8003f36:	f7ff fecb 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	4a32      	ldr	r2, [pc, #200]	; (800400c <RCC_GetSystemClockFreq+0x144>)
 8003f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f48:	e014      	b.n	8003f74 <RCC_GetSystemClockFreq+0xac>
 8003f4a:	f7ff fea6 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d106      	bne.n	8003f62 <RCC_GetSystemClockFreq+0x9a>
 8003f54:	f7ff feb1 	bl	8003cba <LL_RCC_MSI_GetRange>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	e005      	b.n	8003f6e <RCC_GetSystemClockFreq+0xa6>
 8003f62:	f7ff feb5 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f66:	4603      	mov	r3, r0
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a27      	ldr	r2, [pc, #156]	; (800400c <RCC_GetSystemClockFreq+0x144>)
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003f76:	e043      	b.n	8004000 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <RCC_GetSystemClockFreq+0x148>)
 8003f7a:	607b      	str	r3, [r7, #4]
      break;
 8003f7c:	e040      	b.n	8004000 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f7e:	f7ff fe59 	bl	8003c34 <LL_RCC_HSE_IsEnabledDiv2>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <RCC_GetSystemClockFreq+0xc6>
      {
        frequency = HSE_VALUE / 2U;
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <RCC_GetSystemClockFreq+0x148>)
 8003f8a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 8003f8c:	e038      	b.n	8004000 <RCC_GetSystemClockFreq+0x138>
        frequency = HSE_VALUE;
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <RCC_GetSystemClockFreq+0x14c>)
 8003f90:	607b      	str	r3, [r7, #4]
      break;
 8003f92:	e035      	b.n	8004000 <RCC_GetSystemClockFreq+0x138>


    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003f94:	f000 f87e 	bl	8004094 <RCC_PLL_GetFreqDomain_SYS>
 8003f98:	6078      	str	r0, [r7, #4]
      break;
 8003f9a:	e031      	b.n	8004000 <RCC_GetSystemClockFreq+0x138>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f9c:	f7ff fe7d 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <RCC_GetSystemClockFreq+0x10a>
 8003fa6:	f7ff fe78 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <RCC_GetSystemClockFreq+0xf6>
 8003fb0:	f7ff fe83 	bl	8003cba <LL_RCC_MSI_GetRange>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	e005      	b.n	8003fca <RCC_GetSystemClockFreq+0x102>
 8003fbe:	f7ff fe87 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <RCC_GetSystemClockFreq+0x144>)
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	e014      	b.n	8003ffc <RCC_GetSystemClockFreq+0x134>
 8003fd2:	f7ff fe62 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <RCC_GetSystemClockFreq+0x122>
 8003fdc:	f7ff fe6d 	bl	8003cba <LL_RCC_MSI_GetRange>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	e005      	b.n	8003ff6 <RCC_GetSystemClockFreq+0x12e>
 8003fea:	f7ff fe71 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <RCC_GetSystemClockFreq+0x144>)
 8003ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffc:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003ffe:	bf00      	nop
  }

  return frequency;
 8004000:	687b      	ldr	r3, [r7, #4]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	08006ecc 	.word	0x08006ecc
 8004010:	00f42400 	.word	0x00f42400
 8004014:	01e84800 	.word	0x01e84800

08004018 <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004020:	f7ff fe6d 	bl	8003cfe <LL_RCC_GetAHBPrescaler>
 8004024:	4603      	mov	r3, r0
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <RCC_GetHCLK1ClockFreq+0x28>)
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	08006e6c 	.word	0x08006e6c

08004044 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800404c:	f7ff fe62 	bl	8003d14 <LL_RCC_GetAPB1Prescaler>
 8004050:	4603      	mov	r3, r0
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <RCC_GetPCLK1ClockFreq+0x24>)
 8004056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	08006eac 	.word	0x08006eac

0800406c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004074:	f7ff fe59 	bl	8003d2a <LL_RCC_GetAPB2Prescaler>
 8004078:	4603      	mov	r3, r0
 800407a:	0adb      	lsrs	r3, r3, #11
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <RCC_GetPCLK2ClockFreq+0x24>)
 800407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	08006eac 	.word	0x08006eac

08004094 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800409a:	f7ff fe85 	bl	8003da8 <LL_RCC_PLL_GetMainSource>
 800409e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d03e      	beq.n	8004124 <RCC_PLL_GetFreqDomain_SYS+0x90>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d846      	bhi.n	800413a <RCC_PLL_GetFreqDomain_SYS+0xa6>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d003      	beq.n	80040ba <RCC_PLL_GetFreqDomain_SYS+0x26>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d032      	beq.n	800411e <RCC_PLL_GetFreqDomain_SYS+0x8a>
 80040b8:	e03f      	b.n	800413a <RCC_PLL_GetFreqDomain_SYS+0xa6>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80040ba:	f7ff fdee 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d115      	bne.n	80040f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80040c4:	f7ff fde9 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d106      	bne.n	80040dc <RCC_PLL_GetFreqDomain_SYS+0x48>
 80040ce:	f7ff fdf4 	bl	8003cba <LL_RCC_MSI_GetRange>
 80040d2:	4603      	mov	r3, r0
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	e005      	b.n	80040e8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80040dc:	f7ff fdf8 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 80040e0:	4603      	mov	r3, r0
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	4a39      	ldr	r2, [pc, #228]	; (80041d0 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	e014      	b.n	800411a <RCC_PLL_GetFreqDomain_SYS+0x86>
 80040f0:	f7ff fdd3 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d106      	bne.n	8004108 <RCC_PLL_GetFreqDomain_SYS+0x74>
 80040fa:	f7ff fdde 	bl	8003cba <LL_RCC_MSI_GetRange>
 80040fe:	4603      	mov	r3, r0
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	e005      	b.n	8004114 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8004108:	f7ff fde2 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 800410c:	4603      	mov	r3, r0
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8004116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411a:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800411c:	e03f      	b.n	800419e <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800411e:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8004120:	607b      	str	r3, [r7, #4]
      break;
 8004122:	e03c      	b.n	800419e <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004124:	f7ff fd86 	bl	8003c34 <LL_RCC_HSE_IsEnabledDiv2>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <RCC_PLL_GetFreqDomain_SYS+0xa0>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8004130:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8004132:	e034      	b.n	800419e <RCC_PLL_GetFreqDomain_SYS+0x10a>
        pllinputfreq = HSE_VALUE;
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <RCC_PLL_GetFreqDomain_SYS+0x144>)
 8004136:	607b      	str	r3, [r7, #4]
      break;
 8004138:	e031      	b.n	800419e <RCC_PLL_GetFreqDomain_SYS+0x10a>


    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800413a:	f7ff fdae 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d115      	bne.n	8004170 <RCC_PLL_GetFreqDomain_SYS+0xdc>
 8004144:	f7ff fda9 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004148:	4603      	mov	r3, r0
 800414a:	2b01      	cmp	r3, #1
 800414c:	d106      	bne.n	800415c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800414e:	f7ff fdb4 	bl	8003cba <LL_RCC_MSI_GetRange>
 8004152:	4603      	mov	r3, r0
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	e005      	b.n	8004168 <RCC_PLL_GetFreqDomain_SYS+0xd4>
 800415c:	f7ff fdb8 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 8004160:	4603      	mov	r3, r0
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	e014      	b.n	800419a <RCC_PLL_GetFreqDomain_SYS+0x106>
 8004170:	f7ff fd93 	bl	8003c9a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d106      	bne.n	8004188 <RCC_PLL_GetFreqDomain_SYS+0xf4>
 800417a:	f7ff fd9e 	bl	8003cba <LL_RCC_MSI_GetRange>
 800417e:	4603      	mov	r3, r0
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	e005      	b.n	8004194 <RCC_PLL_GetFreqDomain_SYS+0x100>
 8004188:	f7ff fda2 	bl	8003cd0 <LL_RCC_MSI_GetRangeAfterStandby>
 800418c:	4603      	mov	r3, r0
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8004196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419a:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800419c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800419e:	f7ff fde1 	bl	8003d64 <LL_RCC_PLL_GetN>
 80041a2:	4602      	mov	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	fb03 f402 	mul.w	r4, r3, r2
 80041aa:	f7ff fdf2 	bl	8003d92 <LL_RCC_PLL_GetDivider>
 80041ae:	4603      	mov	r3, r0
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	3301      	adds	r3, #1
 80041b4:	fbb4 f4f3 	udiv	r4, r4, r3
 80041b8:	f7ff fde0 	bl	8003d7c <LL_RCC_PLL_GetR>
 80041bc:	4603      	mov	r3, r0
 80041be:	0f5b      	lsrs	r3, r3, #29
 80041c0:	3301      	adds	r3, #1
 80041c2:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd90      	pop	{r4, r7, pc}
 80041ce:	bf00      	nop
 80041d0:	08006ecc 	.word	0x08006ecc
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	01e84800 	.word	0x01e84800

080041dc <LL_APB1_GRP1_ForceReset>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <LL_APB1_GRP1_ReleaseReset>:
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	43db      	mvns	r3, r3
 8004210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004214:	4013      	ands	r3, r2
 8004216:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4313      	orrs	r3, r2
 8004238:	640b      	str	r3, [r1, #64]	; 0x40
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	43db      	mvns	r3, r3
 8004256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800425a:	4013      	ands	r3, r2
 800425c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <LL_USART_IsEnabled>:
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <LL_USART_IsEnabled+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_USART_IsEnabled+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <LL_USART_SetPrescaler>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	f023 030f 	bic.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	b292      	uxth	r2, r2
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <LL_USART_SetStopBitsLength>:
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	605a      	str	r2, [r3, #4]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <LL_USART_SetHWFlowCtrl>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
	...

080042fc <LL_USART_SetBaudRate>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b0b      	cmp	r3, #11
 800430e:	d83c      	bhi.n	800438a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d039      	beq.n	800438a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431c:	d122      	bne.n	8004364 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <LL_USART_SetBaudRate+0x98>)
 8004326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	005a      	lsls	r2, r3, #1
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	441a      	add	r2, r3
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	60da      	str	r2, [r3, #12]
}
 8004362:	e012      	b.n	800438a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <LL_USART_SetBaudRate+0x98>)
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	fbb2 f2f3 	udiv	r2, r2, r3
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	441a      	add	r2, r3
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	b29b      	uxth	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	60da      	str	r2, [r3, #12]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	08006f0c 	.word	0x08006f0c

08004398 <LL_USART_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are de-initialized
  *          - ERROR: USART registers are not de-initialized
  */
ErrorStatus LL_USART_DeInit(USART_TypeDef *USARTx)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <LL_USART_DeInit+0x50>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <LL_USART_DeInit+0x26>
  {
    /* Force reset of USART clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 80043ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80043b0:	f7ff ff37 	bl	8004222 <LL_APB2_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 80043b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80043b8:	f7ff ff44 	bl	8004244 <LL_APB2_GRP1_ReleaseReset>
 80043bc:	e00e      	b.n	80043dc <LL_USART_DeInit+0x44>
  }
  else if (USARTx == USART2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <LL_USART_DeInit+0x54>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <LL_USART_DeInit+0x40>
  {
    /* Force reset of USART clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
 80043c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80043ca:	f7ff ff07 	bl	80041dc <LL_APB1_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
 80043ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80043d2:	f7ff ff14 	bl	80041fe <LL_APB1_GRP1_ReleaseReset>
 80043d6:	e001      	b.n	80043dc <LL_USART_DeInit+0x44>
  }
  else
  {
    status = ERROR;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40013800 	.word	0x40013800
 80043ec:	40004400 	.word	0x40004400

080043f0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ff30 	bl	8004268 <LL_USART_IsEnabled>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d149      	bne.n	80044a2 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b26      	ldr	r3, [pc, #152]	; (80044ac <LL_USART_Init+0xbc>)
 8004414:	4013      	ands	r3, r2
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	6891      	ldr	r1, [r2, #8]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	6912      	ldr	r2, [r2, #16]
 800441e:	4311      	orrs	r1, r2
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	6952      	ldr	r2, [r2, #20]
 8004424:	4311      	orrs	r1, r2
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	69d2      	ldr	r2, [r2, #28]
 800442a:	430a      	orrs	r2, r1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff3a 	bl	80042b2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff46 	bl	80042d6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <LL_USART_Init+0xc0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d104      	bne.n	800445c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004452:	2003      	movs	r0, #3
 8004454:	f7ff fcb4 	bl	8003dc0 <LL_RCC_GetUSARTClockFreq>
 8004458:	60b8      	str	r0, [r7, #8]
 800445a:	e007      	b.n	800446c <LL_USART_Init+0x7c>
    }
    else if (USARTx == USART2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <LL_USART_Init+0xc4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004464:	200c      	movs	r0, #12
 8004466:	f7ff fcab 	bl	8003dc0 <LL_RCC_GetUSARTClockFreq>
 800446a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <LL_USART_Init+0xa6>
        && (USART_InitStruct->BaudRate != 0U))
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <LL_USART_Init+0xa6>
    {
      status = SUCCESS;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	69d9      	ldr	r1, [r3, #28]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	460b      	mov	r3, r1
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff33 	bl	80042fc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fef5 	bl	800428c <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	efff69f3 	.word	0xefff69f3
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40004400 	.word	0x40004400

080044b8 <OPENBL_Init>:
/**
  * @brief  This function is used to initialize the registered interfaces in the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
  uint32_t counter;

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e00f      	b.n	80044e4 <OPENBL_Init+0x2c>
  {
    if (a_InterfacesTable[counter].p_Ops->Init != NULL)
 80044c4:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <OPENBL_Init+0x40>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <OPENBL_Init+0x26>
    {
      a_InterfacesTable[counter].p_Ops->Init();
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <OPENBL_Init+0x40>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4798      	blx	r3
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <OPENBL_Init+0x44>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3ea      	bcc.n	80044c4 <OPENBL_Init+0xc>
    }
  }
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	200003b4 	.word	0x200003b4
 80044fc:	200003b0 	.word	0x200003b0

08004500 <OPENBL_DeInit>:
/**
  * @brief  This function is used to de-initialize the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_DeInit(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  OpenBootloader_DeInit();
 8004504:	f7fb ff48 	bl	8000398 <OpenBootloader_DeInit>
}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}

0800450c <OPENBL_InterfacesDeInit>:
/**
  * @brief  This function is used to de-initialize the registered interfaces in the Open Bootloader MW.
  * @retval None.
  */
void OPENBL_InterfacesDeInit(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
  uint32_t counter;

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	e00f      	b.n	8004538 <OPENBL_InterfacesDeInit+0x2c>
  {
    if (a_InterfacesTable[counter].p_Ops->DeInit != NULL)
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <OPENBL_InterfacesDeInit+0x40>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <OPENBL_InterfacesDeInit+0x26>
    {
      a_InterfacesTable[counter].p_Ops->DeInit();
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <OPENBL_InterfacesDeInit+0x40>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4798      	blx	r3
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3301      	adds	r3, #1
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <OPENBL_InterfacesDeInit+0x44>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	d3ea      	bcc.n	8004518 <OPENBL_InterfacesDeInit+0xc>
    }
  }
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200003b4 	.word	0x200003b4
 8004550:	200003b0 	.word	0x200003b0

08004554 <OPENBL_RegisterInterface>:
/**
  * @brief  This function is used to register a given interface in the Open Bootloader MW.
  * @retval None.
  */
ErrorStatus OPENBL_RegisterInterface(OPENBL_HandleTypeDef *Interface)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]

  if (NumberOfInterfaces < INTERFACES_SUPPORTED)
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <OPENBL_RegisterInterface+0x50>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d814      	bhi.n	8004592 <OPENBL_RegisterInterface+0x3e>
  {
    a_InterfacesTable[NumberOfInterfaces].p_Ops = Interface->p_Ops;
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <OPENBL_RegisterInterface+0x50>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	490d      	ldr	r1, [pc, #52]	; (80045a8 <OPENBL_RegisterInterface+0x54>)
 8004572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    a_InterfacesTable[NumberOfInterfaces].p_Cmd = Interface->p_Cmd;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <OPENBL_RegisterInterface+0x50>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6852      	ldr	r2, [r2, #4]
 800457e:	490a      	ldr	r1, [pc, #40]	; (80045a8 <OPENBL_RegisterInterface+0x54>)
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	605a      	str	r2, [r3, #4]

    NumberOfInterfaces++;
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <OPENBL_RegisterInterface+0x50>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <OPENBL_RegisterInterface+0x50>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e001      	b.n	8004596 <OPENBL_RegisterInterface+0x42>
  }
  else
  {
    status = ERROR;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	200003b0 	.word	0x200003b0
 80045a8:	200003b4 	.word	0x200003b4

080045ac <OPENBL_InterfaceDetection>:
/**
  * @brief  This function is used to detect if there is any activity on a given interface.
  * @retval None.
  */
uint32_t OPENBL_InterfaceDetection(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
  uint32_t counter;
  uint8_t detected = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	70fb      	strb	r3, [r7, #3]

  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	e01b      	b.n	80045f4 <OPENBL_InterfaceDetection+0x48>
  {
    if (a_InterfacesTable[counter].p_Ops->Detection != NULL)
 80045bc:	4a12      	ldr	r2, [pc, #72]	; (8004608 <OPENBL_InterfaceDetection+0x5c>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d011      	beq.n	80045ee <OPENBL_InterfaceDetection+0x42>
    {
      detected = a_InterfacesTable[counter].p_Ops->Detection();
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <OPENBL_InterfaceDetection+0x5c>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4798      	blx	r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	70fb      	strb	r3, [r7, #3]

      if (detected == 1U)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <OPENBL_InterfaceDetection+0x42>
      {
        p_Interface = &(a_InterfacesTable[counter]);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <OPENBL_InterfaceDetection+0x5c>)
 80045e6:	4413      	add	r3, r2
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <OPENBL_InterfaceDetection+0x60>)
 80045ea:	6013      	str	r3, [r2, #0]
        break;
 80045ec:	e007      	b.n	80045fe <OPENBL_InterfaceDetection+0x52>
  for (counter = 0U; counter < NumberOfInterfaces; counter++)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3301      	adds	r3, #1
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <OPENBL_InterfaceDetection+0x64>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3de      	bcc.n	80045bc <OPENBL_InterfaceDetection+0x10>
      }
    }
  }

  return detected;
 80045fe:	78fb      	ldrb	r3, [r7, #3]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200003b4 	.word	0x200003b4
 800460c:	200003cc 	.word	0x200003cc
 8004610:	200003b0 	.word	0x200003b0

08004614 <OPENBL_CommandProcess>:
/**
  * @brief  This function is used to get the command opcode from the given interface and execute the right command.
  * @retval None.
  */
void OPENBL_CommandProcess(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  uint8_t command_opcode;

  /* Get the user command opcode */
  if (p_Interface->p_Ops->GetCommandOpcode != NULL)
 800461a:	4bcb      	ldr	r3, [pc, #812]	; (8004948 <OPENBL_CommandProcess+0x334>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8391 	beq.w	8004d4a <OPENBL_CommandProcess+0x736>
  {
    command_opcode = p_Interface->p_Ops->GetCommandOpcode();
 8004628:	4bc7      	ldr	r3, [pc, #796]	; (8004948 <OPENBL_CommandProcess+0x334>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4798      	blx	r3
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]

    switch (command_opcode)
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	2b93      	cmp	r3, #147	; 0x93
 800463a:	f200 834e 	bhi.w	8004cda <OPENBL_CommandProcess+0x6c6>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <OPENBL_CommandProcess+0x30>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004895 	.word	0x08004895
 8004648:	080048c9 	.word	0x080048c9
 800464c:	080048fd 	.word	0x080048fd
 8004650:	08004c45 	.word	0x08004c45
 8004654:	08004cdb 	.word	0x08004cdb
 8004658:	08004cdb 	.word	0x08004cdb
 800465c:	08004cdb 	.word	0x08004cdb
 8004660:	08004cdb 	.word	0x08004cdb
 8004664:	08004cdb 	.word	0x08004cdb
 8004668:	08004cdb 	.word	0x08004cdb
 800466c:	08004cdb 	.word	0x08004cdb
 8004670:	08004cdb 	.word	0x08004cdb
 8004674:	08004cdb 	.word	0x08004cdb
 8004678:	08004cdb 	.word	0x08004cdb
 800467c:	08004cdb 	.word	0x08004cdb
 8004680:	08004cdb 	.word	0x08004cdb
 8004684:	08004cdb 	.word	0x08004cdb
 8004688:	08004931 	.word	0x08004931
 800468c:	08004cdb 	.word	0x08004cdb
 8004690:	08004cdb 	.word	0x08004cdb
 8004694:	08004cdb 	.word	0x08004cdb
 8004698:	08004cdb 	.word	0x08004cdb
 800469c:	08004cdb 	.word	0x08004cdb
 80046a0:	08004cdb 	.word	0x08004cdb
 80046a4:	08004cdb 	.word	0x08004cdb
 80046a8:	08004cdb 	.word	0x08004cdb
 80046ac:	08004cdb 	.word	0x08004cdb
 80046b0:	08004cdb 	.word	0x08004cdb
 80046b4:	08004cdb 	.word	0x08004cdb
 80046b8:	08004cdb 	.word	0x08004cdb
 80046bc:	08004cdb 	.word	0x08004cdb
 80046c0:	08004cdb 	.word	0x08004cdb
 80046c4:	08004cdb 	.word	0x08004cdb
 80046c8:	0800499d 	.word	0x0800499d
 80046cc:	08004cdb 	.word	0x08004cdb
 80046d0:	08004cdb 	.word	0x08004cdb
 80046d4:	08004cdb 	.word	0x08004cdb
 80046d8:	08004cdb 	.word	0x08004cdb
 80046dc:	08004cdb 	.word	0x08004cdb
 80046e0:	08004cdb 	.word	0x08004cdb
 80046e4:	08004cdb 	.word	0x08004cdb
 80046e8:	08004cdb 	.word	0x08004cdb
 80046ec:	08004cdb 	.word	0x08004cdb
 80046f0:	08004cdb 	.word	0x08004cdb
 80046f4:	08004cdb 	.word	0x08004cdb
 80046f8:	08004cdb 	.word	0x08004cdb
 80046fc:	08004cdb 	.word	0x08004cdb
 8004700:	08004cdb 	.word	0x08004cdb
 8004704:	08004cdb 	.word	0x08004cdb
 8004708:	08004969 	.word	0x08004969
 800470c:	08004b09 	.word	0x08004b09
 8004710:	08004cdb 	.word	0x08004cdb
 8004714:	08004cdb 	.word	0x08004cdb
 8004718:	08004cdb 	.word	0x08004cdb
 800471c:	08004cdb 	.word	0x08004cdb
 8004720:	08004cdb 	.word	0x08004cdb
 8004724:	08004cdb 	.word	0x08004cdb
 8004728:	08004cdb 	.word	0x08004cdb
 800472c:	08004cdb 	.word	0x08004cdb
 8004730:	08004cdb 	.word	0x08004cdb
 8004734:	08004cdb 	.word	0x08004cdb
 8004738:	08004cdb 	.word	0x08004cdb
 800473c:	08004cdb 	.word	0x08004cdb
 8004740:	08004cdb 	.word	0x08004cdb
 8004744:	08004cdb 	.word	0x08004cdb
 8004748:	08004cdb 	.word	0x08004cdb
 800474c:	08004cdb 	.word	0x08004cdb
 8004750:	08004a6d 	.word	0x08004a6d
 8004754:	08004a39 	.word	0x08004a39
 8004758:	08004b3d 	.word	0x08004b3d
 800475c:	08004cdb 	.word	0x08004cdb
 8004760:	08004cdb 	.word	0x08004cdb
 8004764:	08004cdb 	.word	0x08004cdb
 8004768:	08004cdb 	.word	0x08004cdb
 800476c:	08004cdb 	.word	0x08004cdb
 8004770:	08004cdb 	.word	0x08004cdb
 8004774:	08004cdb 	.word	0x08004cdb
 8004778:	08004cdb 	.word	0x08004cdb
 800477c:	08004cdb 	.word	0x08004cdb
 8004780:	08004cdb 	.word	0x08004cdb
 8004784:	08004c77 	.word	0x08004c77
 8004788:	08004ca9 	.word	0x08004ca9
 800478c:	08004cdb 	.word	0x08004cdb
 8004790:	08004cdb 	.word	0x08004cdb
 8004794:	08004cdb 	.word	0x08004cdb
 8004798:	08004cdb 	.word	0x08004cdb
 800479c:	08004cdb 	.word	0x08004cdb
 80047a0:	08004cdb 	.word	0x08004cdb
 80047a4:	08004cdb 	.word	0x08004cdb
 80047a8:	08004cdb 	.word	0x08004cdb
 80047ac:	08004cdb 	.word	0x08004cdb
 80047b0:	08004cdb 	.word	0x08004cdb
 80047b4:	08004cdb 	.word	0x08004cdb
 80047b8:	08004cdb 	.word	0x08004cdb
 80047bc:	08004cdb 	.word	0x08004cdb
 80047c0:	08004cdb 	.word	0x08004cdb
 80047c4:	08004cdb 	.word	0x08004cdb
 80047c8:	08004cdb 	.word	0x08004cdb
 80047cc:	08004cdb 	.word	0x08004cdb
 80047d0:	08004aa1 	.word	0x08004aa1
 80047d4:	08004b75 	.word	0x08004b75
 80047d8:	08004cdb 	.word	0x08004cdb
 80047dc:	08004cdb 	.word	0x08004cdb
 80047e0:	08004cdb 	.word	0x08004cdb
 80047e4:	08004cdb 	.word	0x08004cdb
 80047e8:	08004cdb 	.word	0x08004cdb
 80047ec:	08004cdb 	.word	0x08004cdb
 80047f0:	08004cdb 	.word	0x08004cdb
 80047f4:	08004cdb 	.word	0x08004cdb
 80047f8:	08004cdb 	.word	0x08004cdb
 80047fc:	08004cdb 	.word	0x08004cdb
 8004800:	08004cdb 	.word	0x08004cdb
 8004804:	08004cdb 	.word	0x08004cdb
 8004808:	08004cdb 	.word	0x08004cdb
 800480c:	08004cdb 	.word	0x08004cdb
 8004810:	08004ad5 	.word	0x08004ad5
 8004814:	08004ba9 	.word	0x08004ba9
 8004818:	08004cdb 	.word	0x08004cdb
 800481c:	08004cdb 	.word	0x08004cdb
 8004820:	08004cdb 	.word	0x08004cdb
 8004824:	08004cdb 	.word	0x08004cdb
 8004828:	08004cdb 	.word	0x08004cdb
 800482c:	08004cdb 	.word	0x08004cdb
 8004830:	08004cdb 	.word	0x08004cdb
 8004834:	08004cdb 	.word	0x08004cdb
 8004838:	08004cdb 	.word	0x08004cdb
 800483c:	08004cdb 	.word	0x08004cdb
 8004840:	08004cdb 	.word	0x08004cdb
 8004844:	08004cdb 	.word	0x08004cdb
 8004848:	08004cdb 	.word	0x08004cdb
 800484c:	080049d1 	.word	0x080049d1
 8004850:	08004bdd 	.word	0x08004bdd
 8004854:	08004cdb 	.word	0x08004cdb
 8004858:	08004cdb 	.word	0x08004cdb
 800485c:	08004cdb 	.word	0x08004cdb
 8004860:	08004cdb 	.word	0x08004cdb
 8004864:	08004cdb 	.word	0x08004cdb
 8004868:	08004cdb 	.word	0x08004cdb
 800486c:	08004cdb 	.word	0x08004cdb
 8004870:	08004cdb 	.word	0x08004cdb
 8004874:	08004cdb 	.word	0x08004cdb
 8004878:	08004cdb 	.word	0x08004cdb
 800487c:	08004cdb 	.word	0x08004cdb
 8004880:	08004cdb 	.word	0x08004cdb
 8004884:	08004cdb 	.word	0x08004cdb
 8004888:	08004cdb 	.word	0x08004cdb
 800488c:	08004a05 	.word	0x08004a05
 8004890:	08004c11 	.word	0x08004c11
    {
      case CMD_GET_COMMAND:
        if (p_Interface->p_Cmd->GetCommand != NULL)
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <OPENBL_CommandProcess+0x334>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <OPENBL_CommandProcess+0x298>
        {
          p_Interface->p_Cmd->GetCommand();
 80048a0:	4b29      	ldr	r3, [pc, #164]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 80048aa:	e223      	b.n	8004cf4 <OPENBL_CommandProcess+0x6e0>
          if (p_Interface->p_Ops->SendByte != NULL)
 80048ac:	4b26      	ldr	r3, [pc, #152]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 821d 	beq.w	8004cf4 <OPENBL_CommandProcess+0x6e0>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	201f      	movs	r0, #31
 80048c4:	4798      	blx	r3
        break;
 80048c6:	e215      	b.n	8004cf4 <OPENBL_CommandProcess+0x6e0>

      case CMD_GET_VERSION:
        if (p_Interface->p_Cmd->GetVersion != NULL)
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <OPENBL_CommandProcess+0x2cc>
        {
          p_Interface->p_Cmd->GetVersion();
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 80048de:	e20b      	b.n	8004cf8 <OPENBL_CommandProcess+0x6e4>
          if (p_Interface->p_Ops->SendByte != NULL)
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8205 	beq.w	8004cf8 <OPENBL_CommandProcess+0x6e4>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	201f      	movs	r0, #31
 80048f8:	4798      	blx	r3
        break;
 80048fa:	e1fd      	b.n	8004cf8 <OPENBL_CommandProcess+0x6e4>

      case CMD_GET_ID:
        if (p_Interface->p_Cmd->GetID != NULL)
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <OPENBL_CommandProcess+0x334>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <OPENBL_CommandProcess+0x300>
        {
          p_Interface->p_Cmd->GetID();
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <OPENBL_CommandProcess+0x334>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004912:	e1f3      	b.n	8004cfc <OPENBL_CommandProcess+0x6e8>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <OPENBL_CommandProcess+0x334>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 81ed 	beq.w	8004cfc <OPENBL_CommandProcess+0x6e8>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <OPENBL_CommandProcess+0x334>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	201f      	movs	r0, #31
 800492c:	4798      	blx	r3
        break;
 800492e:	e1e5      	b.n	8004cfc <OPENBL_CommandProcess+0x6e8>

      case CMD_READ_MEMORY:
        if (p_Interface->p_Cmd->ReadMemory != NULL)
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <OPENBL_CommandProcess+0x334>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <OPENBL_CommandProcess+0x338>
        {
          p_Interface->p_Cmd->ReadMemory();
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <OPENBL_CommandProcess+0x334>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004946:	e1db      	b.n	8004d00 <OPENBL_CommandProcess+0x6ec>
 8004948:	200003cc 	.word	0x200003cc
          if (p_Interface->p_Ops->SendByte != NULL)
 800494c:	4b81      	ldr	r3, [pc, #516]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 81d3 	beq.w	8004d00 <OPENBL_CommandProcess+0x6ec>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 800495a:	4b7e      	ldr	r3, [pc, #504]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	201f      	movs	r0, #31
 8004964:	4798      	blx	r3
        break;
 8004966:	e1cb      	b.n	8004d00 <OPENBL_CommandProcess+0x6ec>

      case CMD_WRITE_MEMORY:
        if (p_Interface->p_Cmd->WriteMemory != NULL)
 8004968:	4b7a      	ldr	r3, [pc, #488]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <OPENBL_CommandProcess+0x36c>
        {
          p_Interface->p_Cmd->WriteMemory();
 8004974:	4b77      	ldr	r3, [pc, #476]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 800497e:	e1c1      	b.n	8004d04 <OPENBL_CommandProcess+0x6f0>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004980:	4b74      	ldr	r3, [pc, #464]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 81bb 	beq.w	8004d04 <OPENBL_CommandProcess+0x6f0>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 800498e:	4b71      	ldr	r3, [pc, #452]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	201f      	movs	r0, #31
 8004998:	4798      	blx	r3
        break;
 800499a:	e1b3      	b.n	8004d04 <OPENBL_CommandProcess+0x6f0>

      case CMD_GO:
        if (p_Interface->p_Cmd->Go != NULL)
 800499c:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <OPENBL_CommandProcess+0x3a0>
        {
          p_Interface->p_Cmd->Go();
 80049a8:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 80049b2:	e1a9      	b.n	8004d08 <OPENBL_CommandProcess+0x6f4>
          if (p_Interface->p_Ops->SendByte != NULL)
 80049b4:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 81a3 	beq.w	8004d08 <OPENBL_CommandProcess+0x6f4>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 80049c2:	4b64      	ldr	r3, [pc, #400]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	201f      	movs	r0, #31
 80049cc:	4798      	blx	r3
        break;
 80049ce:	e19b      	b.n	8004d08 <OPENBL_CommandProcess+0x6f4>

      case CMD_READ_PROTECT:
        if (p_Interface->p_Cmd->ReadoutProtect != NULL)
 80049d0:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <OPENBL_CommandProcess+0x3d4>
        {
          p_Interface->p_Cmd->ReadoutProtect();
 80049dc:	4b5d      	ldr	r3, [pc, #372]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 80049e6:	e191      	b.n	8004d0c <OPENBL_CommandProcess+0x6f8>
          if (p_Interface->p_Ops->SendByte != NULL)
 80049e8:	4b5a      	ldr	r3, [pc, #360]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 818b 	beq.w	8004d0c <OPENBL_CommandProcess+0x6f8>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 80049f6:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	201f      	movs	r0, #31
 8004a00:	4798      	blx	r3
        break;
 8004a02:	e183      	b.n	8004d0c <OPENBL_CommandProcess+0x6f8>

      case CMD_READ_UNPROTECT:
        if (p_Interface->p_Cmd->ReadoutUnprotect != NULL)
 8004a04:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <OPENBL_CommandProcess+0x408>
        {
          p_Interface->p_Cmd->ReadoutUnprotect();
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004a1a:	e179      	b.n	8004d10 <OPENBL_CommandProcess+0x6fc>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004a1c:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8173 	beq.w	8004d10 <OPENBL_CommandProcess+0x6fc>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	201f      	movs	r0, #31
 8004a34:	4798      	blx	r3
        break;
 8004a36:	e16b      	b.n	8004d10 <OPENBL_CommandProcess+0x6fc>

      case CMD_EXT_ERASE_MEMORY:
        if (p_Interface->p_Cmd->EraseMemory != NULL)
 8004a38:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <OPENBL_CommandProcess+0x43c>
        {
          p_Interface->p_Cmd->EraseMemory();
 8004a44:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004a4e:	e161      	b.n	8004d14 <OPENBL_CommandProcess+0x700>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004a50:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 815b 	beq.w	8004d14 <OPENBL_CommandProcess+0x700>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004a5e:	4b3d      	ldr	r3, [pc, #244]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	201f      	movs	r0, #31
 8004a68:	4798      	blx	r3
        break;
 8004a6a:	e153      	b.n	8004d14 <OPENBL_CommandProcess+0x700>

      case CMD_LEG_ERASE_MEMORY:
        if (p_Interface->p_Cmd->EraseMemory != NULL)
 8004a6c:	4b39      	ldr	r3, [pc, #228]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <OPENBL_CommandProcess+0x470>
        {
          p_Interface->p_Cmd->EraseMemory();
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004a82:	e149      	b.n	8004d18 <OPENBL_CommandProcess+0x704>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004a84:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8143 	beq.w	8004d18 <OPENBL_CommandProcess+0x704>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004a92:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	201f      	movs	r0, #31
 8004a9c:	4798      	blx	r3
        break;
 8004a9e:	e13b      	b.n	8004d18 <OPENBL_CommandProcess+0x704>

      case CMD_WRITE_PROTECT:
        if (p_Interface->p_Cmd->WriteProtect != NULL)
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <OPENBL_CommandProcess+0x4a4>
        {
          p_Interface->p_Cmd->WriteProtect();
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004ab6:	e131      	b.n	8004d1c <OPENBL_CommandProcess+0x708>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 812b 	beq.w	8004d1c <OPENBL_CommandProcess+0x708>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004ac6:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	201f      	movs	r0, #31
 8004ad0:	4798      	blx	r3
        break;
 8004ad2:	e123      	b.n	8004d1c <OPENBL_CommandProcess+0x708>

      case CMD_WRITE_UNPROTECT:
        if (p_Interface->p_Cmd->WriteUnprotect != NULL)
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <OPENBL_CommandProcess+0x4d8>
        {
          p_Interface->p_Cmd->WriteUnprotect();
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004aea:	e119      	b.n	8004d20 <OPENBL_CommandProcess+0x70c>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8113 	beq.w	8004d20 <OPENBL_CommandProcess+0x70c>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004afa:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	201f      	movs	r0, #31
 8004b04:	4798      	blx	r3
        break;
 8004b06:	e10b      	b.n	8004d20 <OPENBL_CommandProcess+0x70c>

      case CMD_NS_WRITE_MEMORY:
        if (p_Interface->p_Cmd->NsWriteMemory != NULL)
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <OPENBL_CommandProcess+0x50c>
        {
          p_Interface->p_Cmd->NsWriteMemory();
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004b1e:	e101      	b.n	8004d24 <OPENBL_CommandProcess+0x710>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80fb 	beq.w	8004d24 <OPENBL_CommandProcess+0x710>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	201f      	movs	r0, #31
 8004b38:	4798      	blx	r3
        break;
 8004b3a:	e0f3      	b.n	8004d24 <OPENBL_CommandProcess+0x710>

      case CMD_NS_ERASE_MEMORY:
        if (p_Interface->p_Cmd->NsEraseMemory != NULL)
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <OPENBL_CommandProcess+0x544>
        {
          p_Interface->p_Cmd->NsEraseMemory();
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <OPENBL_CommandProcess+0x540>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004b52:	e0e9      	b.n	8004d28 <OPENBL_CommandProcess+0x714>
 8004b54:	200003cc 	.word	0x200003cc
          if (p_Interface->p_Ops->SendByte != NULL)
 8004b58:	4b7e      	ldr	r3, [pc, #504]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80e1 	beq.w	8004d28 <OPENBL_CommandProcess+0x714>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004b66:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	201f      	movs	r0, #31
 8004b70:	4798      	blx	r3
        break;
 8004b72:	e0d9      	b.n	8004d28 <OPENBL_CommandProcess+0x714>

      case CMD_NS_WRITE_PROTECT:
        if (p_Interface->p_Cmd->NsWriteProtect != NULL)
 8004b74:	4b77      	ldr	r3, [pc, #476]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <OPENBL_CommandProcess+0x578>
        {
          p_Interface->p_Cmd->NsWriteProtect();
 8004b80:	4b74      	ldr	r3, [pc, #464]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004b8a:	e0cf      	b.n	8004d2c <OPENBL_CommandProcess+0x718>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80c9 	beq.w	8004d2c <OPENBL_CommandProcess+0x718>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004b9a:	4b6e      	ldr	r3, [pc, #440]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	201f      	movs	r0, #31
 8004ba4:	4798      	blx	r3
        break;
 8004ba6:	e0c1      	b.n	8004d2c <OPENBL_CommandProcess+0x718>

      case CMD_NS_WRITE_UNPROTECT:
        if (p_Interface->p_Cmd->NsWriteUnprotect != NULL)
 8004ba8:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <OPENBL_CommandProcess+0x5ac>
        {
          p_Interface->p_Cmd->NsWriteUnprotect();
 8004bb4:	4b67      	ldr	r3, [pc, #412]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004bbe:	e0b7      	b.n	8004d30 <OPENBL_CommandProcess+0x71c>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004bc0:	4b64      	ldr	r3, [pc, #400]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80b1 	beq.w	8004d30 <OPENBL_CommandProcess+0x71c>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004bce:	4b61      	ldr	r3, [pc, #388]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	201f      	movs	r0, #31
 8004bd8:	4798      	blx	r3
        break;
 8004bda:	e0a9      	b.n	8004d30 <OPENBL_CommandProcess+0x71c>

      case CMD_NS_READ_PROTECT:
        if (p_Interface->p_Cmd->NsReadoutProtect != NULL)
 8004bdc:	4b5d      	ldr	r3, [pc, #372]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <OPENBL_CommandProcess+0x5e0>
        {
          p_Interface->p_Cmd->NsReadoutProtect();
 8004be8:	4b5a      	ldr	r3, [pc, #360]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004bf2:	e09f      	b.n	8004d34 <OPENBL_CommandProcess+0x720>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004bf4:	4b57      	ldr	r3, [pc, #348]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8099 	beq.w	8004d34 <OPENBL_CommandProcess+0x720>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c02:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	201f      	movs	r0, #31
 8004c0c:	4798      	blx	r3
        break;
 8004c0e:	e091      	b.n	8004d34 <OPENBL_CommandProcess+0x720>

      case CMD_NS_READ_UNPROTECT:
        if (p_Interface->p_Cmd->NsReadoutUnprotect != NULL)
 8004c10:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <OPENBL_CommandProcess+0x614>
        {
          p_Interface->p_Cmd->NsReadoutUnprotect();
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004c26:	e087      	b.n	8004d38 <OPENBL_CommandProcess+0x724>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004c28:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8081 	beq.w	8004d38 <OPENBL_CommandProcess+0x724>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c36:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	201f      	movs	r0, #31
 8004c40:	4798      	blx	r3
        break;
 8004c42:	e079      	b.n	8004d38 <OPENBL_CommandProcess+0x724>

      case CMD_SPEED:
        if (p_Interface->p_Cmd->Speed != NULL)
 8004c44:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <OPENBL_CommandProcess+0x648>
        {
          p_Interface->p_Cmd->Speed();
 8004c50:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004c5a:	e06f      	b.n	8004d3c <OPENBL_CommandProcess+0x728>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004c5c:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d069      	beq.n	8004d3c <OPENBL_CommandProcess+0x728>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c68:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	201f      	movs	r0, #31
 8004c72:	4798      	blx	r3
        break;
 8004c74:	e062      	b.n	8004d3c <OPENBL_CommandProcess+0x728>

      case CMD_SPECIAL_COMMAND:
        if (p_Interface->p_Cmd->SpecialCommand != NULL)
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <OPENBL_CommandProcess+0x67a>
        {
          p_Interface->p_Cmd->SpecialCommand();
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004c8c:	e058      	b.n	8004d40 <OPENBL_CommandProcess+0x72c>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004c8e:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d052      	beq.n	8004d40 <OPENBL_CommandProcess+0x72c>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	201f      	movs	r0, #31
 8004ca4:	4798      	blx	r3
        break;
 8004ca6:	e04b      	b.n	8004d40 <OPENBL_CommandProcess+0x72c>

      case CMD_EXTENDED_SPECIAL_COMMAND:
        if (p_Interface->p_Cmd->ExtendedSpecialCommand != NULL)
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <OPENBL_CommandProcess+0x6ac>
        {
          p_Interface->p_Cmd->ExtendedSpecialCommand();
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	4798      	blx	r3
          if (p_Interface->p_Ops->SendByte != NULL)
          {
            p_Interface->p_Ops->SendByte(NACK_BYTE);
          }
        }
        break;
 8004cbe:	e041      	b.n	8004d44 <OPENBL_CommandProcess+0x730>
          if (p_Interface->p_Ops->SendByte != NULL)
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d03b      	beq.n	8004d44 <OPENBL_CommandProcess+0x730>
            p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	201f      	movs	r0, #31
 8004cd6:	4798      	blx	r3
        break;
 8004cd8:	e034      	b.n	8004d44 <OPENBL_CommandProcess+0x730>

      /* Unknown command opcode */
      default:
        if (p_Interface->p_Ops->SendByte != NULL)
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d030      	beq.n	8004d48 <OPENBL_CommandProcess+0x734>
        {
          p_Interface->p_Ops->SendByte(NACK_BYTE);
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <OPENBL_CommandProcess+0x740>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	201f      	movs	r0, #31
 8004cf0:	4798      	blx	r3
        }
        break;
 8004cf2:	e029      	b.n	8004d48 <OPENBL_CommandProcess+0x734>
        break;
 8004cf4:	bf00      	nop
 8004cf6:	e028      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004cf8:	bf00      	nop
 8004cfa:	e026      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004cfc:	bf00      	nop
 8004cfe:	e024      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d00:	bf00      	nop
 8004d02:	e022      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d04:	bf00      	nop
 8004d06:	e020      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d08:	bf00      	nop
 8004d0a:	e01e      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e01c      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d10:	bf00      	nop
 8004d12:	e01a      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d14:	bf00      	nop
 8004d16:	e018      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d18:	bf00      	nop
 8004d1a:	e016      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d1c:	bf00      	nop
 8004d1e:	e014      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d20:	bf00      	nop
 8004d22:	e012      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d24:	bf00      	nop
 8004d26:	e010      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e00e      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e00c      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d30:	bf00      	nop
 8004d32:	e00a      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d34:	bf00      	nop
 8004d36:	e008      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d38:	bf00      	nop
 8004d3a:	e006      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d3c:	bf00      	nop
 8004d3e:	e004      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <OPENBL_CommandProcess+0x736>
        break;
 8004d48:	bf00      	nop
    }
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200003cc 	.word	0x200003cc

08004d58 <OPENBL_I2C_GetCommandsList>:
/**
  * @brief  This function is used to get a pointer to the structure that contains the available I2C commands.
  * @return Returns a pointer to the OPENBL_I2C_Commands struct.
  */
OPENBL_CommandsTypeDef *OPENBL_I2C_GetCommandsList(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
    NULL,
    OPENBL_I2C_SpecialCommand,
    OPENBL_I2C_ExtendedSpecialCommand
  };

  OPENBL_I2C_SetCommandsList(&OPENBL_I2C_Commands);
 8004d5c:	4802      	ldr	r0, [pc, #8]	; (8004d68 <OPENBL_I2C_GetCommandsList+0x10>)
 8004d5e:	f000 f805 	bl	8004d6c <OPENBL_I2C_SetCommandsList>

  return (&OPENBL_I2C_Commands);
 8004d62:	4b01      	ldr	r3, [pc, #4]	; (8004d68 <OPENBL_I2C_GetCommandsList+0x10>)
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000158 	.word	0x20000158

08004d6c <OPENBL_I2C_SetCommandsList>:
/**
  * @brief  This function is used to set a pointer to the structure that contains the available I2C commands.
  * @retval Returns a pointer to the OPENBL_I2C_Commands struct.
  */
void OPENBL_I2C_SetCommandsList(OPENBL_CommandsTypeDef *pI2cCmd)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Get the list of commands supported & their numbers */
  I2cCommandsNumber = OPENBL_I2C_ConstructCommandsTable(pI2cCmd);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fef3 	bl	8005b60 <OPENBL_I2C_ConstructCommandsTable>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <OPENBL_I2C_SetCommandsList+0x20>)
 8004d80:	701a      	strb	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000086f 	.word	0x2000086f

08004d90 <OPENBL_I2C_GetCommand>:
/**
  * @brief  This function is used to get the list of the available I2C commands
  * @retval None.
  */
void OPENBL_I2C_GetCommand(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  uint32_t counter;

  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004d96:	2079      	movs	r0, #121	; 0x79
 8004d98:	f7fb ff26 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Wait for address to match */
  OPENBL_I2C_WaitAddress();
 8004d9c:	f7fb ff04 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  /* Send the number of commands supported by the I2C protocol */
  OPENBL_I2C_SendByte(I2cCommandsNumber);
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <OPENBL_I2C_GetCommand+0x5c>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fed5 	bl	8000b54 <OPENBL_I2C_SendByte>

  /* Send I2C protocol version */
  OPENBL_I2C_SendByte(OPENBL_I2C_VERSION);
 8004daa:	2012      	movs	r0, #18
 8004dac:	f7fb fed2 	bl	8000b54 <OPENBL_I2C_SendByte>

  /* Send the list of supported commands */
  for (counter = 0U; counter < I2cCommandsNumber; counter++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	e009      	b.n	8004dca <OPENBL_I2C_GetCommand+0x3a>
  {
    OPENBL_I2C_SendByte(a_OPENBL_I2C_CommandsList[counter]);
 8004db6:	4a0e      	ldr	r2, [pc, #56]	; (8004df0 <OPENBL_I2C_GetCommand+0x60>)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb fec8 	bl	8000b54 <OPENBL_I2C_SendByte>
  for (counter = 0U; counter < I2cCommandsNumber; counter++)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <OPENBL_I2C_GetCommand+0x5c>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d3ef      	bcc.n	8004db6 <OPENBL_I2C_GetCommand+0x26>
  }

  /* Wait until NACK is detected */
  OPENBL_I2C_WaitNack();
 8004dd6:	f002 f833 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>

  /* Wait until STOP is detected */
  OPENBL_I2C_WaitStop();
 8004dda:	f002 f835 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>

  /* Send last Acknowledge synchronization byte */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004dde:	2079      	movs	r0, #121	; 0x79
 8004de0:	f7fb ff02 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	2000086f 	.word	0x2000086f
 8004df0:	2000085c 	.word	0x2000085c

08004df4 <OPENBL_I2C_GetVersion>:
/**
  * @brief  This function is used to get the I2C protocol version.
  * @retval None.
  */
void OPENBL_I2C_GetVersion(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004df8:	2079      	movs	r0, #121	; 0x79
 8004dfa:	f7fb fef5 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Wait for address to match */
  OPENBL_I2C_WaitAddress();
 8004dfe:	f7fb fed3 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  /* Send I2C protocol version */
  OPENBL_I2C_SendByte(OPENBL_I2C_VERSION);
 8004e02:	2012      	movs	r0, #18
 8004e04:	f7fb fea6 	bl	8000b54 <OPENBL_I2C_SendByte>

  /* Wait until NACK is detected */
  OPENBL_I2C_WaitNack();
 8004e08:	f002 f81a 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>

  /* Wait until STOP is detected */
  OPENBL_I2C_WaitStop();
 8004e0c:	f002 f81c 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>

  /* Send last Acknowledge synchronization byte */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004e10:	2079      	movs	r0, #121	; 0x79
 8004e12:	f7fb fee9 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <OPENBL_I2C_GetID>:
/**
  * @brief  This function is used to get the device ID.
  * @retval None.
  */
void OPENBL_I2C_GetID(void)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004e1e:	2079      	movs	r0, #121	; 0x79
 8004e20:	f7fb fee2 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Wait for address to match */
  OPENBL_I2C_WaitAddress();
 8004e24:	f7fb fec0 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  OPENBL_I2C_SendByte(0x01);
 8004e28:	2001      	movs	r0, #1
 8004e2a:	f7fb fe93 	bl	8000b54 <OPENBL_I2C_SendByte>

  /* Send the device ID starting by the MSB byte then the LSB byte */
  OPENBL_I2C_SendByte(DEVICE_ID_MSB);
 8004e2e:	2004      	movs	r0, #4
 8004e30:	f7fb fe90 	bl	8000b54 <OPENBL_I2C_SendByte>
  OPENBL_I2C_SendByte(DEVICE_ID_LSB);
 8004e34:	2097      	movs	r0, #151	; 0x97
 8004e36:	f7fb fe8d 	bl	8000b54 <OPENBL_I2C_SendByte>

  /* Wait until NACK is detected */
  OPENBL_I2C_WaitNack();
 8004e3a:	f002 f801 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>

  /* Wait until STOP is detected */
  OPENBL_I2C_WaitStop();
 8004e3e:	f002 f803 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>

  /* Send last Acknowledge synchronization byte */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004e42:	2079      	movs	r0, #121	; 0x79
 8004e44:	f7fb fed0 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004e48:	bf00      	nop
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <OPENBL_I2C_ReadMemory>:
/**
 * @brief  This function is used to read memory from the device.
 * @retval None.
 */
void OPENBL_I2C_ReadMemory(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
  uint32_t memory_index;
  uint8_t data;
  uint8_t xor;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8004e52:	f7fb fada 	bl	800040a <Common_GetProtectionStatus>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <OPENBL_I2C_ReadMemory+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004e5c:	201f      	movs	r0, #31
 8004e5e:	f7fb fec3 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        /* Wait until STOP is detected */
        OPENBL_I2C_WaitStop();
      }
    }
  }
}
 8004e62:	e048      	b.n	8004ef6 <OPENBL_I2C_ReadMemory+0xaa>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004e64:	2079      	movs	r0, #121	; 0x79
 8004e66:	f7fb febf 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    if (OPENBL_I2C_GetAddress(&address) == NACK_BYTE)
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fcc2 	bl	80057f6 <OPENBL_I2C_GetAddress>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b1f      	cmp	r3, #31
 8004e76:	d103      	bne.n	8004e80 <OPENBL_I2C_ReadMemory+0x34>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004e78:	201f      	movs	r0, #31
 8004e7a:	f7fb feb5 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004e7e:	e03a      	b.n	8004ef6 <OPENBL_I2C_ReadMemory+0xaa>
      OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004e80:	2079      	movs	r0, #121	; 0x79
 8004e82:	f7fb feb1 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      OPENBL_I2C_WaitAddress();
 8004e86:	f7fb fe8f 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
      data = OPENBL_I2C_ReadByte();
 8004e8a:	f7fb fe43 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	72fb      	strb	r3, [r7, #11]
      xor  = ~data;
 8004e92:	7afb      	ldrb	r3, [r7, #11]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	72bb      	strb	r3, [r7, #10]
      if (OPENBL_I2C_ReadByte() != xor)
 8004e98:	f7fb fe3c 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	7abb      	ldrb	r3, [r7, #10]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <OPENBL_I2C_ReadMemory+0x62>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004ea6:	201f      	movs	r0, #31
 8004ea8:	f7fb fe9e 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004eac:	e023      	b.n	8004ef6 <OPENBL_I2C_ReadMemory+0xaa>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004eae:	2079      	movs	r0, #121	; 0x79
 8004eb0:	f7fb fe9a 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        memory_index = OPENBL_MEM_GetMemoryIndex(address);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 f868 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 8004ebc:	6078      	str	r0, [r7, #4]
        OPENBL_I2C_WaitAddress();
 8004ebe:	f7fb fe73 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e00e      	b.n	8004ee8 <OPENBL_I2C_ReadMemory+0x9c>
          OPENBL_I2C_SendByte(OPENBL_MEM_Read(address, memory_index));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 f88c 	bl	8005fec <OPENBL_MEM_Read>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb fe3c 	bl	8000b54 <OPENBL_I2C_SendByte>
          address++;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	603b      	str	r3, [r7, #0]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1ed      	bne.n	8004eca <OPENBL_I2C_ReadMemory+0x7e>
        OPENBL_I2C_WaitNack();
 8004eee:	f001 ffa7 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>
        OPENBL_I2C_WaitStop();
 8004ef2:	f001 ffa9 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <OPENBL_I2C_WriteMemory>:
/**
 * @brief  This function is used to write in to device memory.
 * @retval None.
 */
void OPENBL_I2C_WriteMemory(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
  uint32_t codesize;
  uint8_t *p_ramaddress;
  uint8_t data;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8004f06:	f7fb fa80 	bl	800040a <Common_GetProtectionStatus>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <OPENBL_I2C_WriteMemory+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004f10:	201f      	movs	r0, #31
 8004f12:	f7fb fe69 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        /* Start post processing task if needed */
        Common_StartPostProcessing();
      }
    }
  }
}
 8004f16:	e04a      	b.n	8004fae <OPENBL_I2C_WriteMemory+0xae>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004f18:	2079      	movs	r0, #121	; 0x79
 8004f1a:	f7fb fe65 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    if (OPENBL_I2C_GetAddress(&address) == NACK_BYTE)
 8004f1e:	463b      	mov	r3, r7
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fc68 	bl	80057f6 <OPENBL_I2C_GetAddress>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b1f      	cmp	r3, #31
 8004f2a:	d103      	bne.n	8004f34 <OPENBL_I2C_WriteMemory+0x34>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004f2c:	201f      	movs	r0, #31
 8004f2e:	f7fb fe5b 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004f32:	e03c      	b.n	8004fae <OPENBL_I2C_WriteMemory+0xae>
      OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004f34:	2079      	movs	r0, #121	; 0x79
 8004f36:	f7fb fe57 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      p_ramaddress = (uint8_t *)I2C_RAM_Buf;
 8004f3a:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <OPENBL_I2C_WriteMemory+0xb8>)
 8004f3c:	60fb      	str	r3, [r7, #12]
      OPENBL_I2C_WaitAddress();
 8004f3e:	f7fb fe33 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
      data = OPENBL_I2C_ReadByte();
 8004f42:	f7fb fde7 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8004f46:	4603      	mov	r3, r0
 8004f48:	72fb      	strb	r3, [r7, #11]
      codesize = (uint32_t)data + 1U;
 8004f4a:	7afb      	ldrb	r3, [r7, #11]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	607b      	str	r3, [r7, #4]
      xor = data;
 8004f50:	7afb      	ldrb	r3, [r7, #11]
 8004f52:	617b      	str	r3, [r7, #20]
      for (counter = codesize; counter != 0U ; counter--)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e010      	b.n	8004f7c <OPENBL_I2C_WriteMemory+0x7c>
        data    = OPENBL_I2C_ReadByte();
 8004f5a:	f7fb fddb 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	72fb      	strb	r3, [r7, #11]
        xor ^= data;
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4053      	eors	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
        *(__IO uint8_t *)(p_ramaddress) = data;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	7afa      	ldrb	r2, [r7, #11]
 8004f6e:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
      for (counter = codesize; counter != 0U ; counter--)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1eb      	bne.n	8004f5a <OPENBL_I2C_WriteMemory+0x5a>
      if (OPENBL_I2C_ReadByte() != xor)
 8004f82:	f7fb fdc7 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <OPENBL_I2C_WriteMemory+0x98>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004f90:	201f      	movs	r0, #31
 8004f92:	f7fb fe29 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004f96:	e00a      	b.n	8004fae <OPENBL_I2C_WriteMemory+0xae>
        OPENBL_MEM_Write(address, (uint8_t *)I2C_RAM_Buf, codesize);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4906      	ldr	r1, [pc, #24]	; (8004fb8 <OPENBL_I2C_WriteMemory+0xb8>)
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 f854 	bl	800604c <OPENBL_MEM_Write>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004fa4:	2079      	movs	r0, #121	; 0x79
 8004fa6:	f7fb fe1f 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        Common_StartPostProcessing();
 8004faa:	f7fb fa4f 	bl	800044c <Common_StartPostProcessing>
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200003d0 	.word	0x200003d0

08004fbc <OPENBL_I2C_Go>:
/**
  * @brief  This function is used to jump to the user application.
  * @retval None.
  */
void OPENBL_I2C_Go(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
  uint32_t address;
  uint8_t status;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8004fc2:	f7fb fa22 	bl	800040a <Common_GetProtectionStatus>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <OPENBL_I2C_Go+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004fcc:	201f      	movs	r0, #31
 8004fce:	f7fb fe0b 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

        OPENBL_MEM_JumpToAddress(address);
      }
    }
  }
}
 8004fd2:	e021      	b.n	8005018 <OPENBL_I2C_Go+0x5c>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8004fd4:	2079      	movs	r0, #121	; 0x79
 8004fd6:	f7fb fe07 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    if (OPENBL_I2C_GetAddress(&address) == NACK_BYTE)
 8004fda:	463b      	mov	r3, r7
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fc0a 	bl	80057f6 <OPENBL_I2C_GetAddress>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b1f      	cmp	r3, #31
 8004fe6:	d103      	bne.n	8004ff0 <OPENBL_I2C_Go+0x34>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8004fe8:	201f      	movs	r0, #31
 8004fea:	f7fb fdfd 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8004fee:	e013      	b.n	8005018 <OPENBL_I2C_Go+0x5c>
      status = OPENBL_MEM_CheckJumpAddress(address);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f960 	bl	80062b8 <OPENBL_MEM_CheckJumpAddress>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	71fb      	strb	r3, [r7, #7]
      if (status == 0U)
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <OPENBL_I2C_Go+0x4e>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005002:	201f      	movs	r0, #31
 8005004:	f7fb fdf0 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005008:	e006      	b.n	8005018 <OPENBL_I2C_Go+0x5c>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 800500a:	2079      	movs	r0, #121	; 0x79
 800500c:	f7fb fdec 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        OPENBL_MEM_JumpToAddress(address);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f001 f8ba 	bl	800618c <OPENBL_MEM_JumpToAddress>
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <OPENBL_I2C_ReadoutProtect>:
/**
 * @brief  This function is used to enable readout protection.
 * @retval None.
 */
void OPENBL_I2C_ReadoutProtect(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8005024:	f7fb f9f1 	bl	800040a <Common_GetProtectionStatus>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <OPENBL_I2C_ReadoutProtect+0x16>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 800502e:	201f      	movs	r0, #31
 8005030:	f7fb fdda 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);

    /* Start post processing task if needed */
    Common_StartPostProcessing();
  }
}
 8005034:	e00c      	b.n	8005050 <OPENBL_I2C_ReadoutProtect+0x30>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005036:	2079      	movs	r0, #121	; 0x79
 8005038:	f7fb fdd6 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, ENABLE);
 800503c:	2101      	movs	r1, #1
 800503e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005042:	f001 f831 	bl	80060a8 <OPENBL_MEM_SetReadOutProtection>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005046:	2079      	movs	r0, #121	; 0x79
 8005048:	f7fb fdce 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    Common_StartPostProcessing();
 800504c:	f7fb f9fe 	bl	800044c <Common_StartPostProcessing>
}
 8005050:	bf00      	nop
 8005052:	bd80      	pop	{r7, pc}

08005054 <OPENBL_I2C_ReadoutUnprotect>:
 *         so the send of second acknowledge after Disabling the read protection
 *         is not possible what make the communication with the host get lost
 * @retval None.
 */
void OPENBL_I2C_ReadoutUnprotect(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005058:	2079      	movs	r0, #121	; 0x79
 800505a:	f7fb fdc5 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 800505e:	2079      	movs	r0, #121	; 0x79
 8005060:	f7fb fdc2 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, DISABLE);
 8005064:	2100      	movs	r1, #0
 8005066:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800506a:	f001 f81d 	bl	80060a8 <OPENBL_MEM_SetReadOutProtection>

  /* Start post processing task if needed */
  Common_StartPostProcessing();
 800506e:	f7fb f9ed 	bl	800044c <Common_StartPostProcessing>
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <OPENBL_I2C_EraseMemory>:
/**
 * @brief  This function is used to erase a memory.
 * @retval None.
 */
void OPENBL_I2C_EraseMemory(void)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af00      	add	r7, sp, #0
  uint32_t xor;
  uint32_t counter;
  uint32_t numpage;
  uint16_t data;
  ErrorStatus error_value;
  uint8_t status = ACK_BYTE;
 800507e:	2379      	movs	r3, #121	; 0x79
 8005080:	75fb      	strb	r3, [r7, #23]
  uint8_t *p_ramaddress;

  p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 8005082:	4b78      	ldr	r3, [pc, #480]	; (8005264 <OPENBL_I2C_EraseMemory+0x1ec>)
 8005084:	613b      	str	r3, [r7, #16]

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 8005086:	f7fb f9c0 	bl	800040a <Common_GetProtectionStatus>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <OPENBL_I2C_EraseMemory+0x20>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005090:	201f      	movs	r0, #31
 8005092:	f7fb fda9 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      }
    }

    OPENBL_I2C_SendAcknowledgeByte(status);
  }
}
 8005096:	e0e0      	b.n	800525a <OPENBL_I2C_EraseMemory+0x1e2>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005098:	2079      	movs	r0, #121	; 0x79
 800509a:	f7fb fda5 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_WaitAddress();
 800509e:	f7fb fd83 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
    data = OPENBL_I2C_ReadByte();
 80050a2:	f7fb fd37 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80050a6:	4603      	mov	r3, r0
 80050a8:	81fb      	strh	r3, [r7, #14]
    data = (uint16_t)(data << 8) | OPENBL_I2C_ReadByte();
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	b29c      	uxth	r4, r3
 80050b0:	f7fb fd30 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80050b4:	4603      	mov	r3, r0
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4323      	orrs	r3, r4
 80050ba:	81fb      	strh	r3, [r7, #14]
    xor  = ((uint32_t)data & 0xFF00U) >> 8;
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	61fb      	str	r3, [r7, #28]
    xor ^= (uint32_t)data & 0x00FFU;
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	4053      	eors	r3, r2
 80050cc:	61fb      	str	r3, [r7, #28]
    if ((data & 0xFFF0U) == 0xFFF0U)
 80050ce:	89fa      	ldrh	r2, [r7, #14]
 80050d0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80050d4:	4013      	ands	r3, r2
 80050d6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80050da:	4293      	cmp	r3, r2
 80050dc:	d13d      	bne.n	800515a <OPENBL_I2C_EraseMemory+0xe2>
      if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 80050de:	f7fb fd19 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d004      	beq.n	80050f8 <OPENBL_I2C_EraseMemory+0x80>
        OPENBL_I2C_WaitStop();
 80050ee:	f001 feab 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        status = NACK_BYTE;
 80050f2:	231f      	movs	r3, #31
 80050f4:	75fb      	strb	r3, [r7, #23]
 80050f6:	e0ac      	b.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
        OPENBL_I2C_WaitStop();
 80050f8:	f001 fea6 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        if ((data == 0xFFFFU) || (data == 0xFFFEU) || (data == 0xFFFDU))
 80050fc:	89fb      	ldrh	r3, [r7, #14]
 80050fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <OPENBL_I2C_EraseMemory+0xa2>
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <OPENBL_I2C_EraseMemory+0xa2>
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8005116:	4293      	cmp	r3, r2
 8005118:	d11c      	bne.n	8005154 <OPENBL_I2C_EraseMemory+0xdc>
          p_ramaddress[0] = (uint8_t)(data & 0x00FFU);
 800511a:	89fb      	ldrh	r3, [r7, #14]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	701a      	strb	r2, [r3, #0]
          p_ramaddress[1] = (uint8_t)((data & 0xFF00U) >> 8);
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	0a1b      	lsrs	r3, r3, #8
 8005126:	b29a      	uxth	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	3301      	adds	r3, #1
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
          error_value = OPENBL_MEM_MassErase(OPENBL_DEFAULT_MEM, (uint8_t *) I2C_RAM_Buf, I2C_RAM_BUFFER_SIZE);
 8005130:	f240 428c 	movw	r2, #1164	; 0x48c
 8005134:	494b      	ldr	r1, [pc, #300]	; (8005264 <OPENBL_I2C_EraseMemory+0x1ec>)
 8005136:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800513a:	f001 f851 	bl	80061e0 <OPENBL_MEM_MassErase>
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
          if (error_value == SUCCESS)
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <OPENBL_I2C_EraseMemory+0xd6>
            status = ACK_BYTE;
 8005148:	2379      	movs	r3, #121	; 0x79
 800514a:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 800514c:	e081      	b.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
            status = NACK_BYTE;
 800514e:	231f      	movs	r3, #31
 8005150:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 8005152:	e07e      	b.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
          status = NACK_BYTE;
 8005154:	231f      	movs	r3, #31
 8005156:	75fb      	strb	r3, [r7, #23]
 8005158:	e07b      	b.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
      if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 800515a:	f7fb fcdb 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	429a      	cmp	r2, r3
 8005168:	d004      	beq.n	8005174 <OPENBL_I2C_EraseMemory+0xfc>
        OPENBL_I2C_WaitStop();
 800516a:	f001 fe6d 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        status = NACK_BYTE;
 800516e:	231f      	movs	r3, #31
 8005170:	75fb      	strb	r3, [r7, #23]
 8005172:	e06e      	b.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
        OPENBL_I2C_WaitStop();
 8005174:	f001 fe68 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005178:	2079      	movs	r0, #121	; 0x79
 800517a:	f7fb fd35 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 800517e:	4b39      	ldr	r3, [pc, #228]	; (8005264 <OPENBL_I2C_EraseMemory+0x1ec>)
 8005180:	613b      	str	r3, [r7, #16]
        numpage = (uint32_t)data + 1U;
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	3301      	adds	r3, #1
 8005186:	60bb      	str	r3, [r7, #8]
        *p_ramaddress = (uint8_t)(numpage & 0x00FFU);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	3301      	adds	r3, #1
 8005194:	613b      	str	r3, [r7, #16]
        *p_ramaddress = (uint8_t)((numpage & 0xFF00U) >> 8);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	b2da      	uxtb	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3301      	adds	r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
        OPENBL_I2C_WaitAddress();
 80051a6:	f7fb fcff 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
        xor = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
        for (counter = numpage; counter != 0U ; counter--)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e02e      	b.n	8005212 <OPENBL_I2C_EraseMemory+0x19a>
          data  = OPENBL_I2C_ReadByte();
 80051b4:	f7fb fcae 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80051b8:	4603      	mov	r3, r0
 80051ba:	81fb      	strh	r3, [r7, #14]
          xor  ^= data;
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	4053      	eors	r3, r2
 80051c2:	61fb      	str	r3, [r7, #28]
          data  = (uint16_t)((data & 0x00FFU) << 8);
 80051c4:	89fb      	ldrh	r3, [r7, #14]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	81fb      	strh	r3, [r7, #14]
          data |= (uint8_t)(OPENBL_I2C_ReadByte() & 0x00FFU);
 80051ca:	f7fb fca3 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	81fb      	strh	r3, [r7, #14]
          xor  ^= ((uint32_t)data & 0x00FFU);
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	4053      	eors	r3, r2
 80051e0:	61fb      	str	r3, [r7, #28]
          if (counter < (I2C_RAM_BUFFER_SIZE / 2U))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f240 2245 	movw	r2, #581	; 0x245
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d80f      	bhi.n	800520c <OPENBL_I2C_EraseMemory+0x194>
            *p_ramaddress = (uint8_t)(data & 0x00FFU);
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	701a      	strb	r2, [r3, #0]
            p_ramaddress++;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3301      	adds	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
            *p_ramaddress = (uint8_t)((data & 0xFF00U) >> 8);
 80051fa:	89fb      	ldrh	r3, [r7, #14]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	b29b      	uxth	r3, r3
 8005200:	b2da      	uxtb	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	701a      	strb	r2, [r3, #0]
            p_ramaddress++;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3301      	adds	r3, #1
 800520a:	613b      	str	r3, [r7, #16]
        for (counter = numpage; counter != 0U ; counter--)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	3b01      	subs	r3, #1
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1cd      	bne.n	80051b4 <OPENBL_I2C_EraseMemory+0x13c>
        if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 8005218:	f7fb fc7c 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	429a      	cmp	r2, r3
 8005226:	d004      	beq.n	8005232 <OPENBL_I2C_EraseMemory+0x1ba>
          OPENBL_I2C_WaitStop();
 8005228:	f001 fe0e 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
          status = NACK_BYTE;
 800522c:	231f      	movs	r3, #31
 800522e:	75fb      	strb	r3, [r7, #23]
 8005230:	e00f      	b.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
          OPENBL_I2C_WaitStop();
 8005232:	f001 fe09 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
          error_value = OPENBL_MEM_Erase(OPENBL_DEFAULT_MEM, (uint8_t *) I2C_RAM_Buf, I2C_RAM_BUFFER_SIZE);
 8005236:	f240 428c 	movw	r2, #1164	; 0x48c
 800523a:	490a      	ldr	r1, [pc, #40]	; (8005264 <OPENBL_I2C_EraseMemory+0x1ec>)
 800523c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005240:	f001 f804 	bl	800624c <OPENBL_MEM_Erase>
 8005244:	4603      	mov	r3, r0
 8005246:	71fb      	strb	r3, [r7, #7]
          if (error_value == SUCCESS)
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <OPENBL_I2C_EraseMemory+0x1da>
            status = ACK_BYTE;
 800524e:	2379      	movs	r3, #121	; 0x79
 8005250:	75fb      	strb	r3, [r7, #23]
    OPENBL_I2C_SendAcknowledgeByte(status);
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fb fcc7 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 800525a:	bf00      	nop
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	bf00      	nop
 8005264:	200003d0 	.word	0x200003d0

08005268 <OPENBL_I2C_WriteProtect>:
/**
 * @brief  This function is used to enable write protect.
 * @retval None.
 */
void OPENBL_I2C_WriteProtect(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
  uint8_t xor;
  ErrorStatus error_value;
  uint8_t *p_ramaddress;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 800526e:	f7fb f8cc 	bl	800040a <Common_GetProtectionStatus>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <OPENBL_I2C_WriteProtect+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005278:	201f      	movs	r0, #31
 800527a:	f7fb fcb5 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
          Common_StartPostProcessing();
        }
      }
    }
  }
}
 800527e:	e05c      	b.n	800533a <OPENBL_I2C_WriteProtect+0xd2>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005280:	2079      	movs	r0, #121	; 0x79
 8005282:	f7fb fcb1 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_WaitAddress();
 8005286:	f7fb fc8f 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
    data = OPENBL_I2C_ReadByte();
 800528a:	f7fb fc43 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
    xor  = ~data;
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	43db      	mvns	r3, r3
 8005296:	737b      	strb	r3, [r7, #13]
    if (OPENBL_I2C_ReadByte() != xor)
 8005298:	f7fb fc3c 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	7b7b      	ldrb	r3, [r7, #13]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d005      	beq.n	80052b2 <OPENBL_I2C_WriteProtect+0x4a>
      OPENBL_I2C_WaitStop();
 80052a6:	f001 fdcf 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 80052aa:	201f      	movs	r0, #31
 80052ac:	f7fb fc9c 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 80052b0:	e043      	b.n	800533a <OPENBL_I2C_WriteProtect+0xd2>
      OPENBL_I2C_WaitStop();
 80052b2:	f001 fdc9 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
      OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80052b6:	2079      	movs	r0, #121	; 0x79
 80052b8:	f7fb fc96 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <OPENBL_I2C_WriteProtect+0xdc>)
 80052be:	60bb      	str	r3, [r7, #8]
      length       = (uint16_t) data + 1U;
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3301      	adds	r3, #1
 80052c6:	80bb      	strh	r3, [r7, #4]
      xor = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	737b      	strb	r3, [r7, #13]
      OPENBL_I2C_WaitAddress();
 80052cc:	f7fb fc6c 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
      for (counter = (length); counter != 0U ; counter--)
 80052d0:	88bb      	ldrh	r3, [r7, #4]
 80052d2:	81fb      	strh	r3, [r7, #14]
 80052d4:	e010      	b.n	80052f8 <OPENBL_I2C_WriteProtect+0x90>
        data  = OPENBL_I2C_ReadByte();
 80052d6:	f7fb fc1d 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80052da:	4603      	mov	r3, r0
 80052dc:	71fb      	strb	r3, [r7, #7]
        xor  ^= data;
 80052de:	7b7a      	ldrb	r2, [r7, #13]
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	4053      	eors	r3, r2
 80052e4:	737b      	strb	r3, [r7, #13]
        *(__IO uint8_t *)(p_ramaddress) = (uint8_t) data;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	79fa      	ldrb	r2, [r7, #7]
 80052ea:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60bb      	str	r3, [r7, #8]
      for (counter = (length); counter != 0U ; counter--)
 80052f2:	89fb      	ldrh	r3, [r7, #14]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	81fb      	strh	r3, [r7, #14]
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1eb      	bne.n	80052d6 <OPENBL_I2C_WriteProtect+0x6e>
      if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 80052fe:	f7fb fc09 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	7b7b      	ldrb	r3, [r7, #13]
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <OPENBL_I2C_WriteProtect+0xac>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 800530c:	201f      	movs	r0, #31
 800530e:	f7fb fc6b 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005312:	e012      	b.n	800533a <OPENBL_I2C_WriteProtect+0xd2>
        p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <OPENBL_I2C_WriteProtect+0xdc>)
 8005316:	60bb      	str	r3, [r7, #8]
        error_value = OPENBL_MEM_SetWriteProtection(ENABLE, OPENBL_DEFAULT_MEM, p_ramaddress, length);
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005320:	2001      	movs	r0, #1
 8005322:	f000 fefb 	bl	800611c <OPENBL_MEM_SetWriteProtection>
 8005326:	4603      	mov	r3, r0
 8005328:	70fb      	strb	r3, [r7, #3]
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 800532a:	2079      	movs	r0, #121	; 0x79
 800532c:	f7fb fc5c 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        if (error_value == SUCCESS)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <OPENBL_I2C_WriteProtect+0xd2>
          Common_StartPostProcessing();
 8005336:	f7fb f889 	bl	800044c <Common_StartPostProcessing>
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200003d0 	.word	0x200003d0

08005348 <OPENBL_I2C_WriteUnprotect>:
/**
 * @brief  This function is used to disable write protect.
 * @retval None.
 */
void OPENBL_I2C_WriteUnprotect(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 800534e:	f7fb f85c 	bl	800040a <Common_GetProtectionStatus>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <OPENBL_I2C_WriteUnprotect+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005358:	201f      	movs	r0, #31
 800535a:	f7fb fc45 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    {
      /* Start post processing task if needed */
      Common_StartPostProcessing();
    }
  }
}
 800535e:	e013      	b.n	8005388 <OPENBL_I2C_WriteUnprotect+0x40>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005360:	2079      	movs	r0, #121	; 0x79
 8005362:	f7fb fc41 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, OPENBL_DEFAULT_MEM, NULL, 0);
 8005366:	2300      	movs	r3, #0
 8005368:	2200      	movs	r2, #0
 800536a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800536e:	2000      	movs	r0, #0
 8005370:	f000 fed4 	bl	800611c <OPENBL_MEM_SetWriteProtection>
 8005374:	4603      	mov	r3, r0
 8005376:	71fb      	strb	r3, [r7, #7]
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005378:	2079      	movs	r0, #121	; 0x79
 800537a:	f7fb fc35 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    if (error_value == SUCCESS)
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <OPENBL_I2C_WriteUnprotect+0x40>
      Common_StartPostProcessing();
 8005384:	f7fb f862 	bl	800044c <Common_StartPostProcessing>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <OPENBL_I2C_NonStretchWriteMemory>:
 * @note   In this mode, when the write memory operation is executed the device
 *         send busy bytes to the host
 * @retval None.
 */
void OPENBL_I2C_NonStretchWriteMemory(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
  uint32_t codesize;
  uint8_t *p_ramaddress;
  uint8_t data;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8005396:	f7fb f838 	bl	800040a <Common_GetProtectionStatus>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <OPENBL_I2C_NonStretchWriteMemory+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 80053a0:	201f      	movs	r0, #31
 80053a2:	f7fb fc21 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        /* Start post processing task if needed */
        Common_StartPostProcessing();
      }
    }
  }
}
 80053a6:	e04e      	b.n	8005446 <OPENBL_I2C_NonStretchWriteMemory+0xb6>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80053a8:	2079      	movs	r0, #121	; 0x79
 80053aa:	f7fb fc1d 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    if (OPENBL_I2C_GetAddress(&address) == NACK_BYTE)
 80053ae:	463b      	mov	r3, r7
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fa20 	bl	80057f6 <OPENBL_I2C_GetAddress>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b1f      	cmp	r3, #31
 80053ba:	d103      	bne.n	80053c4 <OPENBL_I2C_NonStretchWriteMemory+0x34>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 80053bc:	201f      	movs	r0, #31
 80053be:	f7fb fc13 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 80053c2:	e040      	b.n	8005446 <OPENBL_I2C_NonStretchWriteMemory+0xb6>
      OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80053c4:	2079      	movs	r0, #121	; 0x79
 80053c6:	f7fb fc0f 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      p_ramaddress = (uint8_t *)I2C_RAM_Buf;
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <OPENBL_I2C_NonStretchWriteMemory+0xc0>)
 80053cc:	60fb      	str	r3, [r7, #12]
      OPENBL_I2C_WaitAddress();
 80053ce:	f7fb fbeb 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
      data = OPENBL_I2C_ReadByte();
 80053d2:	f7fb fb9f 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80053d6:	4603      	mov	r3, r0
 80053d8:	72fb      	strb	r3, [r7, #11]
      codesize = (uint32_t)data + 1U;
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	3301      	adds	r3, #1
 80053de:	607b      	str	r3, [r7, #4]
      xor = data;
 80053e0:	7afb      	ldrb	r3, [r7, #11]
 80053e2:	617b      	str	r3, [r7, #20]
      for (counter = codesize; counter != 0U ; counter--)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	e010      	b.n	800540c <OPENBL_I2C_NonStretchWriteMemory+0x7c>
        data  = OPENBL_I2C_ReadByte();
 80053ea:	f7fb fb93 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80053ee:	4603      	mov	r3, r0
 80053f0:	72fb      	strb	r3, [r7, #11]
        xor  ^= data;
 80053f2:	7afb      	ldrb	r3, [r7, #11]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4053      	eors	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
        *(__IO uint8_t *)(p_ramaddress) = data;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	7afa      	ldrb	r2, [r7, #11]
 80053fe:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
      for (counter = codesize; counter != 0U ; counter--)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3b01      	subs	r3, #1
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1eb      	bne.n	80053ea <OPENBL_I2C_NonStretchWriteMemory+0x5a>
      if (OPENBL_I2C_ReadByte() != xor)
 8005412:	f7fb fb7f 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005416:	4603      	mov	r3, r0
 8005418:	461a      	mov	r2, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <OPENBL_I2C_NonStretchWriteMemory+0x98>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005420:	201f      	movs	r0, #31
 8005422:	f7fb fbe1 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005426:	e00e      	b.n	8005446 <OPENBL_I2C_NonStretchWriteMemory+0xb6>
        OPENBL_Enable_BusyState_Sending();
 8005428:	f7fb fc17 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>
        OPENBL_MEM_Write(address, (uint8_t *)I2C_RAM_Buf, codesize);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4907      	ldr	r1, [pc, #28]	; (8005450 <OPENBL_I2C_NonStretchWriteMemory+0xc0>)
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fe0a 	bl	800604c <OPENBL_MEM_Write>
        OPENBL_Disable_BusyState_Sending();
 8005438:	f7fb fc15 	bl	8000c66 <OPENBL_Disable_BusyState_Sending>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 800543c:	2079      	movs	r0, #121	; 0x79
 800543e:	f7fb fbd3 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        Common_StartPostProcessing();
 8005442:	f7fb f803 	bl	800044c <Common_StartPostProcessing>
}
 8005446:	bf00      	nop
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200003d0 	.word	0x200003d0

08005454 <OPENBL_I2C_NonStretchEraseMemory>:
 * @note   In this mode, when the erase memory operation is executed the device
 *         send busy bytes to the host
 * @retval None.
 */
void OPENBL_I2C_NonStretchEraseMemory(void)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
  uint32_t xor;
  uint32_t counter;
  uint32_t numpage;
  uint16_t data;
  ErrorStatus error_value;
  uint8_t status = ACK_BYTE;
 800545a:	2379      	movs	r3, #121	; 0x79
 800545c:	75fb      	strb	r3, [r7, #23]
  uint8_t *p_ramaddress;

  p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 800545e:	4b7b      	ldr	r3, [pc, #492]	; (800564c <OPENBL_I2C_NonStretchEraseMemory+0x1f8>)
 8005460:	613b      	str	r3, [r7, #16]

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 8005462:	f7fa ffd2 	bl	800040a <Common_GetProtectionStatus>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <OPENBL_I2C_NonStretchEraseMemory+0x20>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 800546c:	201f      	movs	r0, #31
 800546e:	f7fb fbbb 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      }
    }

    OPENBL_I2C_SendAcknowledgeByte(status);
  }
}
 8005472:	e0e6      	b.n	8005642 <OPENBL_I2C_NonStretchEraseMemory+0x1ee>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005474:	2079      	movs	r0, #121	; 0x79
 8005476:	f7fb fbb7 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_WaitAddress();
 800547a:	f7fb fb95 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
    data = OPENBL_I2C_ReadByte();
 800547e:	f7fb fb49 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005482:	4603      	mov	r3, r0
 8005484:	81fb      	strh	r3, [r7, #14]
    data = (uint16_t)(data << 8) | OPENBL_I2C_ReadByte();
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	b29c      	uxth	r4, r3
 800548c:	f7fb fb42 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005490:	4603      	mov	r3, r0
 8005492:	b29b      	uxth	r3, r3
 8005494:	4323      	orrs	r3, r4
 8005496:	81fb      	strh	r3, [r7, #14]
    xor  = ((uint32_t)data & 0xFF00U) >> 8;
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	b29b      	uxth	r3, r3
 800549e:	61fb      	str	r3, [r7, #28]
    xor ^= (uint32_t)data & 0x00FFU;
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	4053      	eors	r3, r2
 80054a8:	61fb      	str	r3, [r7, #28]
    if ((data & 0xFFF0U) == 0xFFF0U)
 80054aa:	89fa      	ldrh	r2, [r7, #14]
 80054ac:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80054b0:	4013      	ands	r3, r2
 80054b2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d13f      	bne.n	800553a <OPENBL_I2C_NonStretchEraseMemory+0xe6>
      if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 80054ba:	f7fb fb2b 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d004      	beq.n	80054d4 <OPENBL_I2C_NonStretchEraseMemory+0x80>
        OPENBL_I2C_WaitStop();
 80054ca:	f001 fcbd 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        status = NACK_BYTE;
 80054ce:	231f      	movs	r3, #31
 80054d0:	75fb      	strb	r3, [r7, #23]
 80054d2:	e0b2      	b.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
        OPENBL_I2C_WaitStop();
 80054d4:	f001 fcb8 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        OPENBL_Enable_BusyState_Sending();
 80054d8:	f7fb fbbf 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>
        if ((data == 0xFFFFU) || (data == 0xFFFEU) || (data == 0xFFFDU))
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <OPENBL_I2C_NonStretchEraseMemory+0xa6>
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <OPENBL_I2C_NonStretchEraseMemory+0xa6>
 80054f0:	89fb      	ldrh	r3, [r7, #14]
 80054f2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d11c      	bne.n	8005534 <OPENBL_I2C_NonStretchEraseMemory+0xe0>
          p_ramaddress[0] = (uint8_t)(data & 0x00FFU);
 80054fa:	89fb      	ldrh	r3, [r7, #14]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	701a      	strb	r2, [r3, #0]
          p_ramaddress[1] = (uint8_t)((data & 0xFF00U) >> 8);
 8005502:	89fb      	ldrh	r3, [r7, #14]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	b29a      	uxth	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	3301      	adds	r3, #1
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
          error_value = OPENBL_MEM_MassErase(OPENBL_DEFAULT_MEM, (uint8_t *) I2C_RAM_Buf, I2C_RAM_BUFFER_SIZE);
 8005510:	f240 428c 	movw	r2, #1164	; 0x48c
 8005514:	494d      	ldr	r1, [pc, #308]	; (800564c <OPENBL_I2C_NonStretchEraseMemory+0x1f8>)
 8005516:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800551a:	f000 fe61 	bl	80061e0 <OPENBL_MEM_MassErase>
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
          if (error_value == SUCCESS)
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <OPENBL_I2C_NonStretchEraseMemory+0xda>
            status = ACK_BYTE;
 8005528:	2379      	movs	r3, #121	; 0x79
 800552a:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 800552c:	e085      	b.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
            status = NACK_BYTE;
 800552e:	231f      	movs	r3, #31
 8005530:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 8005532:	e082      	b.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
          status = NACK_BYTE;
 8005534:	231f      	movs	r3, #31
 8005536:	75fb      	strb	r3, [r7, #23]
 8005538:	e07f      	b.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
      if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 800553a:	f7fb faeb 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800553e:	4603      	mov	r3, r0
 8005540:	461a      	mov	r2, r3
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	429a      	cmp	r2, r3
 8005548:	d004      	beq.n	8005554 <OPENBL_I2C_NonStretchEraseMemory+0x100>
        OPENBL_I2C_WaitStop();
 800554a:	f001 fc7d 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        status = NACK_BYTE;
 800554e:	231f      	movs	r3, #31
 8005550:	75fb      	strb	r3, [r7, #23]
 8005552:	e072      	b.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
        OPENBL_I2C_WaitStop();
 8005554:	f001 fc78 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005558:	2079      	movs	r0, #121	; 0x79
 800555a:	f7fb fb45 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 800555e:	4b3b      	ldr	r3, [pc, #236]	; (800564c <OPENBL_I2C_NonStretchEraseMemory+0x1f8>)
 8005560:	613b      	str	r3, [r7, #16]
        numpage = (uint32_t)data + 1U;
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	3301      	adds	r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
        *p_ramaddress = (uint8_t)(numpage & 0x00FFU);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	3301      	adds	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
        *p_ramaddress = (uint8_t)((numpage & 0xFF00U) >> 8);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	b2da      	uxtb	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3301      	adds	r3, #1
 8005584:	613b      	str	r3, [r7, #16]
        OPENBL_I2C_WaitAddress();
 8005586:	f7fb fb0f 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
        xor = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
        for (counter = numpage; counter != 0U ; counter--)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e02e      	b.n	80055f2 <OPENBL_I2C_NonStretchEraseMemory+0x19e>
          data  = OPENBL_I2C_ReadByte();
 8005594:	f7fb fabe 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005598:	4603      	mov	r3, r0
 800559a:	81fb      	strh	r3, [r7, #14]
          xor  ^= data;
 800559c:	89fb      	ldrh	r3, [r7, #14]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	4053      	eors	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
          data  = (uint16_t)((data & 0x00FFU) << 8);
 80055a4:	89fb      	ldrh	r3, [r7, #14]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	81fb      	strh	r3, [r7, #14]
          data |= (uint8_t)(OPENBL_I2C_ReadByte() & 0x00FFU);
 80055aa:	f7fb fab3 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80055ae:	4603      	mov	r3, r0
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	81fb      	strh	r3, [r7, #14]
          xor  ^= ((uint32_t)data & 0x00FFU);
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	4053      	eors	r3, r2
 80055c0:	61fb      	str	r3, [r7, #28]
          if (counter < (I2C_RAM_BUFFER_SIZE / 2U))
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f240 2245 	movw	r2, #581	; 0x245
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d80f      	bhi.n	80055ec <OPENBL_I2C_NonStretchEraseMemory+0x198>
            *p_ramaddress = (uint8_t)(data & 0x00FFU);
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	701a      	strb	r2, [r3, #0]
            p_ramaddress++;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3301      	adds	r3, #1
 80055d8:	613b      	str	r3, [r7, #16]
            *p_ramaddress = (uint8_t)((data & 0xFF00U) >> 8);
 80055da:	89fb      	ldrh	r3, [r7, #14]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	b29b      	uxth	r3, r3
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	701a      	strb	r2, [r3, #0]
            p_ramaddress++;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
        for (counter = numpage; counter != 0U ; counter--)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1cd      	bne.n	8005594 <OPENBL_I2C_NonStretchEraseMemory+0x140>
        if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 80055f8:	f7fb fa8c 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	429a      	cmp	r2, r3
 8005606:	d004      	beq.n	8005612 <OPENBL_I2C_NonStretchEraseMemory+0x1be>
          OPENBL_I2C_WaitStop();
 8005608:	f001 fc1e 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
          status = NACK_BYTE;
 800560c:	231f      	movs	r3, #31
 800560e:	75fb      	strb	r3, [r7, #23]
 8005610:	e013      	b.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
          OPENBL_I2C_WaitStop();
 8005612:	f001 fc19 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
          OPENBL_Enable_BusyState_Sending();
 8005616:	f7fb fb20 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>
          error_value = OPENBL_MEM_Erase(OPENBL_DEFAULT_MEM, (uint8_t *) I2C_RAM_Buf, I2C_RAM_BUFFER_SIZE);
 800561a:	f240 428c 	movw	r2, #1164	; 0x48c
 800561e:	490b      	ldr	r1, [pc, #44]	; (800564c <OPENBL_I2C_NonStretchEraseMemory+0x1f8>)
 8005620:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005624:	f000 fe12 	bl	800624c <OPENBL_MEM_Erase>
 8005628:	4603      	mov	r3, r0
 800562a:	71fb      	strb	r3, [r7, #7]
          OPENBL_Disable_BusyState_Sending();
 800562c:	f7fb fb1b 	bl	8000c66 <OPENBL_Disable_BusyState_Sending>
          if (error_value == SUCCESS)
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <OPENBL_I2C_NonStretchEraseMemory+0x1e6>
            status = ACK_BYTE;
 8005636:	2379      	movs	r3, #121	; 0x79
 8005638:	75fb      	strb	r3, [r7, #23]
    OPENBL_I2C_SendAcknowledgeByte(status);
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fb fad3 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005642:	bf00      	nop
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}
 800564a:	bf00      	nop
 800564c:	200003d0 	.word	0x200003d0

08005650 <OPENBL_I2C_NonStretchWriteProtect>:
 * @note   In this mode, when enabling the write protection the device
 *         send busy bytes to the host
 * @retval None.
 */
void OPENBL_I2C_NonStretchWriteProtect(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
  uint8_t xor;
  ErrorStatus error_value;
  uint8_t *p_ramaddress;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 8005656:	f7fa fed8 	bl	800040a <Common_GetProtectionStatus>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <OPENBL_I2C_NonStretchWriteProtect+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005660:	201f      	movs	r0, #31
 8005662:	f7fb fac1 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
          Common_StartPostProcessing();
        }
      }
    }
  }
}
 8005666:	e064      	b.n	8005732 <OPENBL_I2C_NonStretchWriteProtect+0xe2>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005668:	2079      	movs	r0, #121	; 0x79
 800566a:	f7fb fabd 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_WaitAddress();
 800566e:	f7fb fa9b 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
    data = OPENBL_I2C_ReadByte();
 8005672:	f7fb fa4f 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
    xor  = ~data;
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	43db      	mvns	r3, r3
 800567e:	737b      	strb	r3, [r7, #13]
    if (OPENBL_I2C_ReadByte() != xor)
 8005680:	f7fb fa48 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	7b7b      	ldrb	r3, [r7, #13]
 800568a:	4293      	cmp	r3, r2
 800568c:	d005      	beq.n	800569a <OPENBL_I2C_NonStretchWriteProtect+0x4a>
      OPENBL_I2C_WaitStop();
 800568e:	f001 fbdb 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005692:	201f      	movs	r0, #31
 8005694:	f7fb faa8 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005698:	e04b      	b.n	8005732 <OPENBL_I2C_NonStretchWriteProtect+0xe2>
      OPENBL_I2C_WaitStop();
 800569a:	f001 fbd5 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
      OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 800569e:	2079      	movs	r0, #121	; 0x79
 80056a0:	f7fb faa2 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
      p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 80056a4:	4b25      	ldr	r3, [pc, #148]	; (800573c <OPENBL_I2C_NonStretchWriteProtect+0xec>)
 80056a6:	60bb      	str	r3, [r7, #8]
      length       = (uint16_t) data + 1U;
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3301      	adds	r3, #1
 80056ae:	80bb      	strh	r3, [r7, #4]
      xor = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	737b      	strb	r3, [r7, #13]
      OPENBL_I2C_WaitAddress();
 80056b4:	f7fb fa78 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
      for (counter = (length); counter != 0U ; counter--)
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	81fb      	strh	r3, [r7, #14]
 80056bc:	e010      	b.n	80056e0 <OPENBL_I2C_NonStretchWriteProtect+0x90>
        data  = OPENBL_I2C_ReadByte();
 80056be:	f7fb fa29 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
        xor  ^= data;
 80056c6:	7b7a      	ldrb	r2, [r7, #13]
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	4053      	eors	r3, r2
 80056cc:	737b      	strb	r3, [r7, #13]
        *(__IO uint8_t *)(p_ramaddress) = (uint8_t) data;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	79fa      	ldrb	r2, [r7, #7]
 80056d2:	701a      	strb	r2, [r3, #0]
        p_ramaddress++;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
      for (counter = (length); counter != 0U ; counter--)
 80056da:	89fb      	ldrh	r3, [r7, #14]
 80056dc:	3b01      	subs	r3, #1
 80056de:	81fb      	strh	r3, [r7, #14]
 80056e0:	89fb      	ldrh	r3, [r7, #14]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1eb      	bne.n	80056be <OPENBL_I2C_NonStretchWriteProtect+0x6e>
      if (OPENBL_I2C_ReadByte() != (uint8_t) xor)
 80056e6:	f7fb fa15 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	7b7b      	ldrb	r3, [r7, #13]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d005      	beq.n	8005700 <OPENBL_I2C_NonStretchWriteProtect+0xb0>
        OPENBL_I2C_WaitStop();
 80056f4:	f001 fba8 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 80056f8:	201f      	movs	r0, #31
 80056fa:	f7fb fa75 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 80056fe:	e018      	b.n	8005732 <OPENBL_I2C_NonStretchWriteProtect+0xe2>
        OPENBL_I2C_WaitStop();
 8005700:	f001 fba2 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
        p_ramaddress = (uint8_t *) I2C_RAM_Buf;
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <OPENBL_I2C_NonStretchWriteProtect+0xec>)
 8005706:	60bb      	str	r3, [r7, #8]
        OPENBL_Enable_BusyState_Sending();
 8005708:	f7fb faa7 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>
        error_value = OPENBL_MEM_SetWriteProtection(ENABLE, OPENBL_DEFAULT_MEM, p_ramaddress, length);
 800570c:	88bb      	ldrh	r3, [r7, #4]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005714:	2001      	movs	r0, #1
 8005716:	f000 fd01 	bl	800611c <OPENBL_MEM_SetWriteProtection>
 800571a:	4603      	mov	r3, r0
 800571c:	70fb      	strb	r3, [r7, #3]
        OPENBL_Disable_BusyState_Sending();
 800571e:	f7fb faa2 	bl	8000c66 <OPENBL_Disable_BusyState_Sending>
        if (error_value == SUCCESS)
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d104      	bne.n	8005732 <OPENBL_I2C_NonStretchWriteProtect+0xe2>
          OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005728:	2079      	movs	r0, #121	; 0x79
 800572a:	f7fb fa5d 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
          Common_StartPostProcessing();
 800572e:	f7fa fe8d 	bl	800044c <Common_StartPostProcessing>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200003d0 	.word	0x200003d0

08005740 <OPENBL_I2C_NonStretchWriteUnprotect>:
 * @note   In this mode, when disabling the write protection the device
 *         send busy bytes to the host
 * @retval None.
 */
void OPENBL_I2C_NonStretchWriteUnprotect(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 8005746:	f7fa fe60 	bl	800040a <Common_GetProtectionStatus>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <OPENBL_I2C_NonStretchWriteUnprotect+0x18>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005750:	201f      	movs	r0, #31
 8005752:	f7fb fa49 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    {
      /* Start post processing task if needed */
      Common_StartPostProcessing();
    }
  }
}
 8005756:	e017      	b.n	8005788 <OPENBL_I2C_NonStretchWriteUnprotect+0x48>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005758:	2079      	movs	r0, #121	; 0x79
 800575a:	f7fb fa45 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_Enable_BusyState_Sending();
 800575e:	f7fb fa7c 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, OPENBL_DEFAULT_MEM, NULL, 0);
 8005762:	2300      	movs	r3, #0
 8005764:	2200      	movs	r2, #0
 8005766:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800576a:	2000      	movs	r0, #0
 800576c:	f000 fcd6 	bl	800611c <OPENBL_MEM_SetWriteProtection>
 8005770:	4603      	mov	r3, r0
 8005772:	71fb      	strb	r3, [r7, #7]
    OPENBL_Disable_BusyState_Sending();
 8005774:	f7fb fa77 	bl	8000c66 <OPENBL_Disable_BusyState_Sending>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005778:	2079      	movs	r0, #121	; 0x79
 800577a:	f7fb fa35 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    if (error_value == SUCCESS)
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <OPENBL_I2C_NonStretchWriteUnprotect+0x48>
      Common_StartPostProcessing();
 8005784:	f7fa fe62 	bl	800044c <Common_StartPostProcessing>
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <OPENBL_I2C_NonStretchReadoutProtect>:
 * @note   In this mode, when enabling the readout protection the device
 *         send busy bytes to the host
 * @retval None.
 */
void OPENBL_I2C_NonStretchReadoutProtect(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8005794:	f7fa fe39 	bl	800040a <Common_GetProtectionStatus>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <OPENBL_I2C_NonStretchReadoutProtect+0x16>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 800579e:	201f      	movs	r0, #31
 80057a0:	f7fb fa22 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);

    /* Start post processing task if needed */
    Common_StartPostProcessing();
  }
}
 80057a4:	e010      	b.n	80057c8 <OPENBL_I2C_NonStretchReadoutProtect+0x38>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80057a6:	2079      	movs	r0, #121	; 0x79
 80057a8:	f7fb fa1e 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_Enable_BusyState_Sending();
 80057ac:	f7fb fa55 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>
    OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, ENABLE);
 80057b0:	2101      	movs	r1, #1
 80057b2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80057b6:	f000 fc77 	bl	80060a8 <OPENBL_MEM_SetReadOutProtection>
    OPENBL_Disable_BusyState_Sending();
 80057ba:	f7fb fa54 	bl	8000c66 <OPENBL_Disable_BusyState_Sending>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80057be:	2079      	movs	r0, #121	; 0x79
 80057c0:	f7fb fa12 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    Common_StartPostProcessing();
 80057c4:	f7fa fe42 	bl	800044c <Common_StartPostProcessing>
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}

080057cc <OPENBL_I2C_NonStretchReadoutUnprotect>:
 *         so the send of second acknowledge after Disabling the read protection
 *         is not possible what make the communication with the host get lost
 * @retval None.
 */
void OPENBL_I2C_NonStretchReadoutUnprotect(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80057d0:	2079      	movs	r0, #121	; 0x79
 80057d2:	f7fb fa09 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80057d6:	2079      	movs	r0, #121	; 0x79
 80057d8:	f7fb fa06 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Send Busy Byte */
  OPENBL_Enable_BusyState_Sending();
 80057dc:	f7fb fa3d 	bl	8000c5a <OPENBL_Enable_BusyState_Sending>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, DISABLE);
 80057e0:	2100      	movs	r1, #0
 80057e2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80057e6:	f000 fc5f 	bl	80060a8 <OPENBL_MEM_SetReadOutProtection>

  /* Disable Busy Byte */
  OPENBL_Disable_BusyState_Sending();
 80057ea:	f7fb fa3c 	bl	8000c66 <OPENBL_Disable_BusyState_Sending>

  /* Start post processing task if needed */
  Common_StartPostProcessing();
 80057ee:	f7fa fe2d 	bl	800044c <Common_StartPostProcessing>
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <OPENBL_I2C_GetAddress>:
/**
 * @brief  This function is used to get a valid address.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
uint8_t OPENBL_I2C_GetAddress(uint32_t *pAddress)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
  uint8_t status;
  uint8_t xor;

  /* Wait for address to match */
  OPENBL_I2C_WaitAddress();
 8005802:	f7fb f9d1 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  data[3] = OPENBL_I2C_ReadByte();
 8005806:	f7fb f985 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800580a:	4603      	mov	r3, r0
 800580c:	72fb      	strb	r3, [r7, #11]
  data[2] = OPENBL_I2C_ReadByte();
 800580e:	f7fb f981 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005812:	4603      	mov	r3, r0
 8005814:	72bb      	strb	r3, [r7, #10]
  data[1] = OPENBL_I2C_ReadByte();
 8005816:	f7fb f97d 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800581a:	4603      	mov	r3, r0
 800581c:	727b      	strb	r3, [r7, #9]
  data[0] = OPENBL_I2C_ReadByte();
 800581e:	f7fb f979 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005822:	4603      	mov	r3, r0
 8005824:	723b      	strb	r3, [r7, #8]

  xor = data[3] ^ data[2] ^ data[1] ^ data[0];
 8005826:	7afa      	ldrb	r2, [r7, #11]
 8005828:	7abb      	ldrb	r3, [r7, #10]
 800582a:	4053      	eors	r3, r2
 800582c:	b2da      	uxtb	r2, r3
 800582e:	7a7b      	ldrb	r3, [r7, #9]
 8005830:	4053      	eors	r3, r2
 8005832:	b2da      	uxtb	r2, r3
 8005834:	7a3b      	ldrb	r3, [r7, #8]
 8005836:	4053      	eors	r3, r2
 8005838:	73bb      	strb	r3, [r7, #14]

  /* Check the integrity of received data */
  if (OPENBL_I2C_ReadByte() != xor)
 800583a:	f7fb f96b 	bl	8000b14 <OPENBL_I2C_ReadByte>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	7bbb      	ldrb	r3, [r7, #14]
 8005844:	4293      	cmp	r3, r2
 8005846:	d002      	beq.n	800584e <OPENBL_I2C_GetAddress+0x58>
  {
    status = NACK_BYTE;
 8005848:	231f      	movs	r3, #31
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e01a      	b.n	8005884 <OPENBL_I2C_GetAddress+0x8e>
  }
  else
  {
    /* Wait until STOP is detected */
    OPENBL_I2C_WaitStop();
 800584e:	f001 fafb 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>

    *pAddress = ((uint32_t)data[3] << 24) | ((uint32_t)data[2] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[0];
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	061a      	lsls	r2, r3, #24
 8005856:	7abb      	ldrb	r3, [r7, #10]
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	7a7b      	ldrb	r3, [r7, #9]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	4313      	orrs	r3, r2
 8005862:	7a3a      	ldrb	r2, [r7, #8]
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]

    /* Check if received address is valid or not */
    if (OPENBL_MEM_GetAddressArea(*pAddress) == AREA_ERROR)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fb50 	bl	8005f14 <OPENBL_MEM_GetAddressArea>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <OPENBL_I2C_GetAddress+0x8a>
    {
      status = NACK_BYTE;
 800587a:	231f      	movs	r3, #31
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	e001      	b.n	8005884 <OPENBL_I2C_GetAddress+0x8e>
    }
    else
    {
      status = ACK_BYTE;
 8005880:	2379      	movs	r3, #121	; 0x79
 8005882:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <OPENBL_I2C_SpecialCommand>:
/**
 * @brief  This function is used to execute special command commands.
 * @retval None.
 */
void OPENBL_I2C_SpecialCommand(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
  uint8_t xor;
  uint8_t index;
  uint8_t data;

  /* Point to the RAM I2C buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t) I2C_RAM_Buf;
 8005896:	4b40      	ldr	r3, [pc, #256]	; (8005998 <OPENBL_I2C_SpecialCommand+0x108>)
 8005898:	60bb      	str	r3, [r7, #8]

  /* Send Operation code acknowledgment */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 800589a:	2079      	movs	r0, #121	; 0x79
 800589c:	f7fb f9a4 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Wait for address to match */
  OPENBL_I2C_WaitAddress();
 80058a0:	f7fb f982 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  /* Get the command operation code */
  if (OPENBL_I2C_GetSpecialCmdOpCode(&op_code, OPENBL_SPECIAL_CMD) == NACK_BYTE)
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fa39 	bl	8005d20 <OPENBL_I2C_GetSpecialCmdOpCode>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b1f      	cmp	r3, #31
 80058b2:	d103      	bne.n	80058bc <OPENBL_I2C_SpecialCommand+0x2c>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 80058b4:	201f      	movs	r0, #31
 80058b6:	f7fb f997 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        /* Wait until STOP is detected */
        OPENBL_I2C_WaitStop();
      }
    }
  }
}
 80058ba:	e069      	b.n	8005990 <OPENBL_I2C_SpecialCommand+0x100>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80058bc:	2079      	movs	r0, #121	; 0x79
 80058be:	f7fb f993 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_WaitAddress();
 80058c2:	f7fb f971 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
    special_cmd->CmdType = OPENBL_SPECIAL_CMD;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 80058cc:	88ba      	ldrh	r2, [r7, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
    data                     = OPENBL_I2C_ReadByte();
 80058d6:	f7fb f91d 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 80058ea:	7bfa      	ldrb	r2, [r7, #15]
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4053      	eors	r3, r2
 80058f0:	73fb      	strb	r3, [r7, #15]
    data                      = OPENBL_I2C_ReadByte();
 80058f2:	f7fb f90f 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	889a      	ldrh	r2, [r3, #4]
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	b29b      	uxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b29a      	uxth	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 800590a:	7bfa      	ldrb	r2, [r7, #15]
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	4053      	eors	r3, r2
 8005910:	73fb      	strb	r3, [r7, #15]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	889b      	ldrh	r3, [r3, #4]
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d903      	bls.n	8005922 <OPENBL_I2C_SpecialCommand+0x92>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 800591a:	201f      	movs	r0, #31
 800591c:	f7fb f964 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005920:	e036      	b.n	8005990 <OPENBL_I2C_SpecialCommand+0x100>
      if (special_cmd->SizeBuffer1 != 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	889b      	ldrh	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <OPENBL_I2C_SpecialCommand+0xcc>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 800592a:	2300      	movs	r3, #0
 800592c:	73bb      	strb	r3, [r7, #14]
 800592e:	e00f      	b.n	8005950 <OPENBL_I2C_SpecialCommand+0xc0>
          data                        = OPENBL_I2C_ReadByte();
 8005930:	f7fb f8f0 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005934:	4603      	mov	r3, r0
 8005936:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4413      	add	r3, r2
 800593e:	79fa      	ldrb	r2, [r7, #7]
 8005940:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	4053      	eors	r3, r2
 8005948:	73fb      	strb	r3, [r7, #15]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	3301      	adds	r3, #1
 800594e:	73bb      	strb	r3, [r7, #14]
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	b29a      	uxth	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	889b      	ldrh	r3, [r3, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d3e9      	bcc.n	8005930 <OPENBL_I2C_SpecialCommand+0xa0>
      if (OPENBL_I2C_ReadByte() != xor)
 800595c:	f7fb f8da 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <OPENBL_I2C_SpecialCommand+0xe2>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 800596a:	201f      	movs	r0, #31
 800596c:	f7fb f93c 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005970:	e00e      	b.n	8005990 <OPENBL_I2C_SpecialCommand+0x100>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005972:	2079      	movs	r0, #121	; 0x79
 8005974:	f7fb f938 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        OPENBL_I2C_WaitAddress();
 8005978:	f7fb f916 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
        OPENBL_I2C_SpecialCommandProcess(special_cmd);
 800597c:	68b8      	ldr	r0, [r7, #8]
 800597e:	f7fb f946 	bl	8000c0e <OPENBL_I2C_SpecialCommandProcess>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005982:	2079      	movs	r0, #121	; 0x79
 8005984:	f7fb f930 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        OPENBL_I2C_WaitNack();
 8005988:	f001 fa5a 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>
        OPENBL_I2C_WaitStop();
 800598c:	f001 fa5c 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	200003d0 	.word	0x200003d0

0800599c <OPENBL_I2C_ExtendedSpecialCommand>:
/**
 * @brief  This function is used to execute extended special command commands.
 * @retval None.
 */
void OPENBL_I2C_ExtendedSpecialCommand(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
  uint16_t index;
  uint8_t xor;
  uint8_t data;

  /* Point to the RAM I2C buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t) I2C_RAM_Buf;
 80059a2:	4b6e      	ldr	r3, [pc, #440]	; (8005b5c <OPENBL_I2C_ExtendedSpecialCommand+0x1c0>)
 80059a4:	60bb      	str	r3, [r7, #8]

  /* Send Operation code acknowledgment */
  OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80059a6:	2079      	movs	r0, #121	; 0x79
 80059a8:	f7fb f91e 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>

  /* Wait for address to match */
  OPENBL_I2C_WaitAddress();
 80059ac:	f7fb f8fc 	bl	8000ba8 <OPENBL_I2C_WaitAddress>

  /* Get the command operation code */
  if (OPENBL_I2C_GetSpecialCmdOpCode(&op_code, OPENBL_EXTENDED_SPECIAL_CMD) == NACK_BYTE)
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	2102      	movs	r1, #2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f9b3 	bl	8005d20 <OPENBL_I2C_GetSpecialCmdOpCode>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b1f      	cmp	r3, #31
 80059be:	d103      	bne.n	80059c8 <OPENBL_I2C_ExtendedSpecialCommand+0x2c>
  {
    OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 80059c0:	201f      	movs	r0, #31
 80059c2:	f7fb f911 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
          }
        }
      }
    }
  }
}
 80059c6:	e0c4      	b.n	8005b52 <OPENBL_I2C_ExtendedSpecialCommand+0x1b6>
    OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 80059c8:	2079      	movs	r0, #121	; 0x79
 80059ca:	f7fb f90d 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
    OPENBL_I2C_WaitAddress();
 80059ce:	f7fb f8eb 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
    special_cmd->CmdType = OPENBL_EXTENDED_SPECIAL_CMD;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2202      	movs	r2, #2
 80059d6:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 80059d8:	88ba      	ldrh	r2, [r7, #4]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	737b      	strb	r3, [r7, #13]
    data                     = OPENBL_I2C_ReadByte();
 80059e2:	f7fb f897 	bl	8000b14 <OPENBL_I2C_ReadByte>
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 80059f6:	7b7a      	ldrb	r2, [r7, #13]
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	4053      	eors	r3, r2
 80059fc:	737b      	strb	r3, [r7, #13]
    data                      = OPENBL_I2C_ReadByte();
 80059fe:	f7fb f889 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	889a      	ldrh	r2, [r3, #4]
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 8005a16:	7b7a      	ldrb	r2, [r7, #13]
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	4053      	eors	r3, r2
 8005a1c:	737b      	strb	r3, [r7, #13]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	889b      	ldrh	r3, [r3, #4]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d903      	bls.n	8005a2e <OPENBL_I2C_ExtendedSpecialCommand+0x92>
      OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005a26:	201f      	movs	r0, #31
 8005a28:	f7fb f8de 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005a2c:	e091      	b.n	8005b52 <OPENBL_I2C_ExtendedSpecialCommand+0x1b6>
      if (special_cmd->SizeBuffer1 != 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	889b      	ldrh	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d017      	beq.n	8005a66 <OPENBL_I2C_ExtendedSpecialCommand+0xca>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	81fb      	strh	r3, [r7, #14]
 8005a3a:	e00f      	b.n	8005a5c <OPENBL_I2C_ExtendedSpecialCommand+0xc0>
          data                        = OPENBL_I2C_ReadByte();
 8005a3c:	f7fb f86a 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005a40:	4603      	mov	r3, r0
 8005a42:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	79fa      	ldrb	r2, [r7, #7]
 8005a4c:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 8005a4e:	7b7a      	ldrb	r2, [r7, #13]
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	4053      	eors	r3, r2
 8005a54:	737b      	strb	r3, [r7, #13]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	81fb      	strh	r3, [r7, #14]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	889b      	ldrh	r3, [r3, #4]
 8005a60:	89fa      	ldrh	r2, [r7, #14]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d3ea      	bcc.n	8005a3c <OPENBL_I2C_ExtendedSpecialCommand+0xa0>
      if (OPENBL_I2C_ReadByte() != xor)
 8005a66:	f7fb f855 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	7b7b      	ldrb	r3, [r7, #13]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <OPENBL_I2C_ExtendedSpecialCommand+0xe0>
        OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005a74:	201f      	movs	r0, #31
 8005a76:	f7fb f8b7 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005a7a:	e06a      	b.n	8005b52 <OPENBL_I2C_ExtendedSpecialCommand+0x1b6>
        OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005a7c:	2079      	movs	r0, #121	; 0x79
 8005a7e:	f7fb f8b3 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
        OPENBL_I2C_WaitAddress();
 8005a82:	f7fb f891 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
        xor                      = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	737b      	strb	r3, [r7, #13]
        data                     = OPENBL_I2C_ReadByte();
 8005a8a:	f7fb f843 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 = ((uint16_t)data) << 8;
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                     ^= data;
 8005aa0:	7b7a      	ldrb	r2, [r7, #13]
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	4053      	eors	r3, r2
 8005aa6:	737b      	strb	r3, [r7, #13]
        data                      = OPENBL_I2C_ReadByte();
 8005aa8:	f7fb f834 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005aac:	4603      	mov	r3, r0
 8005aae:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 |= (uint16_t)data;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                      ^= data;
 8005ac4:	7b7a      	ldrb	r2, [r7, #13]
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	4053      	eors	r3, r2
 8005aca:	737b      	strb	r3, [r7, #13]
        if (special_cmd->SizeBuffer2 > SPECIAL_CMD_SIZE_BUFFER2)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad6:	d903      	bls.n	8005ae0 <OPENBL_I2C_ExtendedSpecialCommand+0x144>
          OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005ad8:	201f      	movs	r0, #31
 8005ada:	f7fb f885 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005ade:	e038      	b.n	8005b52 <OPENBL_I2C_ExtendedSpecialCommand+0x1b6>
          if (special_cmd->SizeBuffer2 != 0U)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d019      	beq.n	8005b1e <OPENBL_I2C_ExtendedSpecialCommand+0x182>
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	81fb      	strh	r3, [r7, #14]
 8005aee:	e010      	b.n	8005b12 <OPENBL_I2C_ExtendedSpecialCommand+0x176>
              data                        = OPENBL_I2C_ReadByte();
 8005af0:	f7fb f810 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005af4:	4603      	mov	r3, r0
 8005af6:	71fb      	strb	r3, [r7, #7]
              special_cmd->Buffer2[index] = data;
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	79fa      	ldrb	r2, [r7, #7]
 8005b00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
              xor                        ^= data;
 8005b04:	7b7a      	ldrb	r2, [r7, #13]
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	4053      	eors	r3, r2
 8005b0a:	737b      	strb	r3, [r7, #13]
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	81fb      	strh	r3, [r7, #14]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005b18:	89fa      	ldrh	r2, [r7, #14]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3e8      	bcc.n	8005af0 <OPENBL_I2C_ExtendedSpecialCommand+0x154>
          if (OPENBL_I2C_ReadByte() != xor)
 8005b1e:	f7fa fff9 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	7b7b      	ldrb	r3, [r7, #13]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <OPENBL_I2C_ExtendedSpecialCommand+0x198>
            OPENBL_I2C_SendAcknowledgeByte(NACK_BYTE);
 8005b2c:	201f      	movs	r0, #31
 8005b2e:	f7fb f85b 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
}
 8005b32:	e00e      	b.n	8005b52 <OPENBL_I2C_ExtendedSpecialCommand+0x1b6>
            OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005b34:	2079      	movs	r0, #121	; 0x79
 8005b36:	f7fb f857 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
            OPENBL_I2C_WaitAddress();
 8005b3a:	f7fb f835 	bl	8000ba8 <OPENBL_I2C_WaitAddress>
            OPENBL_I2C_SpecialCommandProcess(special_cmd);
 8005b3e:	68b8      	ldr	r0, [r7, #8]
 8005b40:	f7fb f865 	bl	8000c0e <OPENBL_I2C_SpecialCommandProcess>
            OPENBL_I2C_SendAcknowledgeByte(ACK_BYTE);
 8005b44:	2079      	movs	r0, #121	; 0x79
 8005b46:	f7fb f84f 	bl	8000be8 <OPENBL_I2C_SendAcknowledgeByte>
            OPENBL_I2C_WaitNack();
 8005b4a:	f001 f979 	bl	8006e40 <__OPENBL_I2C_WaitNack_veneer>
            OPENBL_I2C_WaitStop();
 8005b4e:	f001 f97b 	bl	8006e48 <__OPENBL_I2C_WaitStop_veneer>
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200003d0 	.word	0x200003d0

08005b60 <OPENBL_I2C_ConstructCommandsTable>:
/**
  * @brief  This function is used to construct the command List table.
  * @return Returns a table with all opcodes supported.
  */
static uint8_t OPENBL_I2C_ConstructCommandsTable(OPENBL_CommandsTypeDef *pI2cCmd)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]

  if (pI2cCmd->GetCommand != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d006      	beq.n	8005b82 <OPENBL_I2C_ConstructCommandsTable+0x22>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_GET_COMMAND;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	4a69      	ldr	r2, [pc, #420]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005b78:	2100      	movs	r1, #0
 8005b7a:	54d1      	strb	r1, [r2, r3]
    i++;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->GetVersion != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <OPENBL_I2C_ConstructCommandsTable+0x38>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_GET_VERSION;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005b8e:	2101      	movs	r1, #1
 8005b90:	54d1      	strb	r1, [r2, r3]
    i++;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	3301      	adds	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->GetID != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <OPENBL_I2C_ConstructCommandsTable+0x4e>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_GET_ID;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	4a5e      	ldr	r2, [pc, #376]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	54d1      	strb	r1, [r2, r3]
    i++;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	3301      	adds	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->ReadMemory != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <OPENBL_I2C_ConstructCommandsTable+0x64>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_READ_MEMORY;
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	4a58      	ldr	r2, [pc, #352]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005bba:	2111      	movs	r1, #17
 8005bbc:	54d1      	strb	r1, [r2, r3]
    i++;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->Go != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <OPENBL_I2C_ConstructCommandsTable+0x7a>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_GO;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4a53      	ldr	r2, [pc, #332]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005bd0:	2121      	movs	r1, #33	; 0x21
 8005bd2:	54d1      	strb	r1, [r2, r3]
    i++;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->WriteMemory != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <OPENBL_I2C_ConstructCommandsTable+0x90>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_WRITE_MEMORY;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	4a4d      	ldr	r2, [pc, #308]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005be6:	2131      	movs	r1, #49	; 0x31
 8005be8:	54d1      	strb	r1, [r2, r3]
    i++;
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	3301      	adds	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->EraseMemory != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d006      	beq.n	8005c06 <OPENBL_I2C_ConstructCommandsTable+0xa6>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_EXT_ERASE_MEMORY;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4a48      	ldr	r2, [pc, #288]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005bfc:	2144      	movs	r1, #68	; 0x44
 8005bfe:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	3301      	adds	r3, #1
 8005c04:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->WriteProtect != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <OPENBL_I2C_ConstructCommandsTable+0xbc>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_WRITE_PROTECT;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	4a42      	ldr	r2, [pc, #264]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c12:	2163      	movs	r1, #99	; 0x63
 8005c14:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->WriteUnprotect != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <OPENBL_I2C_ConstructCommandsTable+0xd2>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_WRITE_UNPROTECT;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4a3d      	ldr	r2, [pc, #244]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c28:	2173      	movs	r1, #115	; 0x73
 8005c2a:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->ReadoutProtect != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d006      	beq.n	8005c48 <OPENBL_I2C_ConstructCommandsTable+0xe8>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_READ_PROTECT;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c3e:	2182      	movs	r1, #130	; 0x82
 8005c40:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	3301      	adds	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->ReadoutUnprotect != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <OPENBL_I2C_ConstructCommandsTable+0xfe>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_READ_UNPROTECT;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	4a32      	ldr	r2, [pc, #200]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c54:	2192      	movs	r1, #146	; 0x92
 8005c56:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->NsWriteMemory != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <OPENBL_I2C_ConstructCommandsTable+0x114>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_NS_WRITE_MEMORY;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	4a2c      	ldr	r2, [pc, #176]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c6a:	2132      	movs	r1, #50	; 0x32
 8005c6c:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	3301      	adds	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->NsEraseMemory != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <OPENBL_I2C_ConstructCommandsTable+0x12a>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_NS_ERASE_MEMORY;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c80:	2145      	movs	r1, #69	; 0x45
 8005c82:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	3301      	adds	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->NsWriteProtect != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <OPENBL_I2C_ConstructCommandsTable+0x140>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_NS_WRITE_PROTECT;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	4a21      	ldr	r2, [pc, #132]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005c96:	2164      	movs	r1, #100	; 0x64
 8005c98:	54d1      	strb	r1, [r2, r3]
    i++;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->NsWriteUnprotect != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <OPENBL_I2C_ConstructCommandsTable+0x156>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_NS_WRITE_UNPROTECT;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005cac:	2174      	movs	r1, #116	; 0x74
 8005cae:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->NsReadoutProtect != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <OPENBL_I2C_ConstructCommandsTable+0x16c>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_NS_READ_PROTECT;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005cc2:	2183      	movs	r1, #131	; 0x83
 8005cc4:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->NsReadoutUnprotect != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <OPENBL_I2C_ConstructCommandsTable+0x182>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_NS_READ_UNPROTECT;
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005cd8:	2193      	movs	r1, #147	; 0x93
 8005cda:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->SpecialCommand != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <OPENBL_I2C_ConstructCommandsTable+0x198>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_SPECIAL_COMMAND;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005cee:	2150      	movs	r1, #80	; 0x50
 8005cf0:	54d1      	strb	r1, [r2, r3]
    i++;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
  }

  if (pI2cCmd->ExtendedSpecialCommand != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d006      	beq.n	8005d0e <OPENBL_I2C_ConstructCommandsTable+0x1ae>
  {
    a_OPENBL_I2C_CommandsList[i] = CMD_EXTENDED_SPECIAL_COMMAND;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	4a06      	ldr	r2, [pc, #24]	; (8005d1c <OPENBL_I2C_ConstructCommandsTable+0x1bc>)
 8005d04:	2151      	movs	r1, #81	; 0x51
 8005d06:	54d1      	strb	r1, [r2, r3]
    i++;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
  }

  return (i);
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000085c 	.word	0x2000085c

08005d20 <OPENBL_I2C_GetSpecialCmdOpCode>:
 * @param  OpCode Pointer to the operation code to be returned.
 * @param  CmdType Type of the command, Special write or extended special command.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
uint8_t OPENBL_I2C_GetSpecialCmdOpCode(uint16_t *OpCode, OPENBL_SpecialCmdTypeTypeDef CmdType)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  uint8_t xor;
  uint8_t status;
  uint8_t index;

  /* Initialize the status variable */
  status = NACK_BYTE;
 8005d2c:	231f      	movs	r3, #31
 8005d2e:	73fb      	strb	r3, [r7, #15]

  /* Get the command OpCode (2 bytes) */
  op_code[0] = OPENBL_I2C_ReadByte(); /* Read the MSB byte */
 8005d30:	f7fa fef0 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005d34:	4603      	mov	r3, r0
 8005d36:	723b      	strb	r3, [r7, #8]
  op_code[1] = OPENBL_I2C_ReadByte(); /* Read the LSB byte */
 8005d38:	f7fa feec 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	727b      	strb	r3, [r7, #9]

  /* Get the checksum */
  xor  = op_code[0];
 8005d40:	7a3b      	ldrb	r3, [r7, #8]
 8005d42:	737b      	strb	r3, [r7, #13]
  xor ^= op_code[1];
 8005d44:	7a7a      	ldrb	r2, [r7, #9]
 8005d46:	7b7b      	ldrb	r3, [r7, #13]
 8005d48:	4053      	eors	r3, r2
 8005d4a:	737b      	strb	r3, [r7, #13]

  if (OPENBL_I2C_ReadByte() != xor)
 8005d4c:	f7fa fee2 	bl	8000b14 <OPENBL_I2C_ReadByte>
 8005d50:	4603      	mov	r3, r0
 8005d52:	461a      	mov	r2, r3
 8005d54:	7b7b      	ldrb	r3, [r7, #13]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d002      	beq.n	8005d60 <OPENBL_I2C_GetSpecialCmdOpCode+0x40>
  {
    status = NACK_BYTE;
 8005d5a:	231f      	movs	r3, #31
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e03b      	b.n	8005dd8 <OPENBL_I2C_GetSpecialCmdOpCode+0xb8>
  }
  else
  {
    /* Get the operation code */
    *OpCode = ((uint16_t)op_code[0] << 8) | (uint16_t)op_code[1];
 8005d60:	7a3b      	ldrb	r3, [r7, #8]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	b21a      	sxth	r2, r3
 8005d66:	7a7b      	ldrb	r3, [r7, #9]
 8005d68:	b21b      	sxth	r3, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	b21b      	sxth	r3, r3
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	801a      	strh	r2, [r3, #0]

    if (CmdType == OPENBL_SPECIAL_CMD)
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d114      	bne.n	8005da4 <OPENBL_I2C_GetSpecialCmdOpCode+0x84>
    {
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73bb      	strb	r3, [r7, #14]
 8005d7e:	e00d      	b.n	8005d9c <OPENBL_I2C_GetSpecialCmdOpCode+0x7c>
      {
        if (SpecialCmdList[index] == *OpCode)
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <OPENBL_I2C_GetSpecialCmdOpCode+0xc4>)
 8005d84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d102      	bne.n	8005d96 <OPENBL_I2C_GetSpecialCmdOpCode+0x76>
        {
          status = ACK_BYTE;
 8005d90:	2379      	movs	r3, #121	; 0x79
 8005d92:	73fb      	strb	r3, [r7, #15]
          break;
 8005d94:	e020      	b.n	8005dd8 <OPENBL_I2C_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	73bb      	strb	r3, [r7, #14]
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ee      	beq.n	8005d80 <OPENBL_I2C_GetSpecialCmdOpCode+0x60>
 8005da2:	e019      	b.n	8005dd8 <OPENBL_I2C_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else if (CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d114      	bne.n	8005dd4 <OPENBL_I2C_GetSpecialCmdOpCode+0xb4>
    {
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	73bb      	strb	r3, [r7, #14]
 8005dae:	e00d      	b.n	8005dcc <OPENBL_I2C_GetSpecialCmdOpCode+0xac>
      {
        if (ExtendedSpecialCmdList[index] == *OpCode)
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	4a0d      	ldr	r2, [pc, #52]	; (8005de8 <OPENBL_I2C_GetSpecialCmdOpCode+0xc8>)
 8005db4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d102      	bne.n	8005dc6 <OPENBL_I2C_GetSpecialCmdOpCode+0xa6>
        {
          status = ACK_BYTE;
 8005dc0:	2379      	movs	r3, #121	; 0x79
 8005dc2:	73fb      	strb	r3, [r7, #15]
          break;
 8005dc4:	e008      	b.n	8005dd8 <OPENBL_I2C_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	73bb      	strb	r3, [r7, #14]
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ee      	beq.n	8005db0 <OPENBL_I2C_GetSpecialCmdOpCode+0x90>
 8005dd2:	e001      	b.n	8005dd8 <OPENBL_I2C_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else
    {
      status = NACK_BYTE;
 8005dd4:	231f      	movs	r3, #31
 8005dd6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	2000003c 	.word	0x2000003c
 8005de8:	20000040 	.word	0x20000040

08005dec <OPENBL_MEM_RegisterMemory>:
  * @brief  This function is used to register memory interfaces in Open Bootloader MW.
  * @param  *Memory A pointer to the memory handle.
  * @retval ErrorStatus Returns ERROR in case of no more space in the memories table else returns SUCCESS.
  */
ErrorStatus OPENBL_MEM_RegisterMemory(OPENBL_MemoryTypeDef *Memory)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]

  if (NumberOfMemories < MEMORIES_SUPPORTED)
 8005df8:	4b44      	ldr	r3, [pc, #272]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b05      	cmp	r3, #5
 8005dfe:	d87d      	bhi.n	8005efc <OPENBL_MEM_RegisterMemory+0x110>
  {
    a_MemoriesTable[NumberOfMemories].StartAddress      = Memory->StartAddress;
 8005e00:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	4941      	ldr	r1, [pc, #260]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e0a:	202c      	movs	r0, #44	; 0x2c
 8005e0c:	fb00 f303 	mul.w	r3, r0, r3
 8005e10:	440b      	add	r3, r1
 8005e12:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].EndAddress        = Memory->EndAddress;
 8005e14:	4b3d      	ldr	r3, [pc, #244]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	493c      	ldr	r1, [pc, #240]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e1e:	202c      	movs	r0, #44	; 0x2c
 8005e20:	fb00 f303 	mul.w	r3, r0, r3
 8005e24:	440b      	add	r3, r1
 8005e26:	3304      	adds	r3, #4
 8005e28:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Size              = Memory->Size;
 8005e2a:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6892      	ldr	r2, [r2, #8]
 8005e32:	4937      	ldr	r1, [pc, #220]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e34:	202c      	movs	r0, #44	; 0x2c
 8005e36:	fb00 f303 	mul.w	r3, r0, r3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Type              = Memory->Type;
 8005e40:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	68d2      	ldr	r2, [r2, #12]
 8005e48:	4931      	ldr	r1, [pc, #196]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e4a:	202c      	movs	r0, #44	; 0x2c
 8005e4c:	fb00 f303 	mul.w	r3, r0, r3
 8005e50:	440b      	add	r3, r1
 8005e52:	330c      	adds	r3, #12
 8005e54:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Read              = Memory->Read;
 8005e56:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6912      	ldr	r2, [r2, #16]
 8005e5e:	492c      	ldr	r1, [pc, #176]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e60:	202c      	movs	r0, #44	; 0x2c
 8005e62:	fb00 f303 	mul.w	r3, r0, r3
 8005e66:	440b      	add	r3, r1
 8005e68:	3310      	adds	r3, #16
 8005e6a:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Write             = Memory->Write;
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6952      	ldr	r2, [r2, #20]
 8005e74:	4926      	ldr	r1, [pc, #152]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e76:	202c      	movs	r0, #44	; 0x2c
 8005e78:	fb00 f303 	mul.w	r3, r0, r3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3314      	adds	r3, #20
 8005e80:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].SetReadoutProtect = Memory->SetReadoutProtect;
 8005e82:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6992      	ldr	r2, [r2, #24]
 8005e8a:	4921      	ldr	r1, [pc, #132]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005e8c:	202c      	movs	r0, #44	; 0x2c
 8005e8e:	fb00 f303 	mul.w	r3, r0, r3
 8005e92:	440b      	add	r3, r1
 8005e94:	3318      	adds	r3, #24
 8005e96:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].SetWriteProtect   = Memory->SetWriteProtect;
 8005e98:	4b1c      	ldr	r3, [pc, #112]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	69d2      	ldr	r2, [r2, #28]
 8005ea0:	491b      	ldr	r1, [pc, #108]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005ea2:	202c      	movs	r0, #44	; 0x2c
 8005ea4:	fb00 f303 	mul.w	r3, r0, r3
 8005ea8:	440b      	add	r3, r1
 8005eaa:	331c      	adds	r3, #28
 8005eac:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].JumpToAddress     = Memory->JumpToAddress;
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6a12      	ldr	r2, [r2, #32]
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005eb8:	202c      	movs	r0, #44	; 0x2c
 8005eba:	fb00 f303 	mul.w	r3, r0, r3
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3320      	adds	r3, #32
 8005ec2:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].MassErase         = Memory->MassErase;
 8005ec4:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ecc:	4910      	ldr	r1, [pc, #64]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005ece:	202c      	movs	r0, #44	; 0x2c
 8005ed0:	fb00 f303 	mul.w	r3, r0, r3
 8005ed4:	440b      	add	r3, r1
 8005ed6:	3324      	adds	r3, #36	; 0x24
 8005ed8:	601a      	str	r2, [r3, #0]
    a_MemoriesTable[NumberOfMemories].Erase             = Memory->Erase;
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005ee2:	490b      	ldr	r1, [pc, #44]	; (8005f10 <OPENBL_MEM_RegisterMemory+0x124>)
 8005ee4:	202c      	movs	r0, #44	; 0x2c
 8005ee6:	fb00 f303 	mul.w	r3, r0, r3
 8005eea:	440b      	add	r3, r1
 8005eec:	3328      	adds	r3, #40	; 0x28
 8005eee:	601a      	str	r2, [r3, #0]

    NumberOfMemories++;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	4a05      	ldr	r2, [pc, #20]	; (8005f0c <OPENBL_MEM_RegisterMemory+0x120>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e001      	b.n	8005f00 <OPENBL_MEM_RegisterMemory+0x114>
  }
  else
  {
    status = ERROR;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr
 8005f0c:	20000870 	.word	0x20000870
 8005f10:	20000874 	.word	0x20000874

08005f14 <OPENBL_MEM_GetAddressArea>:
  * @param  Address The address to be checked.
  * @retval The address area: FLASH_AREA, RAM_AREA... if the address is valid
  *         or AREA_ERROR if the address is not valid.
  */
uint32_t OPENBL_MEM_GetAddressArea(uint32_t Address)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t mem_area = AREA_ERROR;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  uint32_t counter;

  for (counter = 0; counter < NumberOfMemories; counter++)
 8005f20:	2300      	movs	r3, #0
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	e023      	b.n	8005f6e <OPENBL_MEM_GetAddressArea+0x5a>
  {
    if ((Address >= a_MemoriesTable[counter].StartAddress) && (Address < a_MemoriesTable[counter].EndAddress))
 8005f26:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <OPENBL_MEM_GetAddressArea+0x70>)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	212c      	movs	r1, #44	; 0x2c
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	4413      	add	r3, r2
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d314      	bcc.n	8005f64 <OPENBL_MEM_GetAddressArea+0x50>
 8005f3a:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <OPENBL_MEM_GetAddressArea+0x70>)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	212c      	movs	r1, #44	; 0x2c
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	3304      	adds	r3, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d209      	bcs.n	8005f64 <OPENBL_MEM_GetAddressArea+0x50>
    {
      mem_area = a_MemoriesTable[counter].Type;
 8005f50:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <OPENBL_MEM_GetAddressArea+0x70>)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	212c      	movs	r1, #44	; 0x2c
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]
      break;
 8005f62:	e009      	b.n	8005f78 <OPENBL_MEM_GetAddressArea+0x64>
    }
    else
    {
      mem_area = AREA_ERROR;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  for (counter = 0; counter < NumberOfMemories; counter++)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <OPENBL_MEM_GetAddressArea+0x74>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3d6      	bcc.n	8005f26 <OPENBL_MEM_GetAddressArea+0x12>
    }
  }

  return mem_area;
 8005f78:	68fb      	ldr	r3, [r7, #12]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	20000874 	.word	0x20000874
 8005f88:	20000870 	.word	0x20000870

08005f8c <OPENBL_MEM_GetMemoryIndex>:
  * @brief  This function returns the index of the memory that matches the address given in parameter.
  * @param  Address This address is used determinate the index of the memory pointed by this address.
  * @retval The index of the memory that corresponds to the address
  */
uint32_t OPENBL_MEM_GetMemoryIndex(uint32_t Address)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t counter;

  for (counter = 0; counter < NumberOfMemories; counter++)
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e017      	b.n	8005fca <OPENBL_MEM_GetMemoryIndex+0x3e>
  {
    if ((Address >= a_MemoriesTable[counter].StartAddress) && (Address < a_MemoriesTable[counter].EndAddress))
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <OPENBL_MEM_GetMemoryIndex+0x58>)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	212c      	movs	r1, #44	; 0x2c
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d30a      	bcc.n	8005fc4 <OPENBL_MEM_GetMemoryIndex+0x38>
 8005fae:	4a0d      	ldr	r2, [pc, #52]	; (8005fe4 <OPENBL_MEM_GetMemoryIndex+0x58>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	3304      	adds	r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d308      	bcc.n	8005fd6 <OPENBL_MEM_GetMemoryIndex+0x4a>
  for (counter = 0; counter < NumberOfMemories; counter++)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <OPENBL_MEM_GetMemoryIndex+0x5c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d3e2      	bcc.n	8005f9a <OPENBL_MEM_GetMemoryIndex+0xe>
 8005fd4:	e000      	b.n	8005fd8 <OPENBL_MEM_GetMemoryIndex+0x4c>
    {
      break;
 8005fd6:	bf00      	nop
    }
  }

  return counter;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	20000874 	.word	0x20000874
 8005fe8:	20000870 	.word	0x20000870

08005fec <OPENBL_MEM_Read>:
  * @param  Address The address that will be read.
  * @param  MemoryIndex The memory index of the memory interface that will be used to read from the given address.
  * @retval Returns the read value.
  */
uint8_t OPENBL_MEM_Read(uint32_t Address, uint32_t MemoryIndex)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint8_t value;

  if (MemoryIndex < NumberOfMemories)
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <OPENBL_MEM_Read+0x58>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d219      	bcs.n	8006034 <OPENBL_MEM_Read+0x48>
  {
    if (a_MemoriesTable[MemoryIndex].Read != NULL)
 8006000:	4a11      	ldr	r2, [pc, #68]	; (8006048 <OPENBL_MEM_Read+0x5c>)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	212c      	movs	r1, #44	; 0x2c
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	4413      	add	r3, r2
 800600c:	3310      	adds	r3, #16
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00c      	beq.n	800602e <OPENBL_MEM_Read+0x42>
    {
      value = a_MemoriesTable[MemoryIndex].Read(Address);
 8006014:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <OPENBL_MEM_Read+0x5c>)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	212c      	movs	r1, #44	; 0x2c
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	4413      	add	r3, r2
 8006020:	3310      	adds	r3, #16
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e004      	b.n	8006038 <OPENBL_MEM_Read+0x4c>
    }
    else
    {
      value = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e001      	b.n	8006038 <OPENBL_MEM_Read+0x4c>
    }
  }
  else
  {
    value = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
  }

  return value;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000870 	.word	0x20000870
 8006048:	20000874 	.word	0x20000874

0800604c <OPENBL_MEM_Write>:
  * @param  Data The data to be written.
  * @param  DataLength The length of the data to be written.
  * @retval None.
  */
void OPENBL_MEM_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t index;

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff97 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 800605e:	6178      	str	r0, [r7, #20]

  if (index < NumberOfMemories)
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <OPENBL_MEM_Write+0x54>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	429a      	cmp	r2, r3
 8006068:	d215      	bcs.n	8006096 <OPENBL_MEM_Write+0x4a>
  {
    if (a_MemoriesTable[index].Write != NULL)
 800606a:	4a0e      	ldr	r2, [pc, #56]	; (80060a4 <OPENBL_MEM_Write+0x58>)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	212c      	movs	r1, #44	; 0x2c
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	3314      	adds	r3, #20
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <OPENBL_MEM_Write+0x4a>
    {
      a_MemoriesTable[index].Write(Address, Data, DataLength);
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <OPENBL_MEM_Write+0x58>)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	212c      	movs	r1, #44	; 0x2c
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	4413      	add	r3, r2
 800608a:	3314      	adds	r3, #20
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	4798      	blx	r3
    }
  }
}
 8006096:	bf00      	nop
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000870 	.word	0x20000870
 80060a4:	20000874 	.word	0x20000874

080060a8 <OPENBL_MEM_SetReadOutProtection>:
  * @param  Address The address where the memory protection will be.
  * @param  State The readout protection state that will be set.
  * @retval None.
  */
void OPENBL_MEM_SetReadOutProtection(uint32_t Address, FunctionalState State)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  uint32_t index;

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff69 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 80060ba:	60f8      	str	r0, [r7, #12]

  if (index < NumberOfMemories)
 80060bc:	4b15      	ldr	r3, [pc, #84]	; (8006114 <OPENBL_MEM_SetReadOutProtection+0x6c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d221      	bcs.n	800610a <OPENBL_MEM_SetReadOutProtection+0x62>
  {
    if (a_MemoriesTable[index].SetReadoutProtect != NULL)
 80060c6:	4a14      	ldr	r2, [pc, #80]	; (8006118 <OPENBL_MEM_SetReadOutProtection+0x70>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	212c      	movs	r1, #44	; 0x2c
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	3318      	adds	r3, #24
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <OPENBL_MEM_SetReadOutProtection+0x62>
    {
      if (State == ENABLE)
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10a      	bne.n	80060f6 <OPENBL_MEM_SetReadOutProtection+0x4e>
      {
        a_MemoriesTable[index].SetReadoutProtect(RDP_LEVEL_1);
 80060e0:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <OPENBL_MEM_SetReadOutProtection+0x70>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	212c      	movs	r1, #44	; 0x2c
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	3318      	adds	r3, #24
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	20bb      	movs	r0, #187	; 0xbb
 80060f2:	4798      	blx	r3
      {
        a_MemoriesTable[index].SetReadoutProtect(RDP_LEVEL_0);
      }
    }
  }
}
 80060f4:	e009      	b.n	800610a <OPENBL_MEM_SetReadOutProtection+0x62>
        a_MemoriesTable[index].SetReadoutProtect(RDP_LEVEL_0);
 80060f6:	4a08      	ldr	r2, [pc, #32]	; (8006118 <OPENBL_MEM_SetReadOutProtection+0x70>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	212c      	movs	r1, #44	; 0x2c
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	3318      	adds	r3, #24
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	20aa      	movs	r0, #170	; 0xaa
 8006108:	4798      	blx	r3
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000870 	.word	0x20000870
 8006118:	20000874 	.word	0x20000874

0800611c <OPENBL_MEM_SetWriteProtection>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Enable or disable of the write protection is done
  *          - ERROR:   Enable or disable of the write protection is not done
  */
ErrorStatus OPENBL_MEM_SetWriteProtection(FunctionalState State, uint32_t Address, uint8_t *Buffer, uint32_t Length)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
  uint32_t index;
  ErrorStatus status = SUCCESS;
 800612c:	2301      	movs	r3, #1
 800612e:	75fb      	strb	r3, [r7, #23]

  /* Get the memory index to know in which memory we will write */
  index = OPENBL_MEM_GetMemoryIndex(Address);
 8006130:	68b8      	ldr	r0, [r7, #8]
 8006132:	f7ff ff2b 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 8006136:	6138      	str	r0, [r7, #16]

  if (index < NumberOfMemories)
 8006138:	4b12      	ldr	r3, [pc, #72]	; (8006184 <OPENBL_MEM_SetWriteProtection+0x68>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	429a      	cmp	r2, r3
 8006140:	d219      	bcs.n	8006176 <OPENBL_MEM_SetWriteProtection+0x5a>
  {
    if (a_MemoriesTable[index].SetWriteProtect != NULL)
 8006142:	4a11      	ldr	r2, [pc, #68]	; (8006188 <OPENBL_MEM_SetWriteProtection+0x6c>)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	212c      	movs	r1, #44	; 0x2c
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	331c      	adds	r3, #28
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00c      	beq.n	8006170 <OPENBL_MEM_SetWriteProtection+0x54>
    {
      a_MemoriesTable[index].SetWriteProtect(State, Buffer, Length);
 8006156:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <OPENBL_MEM_SetWriteProtection+0x6c>)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	212c      	movs	r1, #44	; 0x2c
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	331c      	adds	r3, #28
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	7bf8      	ldrb	r0, [r7, #15]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4798      	blx	r3
 800616e:	e004      	b.n	800617a <OPENBL_MEM_SetWriteProtection+0x5e>
    }
    else
    {
      status = ERROR;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
 8006174:	e001      	b.n	800617a <OPENBL_MEM_SetWriteProtection+0x5e>
    }
  }
  else
  {
    status = ERROR;
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000870 	.word	0x20000870
 8006188:	20000874 	.word	0x20000874

0800618c <OPENBL_MEM_JumpToAddress>:
  * @brief  This function is used to jump to an address of an application.
  * @param  Address User application address.
  * @retval None.
  */
void OPENBL_MEM_JumpToAddress(uint32_t Address)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t memory_index;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fef9 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 800619a:	60f8      	str	r0, [r7, #12]

  if (memory_index < NumberOfMemories)
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <OPENBL_MEM_JumpToAddress+0x4c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d213      	bcs.n	80061ce <OPENBL_MEM_JumpToAddress+0x42>
  {
    if (a_MemoriesTable[memory_index].JumpToAddress != NULL)
 80061a6:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <OPENBL_MEM_JumpToAddress+0x50>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	212c      	movs	r1, #44	; 0x2c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	3320      	adds	r3, #32
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <OPENBL_MEM_JumpToAddress+0x42>
    {
      a_MemoriesTable[memory_index].JumpToAddress(Address);
 80061ba:	4a08      	ldr	r2, [pc, #32]	; (80061dc <OPENBL_MEM_JumpToAddress+0x50>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	212c      	movs	r1, #44	; 0x2c
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	4413      	add	r3, r2
 80061c6:	3320      	adds	r3, #32
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
    }
  }
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000870 	.word	0x20000870
 80061dc:	20000874 	.word	0x20000874

080061e0 <OPENBL_MEM_MassErase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Mass erase operation done
  *          - ERROR:   Mass erase operation failed or one parameter is invalid
 */
ErrorStatus OPENBL_MEM_MassErase(uint32_t Address, uint8_t *p_Data, uint32_t DataLength)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  uint32_t memory_index;
  ErrorStatus status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fecd 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 80061f2:	6138      	str	r0, [r7, #16]

  if (memory_index < NumberOfMemories)
 80061f4:	4b13      	ldr	r3, [pc, #76]	; (8006244 <OPENBL_MEM_MassErase+0x64>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d21a      	bcs.n	8006234 <OPENBL_MEM_MassErase+0x54>
  {
    if (a_MemoriesTable[memory_index].MassErase != NULL)
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <OPENBL_MEM_MassErase+0x68>)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	212c      	movs	r1, #44	; 0x2c
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	4413      	add	r3, r2
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00d      	beq.n	800622e <OPENBL_MEM_MassErase+0x4e>
    {
      status = a_MemoriesTable[memory_index].MassErase(p_Data, DataLength);
 8006212:	4a0d      	ldr	r2, [pc, #52]	; (8006248 <OPENBL_MEM_MassErase+0x68>)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	212c      	movs	r1, #44	; 0x2c
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	68b8      	ldr	r0, [r7, #8]
 8006226:	4798      	blx	r3
 8006228:	4603      	mov	r3, r0
 800622a:	75fb      	strb	r3, [r7, #23]
 800622c:	e004      	b.n	8006238 <OPENBL_MEM_MassErase+0x58>
    }
    else
    {
      status = ERROR;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]
 8006232:	e001      	b.n	8006238 <OPENBL_MEM_MassErase+0x58>
    }
  }
  else
  {
    status = ERROR;
 8006234:	2300      	movs	r3, #0
 8006236:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000870 	.word	0x20000870
 8006248:	20000874 	.word	0x20000874

0800624c <OPENBL_MEM_Erase>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Erase operation done
  *          - ERROR:   Erase operation failed or one parameter is invalid
 */
ErrorStatus OPENBL_MEM_Erase(uint32_t Address, uint8_t *p_Data, uint32_t DataLength)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t memory_index;
  ErrorStatus status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff fe97 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 800625e:	6138      	str	r0, [r7, #16]

  if (memory_index < NumberOfMemories)
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <OPENBL_MEM_Erase+0x64>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	429a      	cmp	r2, r3
 8006268:	d21a      	bcs.n	80062a0 <OPENBL_MEM_Erase+0x54>
  {
    if (a_MemoriesTable[memory_index].Erase != NULL)
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <OPENBL_MEM_Erase+0x68>)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	3328      	adds	r3, #40	; 0x28
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <OPENBL_MEM_Erase+0x4e>
    {
      status = a_MemoriesTable[memory_index].Erase(p_Data, DataLength);
 800627e:	4a0d      	ldr	r2, [pc, #52]	; (80062b4 <OPENBL_MEM_Erase+0x68>)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	3328      	adds	r3, #40	; 0x28
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	68b8      	ldr	r0, [r7, #8]
 8006292:	4798      	blx	r3
 8006294:	4603      	mov	r3, r0
 8006296:	75fb      	strb	r3, [r7, #23]
 8006298:	e004      	b.n	80062a4 <OPENBL_MEM_Erase+0x58>
    }
    else
    {
      status = ERROR;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
 800629e:	e001      	b.n	80062a4 <OPENBL_MEM_Erase+0x58>
    }
  }
  else
  {
    status = ERROR;
 80062a0:	2300      	movs	r3, #0
 80062a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000870 	.word	0x20000870
 80062b4:	20000874 	.word	0x20000874

080062b8 <OPENBL_MEM_CheckJumpAddress>:
  * @brief  Check if a given address is valid and can be used for jump operation
  * @param  Address The address to be checked.
  * @retval Returns 1 if the address is valid else returns 0.
  */
uint8_t OPENBL_MEM_CheckJumpAddress(uint32_t Address)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t memory_index;
  uint8_t status;

  /* Get the memory index to know from which memory interface we will used */
  memory_index = OPENBL_MEM_GetMemoryIndex(Address);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fe63 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 80062c6:	60b8      	str	r0, [r7, #8]

  if (a_MemoriesTable[memory_index].JumpToAddress != NULL)
 80062c8:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <OPENBL_MEM_CheckJumpAddress+0x38>)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	212c      	movs	r1, #44	; 0x2c
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	3320      	adds	r3, #32
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <OPENBL_MEM_CheckJumpAddress+0x2a>
  {
    status = 1;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e001      	b.n	80062e6 <OPENBL_MEM_CheckJumpAddress+0x2e>
  }
  else
  {
    status = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000874 	.word	0x20000874

080062f4 <OPENBL_USART_GetCommandsList>:
/**
  * @brief  This function is used to get a pointer to the structure that contains the available USART commands.
  * @return Returns a pointer to the OPENBL_USART_Commands struct.
  */
OPENBL_CommandsTypeDef *OPENBL_USART_GetCommandsList(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
    NULL,
    OPENBL_USART_SpecialCommand,
    OPENBL_USART_ExtendedSpecialCommand
  };

  OPENBL_USART_SetCommandsList(&OPENBL_USART_Commands);
 80062f8:	4802      	ldr	r0, [pc, #8]	; (8006304 <OPENBL_USART_GetCommandsList+0x10>)
 80062fa:	f000 f805 	bl	8006308 <OPENBL_USART_SetCommandsList>

  return (&OPENBL_USART_Commands);
 80062fe:	4b01      	ldr	r3, [pc, #4]	; (8006304 <OPENBL_USART_GetCommandsList+0x10>)
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	200001a8 	.word	0x200001a8

08006308 <OPENBL_USART_SetCommandsList>:
/**
  * @brief  This function is used to set the list of USART supported commands.
  * @return None.
  */
void OPENBL_USART_SetCommandsList(OPENBL_CommandsTypeDef *pUsartCmd)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UsartCommandsNumber = OPENBL_USART_ConstructCommandsTable(pUsartCmd);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fc57 	bl	8006bc4 <OPENBL_USART_ConstructCommandsTable>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	4b03      	ldr	r3, [pc, #12]	; (8006328 <OPENBL_USART_SetCommandsList+0x20>)
 800631c:	701a      	strb	r2, [r3, #0]
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000e15 	.word	0x20000e15

0800632c <OPENBL_USART_GetCommand>:
/**
  * @brief  This function is used to get the list of the available USART commands
  * @retval None.
  */
void OPENBL_USART_GetCommand(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
  uint32_t counter;

  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8006332:	2079      	movs	r0, #121	; 0x79
 8006334:	f7fb f818 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send the number of commands supported by the USART protocol */
  OPENBL_USART_SendByte(UsartCommandsNumber);
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <OPENBL_USART_GetCommand+0x50>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f7fb f813 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send USART protocol version */
  OPENBL_USART_SendByte(OPENBL_USART_VERSION);
 8006342:	2031      	movs	r0, #49	; 0x31
 8006344:	f7fb f810 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send the list of supported commands */
  for (counter = 0U; counter < UsartCommandsNumber; counter++)
 8006348:	2300      	movs	r3, #0
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	e009      	b.n	8006362 <OPENBL_USART_GetCommand+0x36>
  {
    OPENBL_USART_SendByte(a_OPENBL_USART_CommandsList[counter]);
 800634e:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <OPENBL_USART_GetCommand+0x54>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb f806 	bl	8001368 <OPENBL_USART_SendByte>
  for (counter = 0U; counter < UsartCommandsNumber; counter++)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3301      	adds	r3, #1
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <OPENBL_USART_GetCommand+0x50>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4293      	cmp	r3, r2
 800636c:	d3ef      	bcc.n	800634e <OPENBL_USART_GetCommand+0x22>
  }

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 800636e:	2079      	movs	r0, #121	; 0x79
 8006370:	f7fa fffa 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000e15 	.word	0x20000e15
 8006380:	20000e08 	.word	0x20000e08

08006384 <OPENBL_USART_GetVersion>:
/**
  * @brief  This function is used to get the USART protocol version.
  * @retval None.
  */
void OPENBL_USART_GetVersion(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 8006388:	2079      	movs	r0, #121	; 0x79
 800638a:	f7fa ffed 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send USART protocol version */
  OPENBL_USART_SendByte(OPENBL_USART_VERSION);
 800638e:	2031      	movs	r0, #49	; 0x31
 8006390:	f7fa ffea 	bl	8001368 <OPENBL_USART_SendByte>

  OPENBL_USART_SendByte(0x00);
 8006394:	2000      	movs	r0, #0
 8006396:	f7fa ffe7 	bl	8001368 <OPENBL_USART_SendByte>
  OPENBL_USART_SendByte(0x00);
 800639a:	2000      	movs	r0, #0
 800639c:	f7fa ffe4 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 80063a0:	2079      	movs	r0, #121	; 0x79
 80063a2:	f7fa ffe1 	bl	8001368 <OPENBL_USART_SendByte>
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}

080063aa <OPENBL_USART_GetID>:
/**
  * @brief  This function is used to get the device ID.
  * @retval None.
  */
void OPENBL_USART_GetID(void)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	af00      	add	r7, sp, #0
  /* Send Acknowledge byte to notify the host that the command is recognized */
  OPENBL_USART_SendByte(ACK_BYTE);
 80063ae:	2079      	movs	r0, #121	; 0x79
 80063b0:	f7fa ffda 	bl	8001368 <OPENBL_USART_SendByte>

  OPENBL_USART_SendByte(0x01);
 80063b4:	2001      	movs	r0, #1
 80063b6:	f7fa ffd7 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send the device ID starting by the MSB byte then the LSB byte */
  OPENBL_USART_SendByte(DEVICE_ID_MSB);
 80063ba:	2004      	movs	r0, #4
 80063bc:	f7fa ffd4 	bl	8001368 <OPENBL_USART_SendByte>
  OPENBL_USART_SendByte(DEVICE_ID_LSB);
 80063c0:	2097      	movs	r0, #151	; 0x97
 80063c2:	f7fa ffd1 	bl	8001368 <OPENBL_USART_SendByte>

  /* Send last Acknowledge synchronization byte */
  OPENBL_USART_SendByte(ACK_BYTE);
 80063c6:	2079      	movs	r0, #121	; 0x79
 80063c8:	f7fa ffce 	bl	8001368 <OPENBL_USART_SendByte>
}
 80063cc:	bf00      	nop
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <OPENBL_USART_ReadMemory>:
/**
 * @brief  This function is used to read memory from the device.
 * @retval None.
 */
void OPENBL_USART_ReadMemory(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
  uint32_t memory_index;
  uint8_t data;
  uint8_t xor;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 80063d6:	f7fa f818 	bl	800040a <Common_GetProtectionStatus>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <OPENBL_USART_ReadMemory+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 80063e0:	201f      	movs	r0, #31
 80063e2:	f7fa ffc1 	bl	8001368 <OPENBL_USART_SendByte>
          address++;
        }
      }
    }
  }
}
 80063e6:	e040      	b.n	800646a <OPENBL_USART_ReadMemory+0x9a>
    OPENBL_USART_SendByte(ACK_BYTE);
 80063e8:	2079      	movs	r0, #121	; 0x79
 80063ea:	f7fa ffbd 	bl	8001368 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 80063ee:	463b      	mov	r3, r7
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fa4d 	bl	8006890 <OPENBL_USART_GetAddress>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b1f      	cmp	r3, #31
 80063fa:	d103      	bne.n	8006404 <OPENBL_USART_ReadMemory+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 80063fc:	201f      	movs	r0, #31
 80063fe:	f7fa ffb3 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006402:	e032      	b.n	800646a <OPENBL_USART_ReadMemory+0x9a>
      OPENBL_USART_SendByte(ACK_BYTE);
 8006404:	2079      	movs	r0, #121	; 0x79
 8006406:	f7fa ffaf 	bl	8001368 <OPENBL_USART_SendByte>
      data = OPENBL_USART_ReadByte();
 800640a:	f7fa ff99 	bl	8001340 <OPENBL_USART_ReadByte>
 800640e:	4603      	mov	r3, r0
 8006410:	72fb      	strb	r3, [r7, #11]
      xor  = ~data;
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	43db      	mvns	r3, r3
 8006416:	72bb      	strb	r3, [r7, #10]
      if (OPENBL_USART_ReadByte() != xor)
 8006418:	f7fa ff92 	bl	8001340 <OPENBL_USART_ReadByte>
 800641c:	4603      	mov	r3, r0
 800641e:	461a      	mov	r2, r3
 8006420:	7abb      	ldrb	r3, [r7, #10]
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <OPENBL_USART_ReadMemory+0x5e>
        OPENBL_USART_SendByte(NACK_BYTE);
 8006426:	201f      	movs	r0, #31
 8006428:	f7fa ff9e 	bl	8001368 <OPENBL_USART_SendByte>
}
 800642c:	e01d      	b.n	800646a <OPENBL_USART_ReadMemory+0x9a>
        OPENBL_USART_SendByte(ACK_BYTE);
 800642e:	2079      	movs	r0, #121	; 0x79
 8006430:	f7fa ff9a 	bl	8001368 <OPENBL_USART_SendByte>
        memory_index = OPENBL_MEM_GetMemoryIndex(address);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fda8 	bl	8005f8c <OPENBL_MEM_GetMemoryIndex>
 800643c:	6078      	str	r0, [r7, #4]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e00e      	b.n	8006464 <OPENBL_USART_ReadMemory+0x94>
          OPENBL_USART_SendByte(OPENBL_MEM_Read(address, memory_index));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fdce 	bl	8005fec <OPENBL_MEM_Read>
 8006450:	4603      	mov	r3, r0
 8006452:	4618      	mov	r0, r3
 8006454:	f7fa ff88 	bl	8001368 <OPENBL_USART_SendByte>
          address++;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	603b      	str	r3, [r7, #0]
        for (counter = ((uint32_t)data + 1U); counter != 0U; counter--)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b01      	subs	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ed      	bne.n	8006446 <OPENBL_USART_ReadMemory+0x76>
}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <OPENBL_USART_WriteMemory>:
/**
 * @brief  This function is used to write in to device memory.
 * @retval None.
 */
void OPENBL_USART_WriteMemory(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
  uint32_t codesize;
  uint8_t *ramaddress;
  uint8_t data;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 800647a:	f7f9 ffc6 	bl	800040a <Common_GetProtectionStatus>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <OPENBL_USART_WriteMemory+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006484:	201f      	movs	r0, #31
 8006486:	f7fa ff6f 	bl	8001368 <OPENBL_USART_SendByte>
        /* Start post processing task if needed */
        Common_StartPostProcessing();
      }
    }
  }
}
 800648a:	e048      	b.n	800651e <OPENBL_USART_WriteMemory+0xaa>
    OPENBL_USART_SendByte(ACK_BYTE);
 800648c:	2079      	movs	r0, #121	; 0x79
 800648e:	f7fa ff6b 	bl	8001368 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 8006492:	463b      	mov	r3, r7
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f9fb 	bl	8006890 <OPENBL_USART_GetAddress>
 800649a:	4603      	mov	r3, r0
 800649c:	2b1f      	cmp	r3, #31
 800649e:	d103      	bne.n	80064a8 <OPENBL_USART_WriteMemory+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 80064a0:	201f      	movs	r0, #31
 80064a2:	f7fa ff61 	bl	8001368 <OPENBL_USART_SendByte>
}
 80064a6:	e03a      	b.n	800651e <OPENBL_USART_WriteMemory+0xaa>
      OPENBL_USART_SendByte(ACK_BYTE);
 80064a8:	2079      	movs	r0, #121	; 0x79
 80064aa:	f7fa ff5d 	bl	8001368 <OPENBL_USART_SendByte>
      ramaddress = (uint8_t *)USART_RAM_Buf;
 80064ae:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <OPENBL_USART_WriteMemory+0xb4>)
 80064b0:	60fb      	str	r3, [r7, #12]
      data = OPENBL_USART_ReadByte();
 80064b2:	f7fa ff45 	bl	8001340 <OPENBL_USART_ReadByte>
 80064b6:	4603      	mov	r3, r0
 80064b8:	72fb      	strb	r3, [r7, #11]
      codesize = (uint32_t)data + 1U;
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	3301      	adds	r3, #1
 80064be:	607b      	str	r3, [r7, #4]
      tmpXOR = data;
 80064c0:	7afb      	ldrb	r3, [r7, #11]
 80064c2:	617b      	str	r3, [r7, #20]
      for (counter = codesize; counter != 0U ; counter--)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	e010      	b.n	80064ec <OPENBL_USART_WriteMemory+0x78>
        data    = OPENBL_USART_ReadByte();
 80064ca:	f7fa ff39 	bl	8001340 <OPENBL_USART_ReadByte>
 80064ce:	4603      	mov	r3, r0
 80064d0:	72fb      	strb	r3, [r7, #11]
        tmpXOR ^= data;
 80064d2:	7afb      	ldrb	r3, [r7, #11]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4053      	eors	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
        *(__IO uint8_t *)(ramaddress) = data;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	7afa      	ldrb	r2, [r7, #11]
 80064de:	701a      	strb	r2, [r3, #0]
        ramaddress++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
      for (counter = codesize; counter != 0U ; counter--)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1eb      	bne.n	80064ca <OPENBL_USART_WriteMemory+0x56>
      if (OPENBL_USART_ReadByte() != tmpXOR)
 80064f2:	f7fa ff25 	bl	8001340 <OPENBL_USART_ReadByte>
 80064f6:	4603      	mov	r3, r0
 80064f8:	461a      	mov	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <OPENBL_USART_WriteMemory+0x94>
        OPENBL_USART_SendByte(NACK_BYTE);
 8006500:	201f      	movs	r0, #31
 8006502:	f7fa ff31 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006506:	e00a      	b.n	800651e <OPENBL_USART_WriteMemory+0xaa>
        OPENBL_MEM_Write(address, (uint8_t *)USART_RAM_Buf, codesize);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4906      	ldr	r1, [pc, #24]	; (8006528 <OPENBL_USART_WriteMemory+0xb4>)
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fd9c 	bl	800604c <OPENBL_MEM_Write>
        OPENBL_USART_SendByte(ACK_BYTE);
 8006514:	2079      	movs	r0, #121	; 0x79
 8006516:	f7fa ff27 	bl	8001368 <OPENBL_USART_SendByte>
        Common_StartPostProcessing();
 800651a:	f7f9 ff97 	bl	800044c <Common_StartPostProcessing>
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	2000097c 	.word	0x2000097c

0800652c <OPENBL_USART_Go>:
/**
  * @brief  This function is used to jump to the user application.
  * @retval None.
  */
void OPENBL_USART_Go(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
  uint32_t address;
  uint8_t status;

  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8006532:	f7f9 ff6a 	bl	800040a <Common_GetProtectionStatus>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <OPENBL_USART_Go+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 800653c:	201f      	movs	r0, #31
 800653e:	f7fa ff13 	bl	8001368 <OPENBL_USART_SendByte>

        OPENBL_MEM_JumpToAddress(address);
      }
    }
  }
}
 8006542:	e021      	b.n	8006588 <OPENBL_USART_Go+0x5c>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006544:	2079      	movs	r0, #121	; 0x79
 8006546:	f7fa ff0f 	bl	8001368 <OPENBL_USART_SendByte>
    if (OPENBL_USART_GetAddress(&address) == NACK_BYTE)
 800654a:	463b      	mov	r3, r7
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f99f 	bl	8006890 <OPENBL_USART_GetAddress>
 8006552:	4603      	mov	r3, r0
 8006554:	2b1f      	cmp	r3, #31
 8006556:	d103      	bne.n	8006560 <OPENBL_USART_Go+0x34>
      OPENBL_USART_SendByte(NACK_BYTE);
 8006558:	201f      	movs	r0, #31
 800655a:	f7fa ff05 	bl	8001368 <OPENBL_USART_SendByte>
}
 800655e:	e013      	b.n	8006588 <OPENBL_USART_Go+0x5c>
      status = OPENBL_MEM_CheckJumpAddress(address);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fea8 	bl	80062b8 <OPENBL_MEM_CheckJumpAddress>
 8006568:	4603      	mov	r3, r0
 800656a:	71fb      	strb	r3, [r7, #7]
      if (status == 0U)
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <OPENBL_USART_Go+0x4e>
        OPENBL_USART_SendByte(NACK_BYTE);
 8006572:	201f      	movs	r0, #31
 8006574:	f7fa fef8 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006578:	e006      	b.n	8006588 <OPENBL_USART_Go+0x5c>
        OPENBL_USART_SendByte(ACK_BYTE);
 800657a:	2079      	movs	r0, #121	; 0x79
 800657c:	f7fa fef4 	bl	8001368 <OPENBL_USART_SendByte>
        OPENBL_MEM_JumpToAddress(address);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fe02 	bl	800618c <OPENBL_MEM_JumpToAddress>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <OPENBL_USART_ReadoutProtect>:
/**
 * @brief  This function is used to enable readout protection.
 * @retval None.
 */
void OPENBL_USART_ReadoutProtect(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Check memory protection then send adequate response */
  if (Common_GetProtectionStatus() != RESET)
 8006594:	f7f9 ff39 	bl	800040a <Common_GetProtectionStatus>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <OPENBL_USART_ReadoutProtect+0x16>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 800659e:	201f      	movs	r0, #31
 80065a0:	f7fa fee2 	bl	8001368 <OPENBL_USART_SendByte>
    OPENBL_USART_SendByte(ACK_BYTE);

    /* Start post processing task if needed */
    Common_StartPostProcessing();
  }
}
 80065a4:	e00c      	b.n	80065c0 <OPENBL_USART_ReadoutProtect+0x30>
    OPENBL_USART_SendByte(ACK_BYTE);
 80065a6:	2079      	movs	r0, #121	; 0x79
 80065a8:	f7fa fede 	bl	8001368 <OPENBL_USART_SendByte>
    OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, ENABLE);
 80065ac:	2101      	movs	r1, #1
 80065ae:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80065b2:	f7ff fd79 	bl	80060a8 <OPENBL_MEM_SetReadOutProtection>
    OPENBL_USART_SendByte(ACK_BYTE);
 80065b6:	2079      	movs	r0, #121	; 0x79
 80065b8:	f7fa fed6 	bl	8001368 <OPENBL_USART_SendByte>
    Common_StartPostProcessing();
 80065bc:	f7f9 ff46 	bl	800044c <Common_StartPostProcessing>
}
 80065c0:	bf00      	nop
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <OPENBL_USART_ReadoutUnprotect>:
/**
 * @brief  This function is used to disable readout protection.
 * @retval None.
 */
void OPENBL_USART_ReadoutUnprotect(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  OPENBL_USART_SendByte(ACK_BYTE);
 80065c8:	2079      	movs	r0, #121	; 0x79
 80065ca:	f7fa fecd 	bl	8001368 <OPENBL_USART_SendByte>

  /* Once the option bytes modification start bit is set in FLASH CR register,
     all the RAM is erased, this causes the erase of the Open Bootloader RAM.
     This is why the last ACK is sent before the call of OPENBL_MEM_SetReadOutProtection */
  OPENBL_USART_SendByte(ACK_BYTE);
 80065ce:	2079      	movs	r0, #121	; 0x79
 80065d0:	f7fa feca 	bl	8001368 <OPENBL_USART_SendByte>

  /* Disable the read protection */
  OPENBL_MEM_SetReadOutProtection(OPENBL_DEFAULT_MEM, DISABLE);
 80065d4:	2100      	movs	r1, #0
 80065d6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80065da:	f7ff fd65 	bl	80060a8 <OPENBL_MEM_SetReadOutProtection>

  /* Start post processing task if needed */
  Common_StartPostProcessing();
 80065de:	f7f9 ff35 	bl	800044c <Common_StartPostProcessing>
}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <OPENBL_USART_EraseMemory>:
/**
 * @brief  This function is used to erase a memory.
 * @retval None.
 */
void OPENBL_USART_EraseMemory(void)
{
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b089      	sub	sp, #36	; 0x24
 80065ec:	af00      	add	r7, sp, #0
  uint32_t xor;
  uint32_t counter;
  uint32_t numpage;
  uint16_t data;
  ErrorStatus error_value;
  uint8_t status = ACK_BYTE;
 80065ee:	2379      	movs	r3, #121	; 0x79
 80065f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *ramaddress;

  ramaddress = (uint8_t *) USART_RAM_Buf;
 80065f2:	4b68      	ldr	r3, [pc, #416]	; (8006794 <OPENBL_USART_EraseMemory+0x1ac>)
 80065f4:	613b      	str	r3, [r7, #16]

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 80065f6:	f7f9 ff08 	bl	800040a <Common_GetProtectionStatus>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <OPENBL_USART_EraseMemory+0x20>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006600:	201f      	movs	r0, #31
 8006602:	f7fa feb1 	bl	8001368 <OPENBL_USART_SendByte>
      }
    }

    OPENBL_USART_SendByte(status);
  }
}
 8006606:	e0c0      	b.n	800678a <OPENBL_USART_EraseMemory+0x1a2>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006608:	2079      	movs	r0, #121	; 0x79
 800660a:	f7fa fead 	bl	8001368 <OPENBL_USART_SendByte>
    data = OPENBL_USART_ReadByte();
 800660e:	f7fa fe97 	bl	8001340 <OPENBL_USART_ReadByte>
 8006612:	4603      	mov	r3, r0
 8006614:	81fb      	strh	r3, [r7, #14]
    data = (uint16_t)(data << 8) | OPENBL_USART_ReadByte();
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	b29c      	uxth	r4, r3
 800661c:	f7fa fe90 	bl	8001340 <OPENBL_USART_ReadByte>
 8006620:	4603      	mov	r3, r0
 8006622:	b29b      	uxth	r3, r3
 8006624:	4323      	orrs	r3, r4
 8006626:	81fb      	strh	r3, [r7, #14]
    xor  = ((uint32_t)data & 0xFF00U) >> 8;
 8006628:	89fb      	ldrh	r3, [r7, #14]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	b29b      	uxth	r3, r3
 800662e:	61fb      	str	r3, [r7, #28]
    xor ^= (uint32_t)data & 0x00FFU;
 8006630:	89fb      	ldrh	r3, [r7, #14]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	4053      	eors	r3, r2
 8006638:	61fb      	str	r3, [r7, #28]
    if ((data & 0xFFF0U) == 0xFFF0U)
 800663a:	89fa      	ldrh	r2, [r7, #14]
 800663c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006640:	4013      	ands	r3, r2
 8006642:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8006646:	4293      	cmp	r3, r2
 8006648:	d139      	bne.n	80066be <OPENBL_USART_EraseMemory+0xd6>
      if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 800664a:	f7fa fe79 	bl	8001340 <OPENBL_USART_ReadByte>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	429a      	cmp	r2, r3
 8006658:	d002      	beq.n	8006660 <OPENBL_USART_EraseMemory+0x78>
        status = NACK_BYTE;
 800665a:	231f      	movs	r3, #31
 800665c:	75fb      	strb	r3, [r7, #23]
 800665e:	e090      	b.n	8006782 <OPENBL_USART_EraseMemory+0x19a>
        if ((data == 0xFFFFU) || (data == 0xFFFEU) || (data == 0xFFFDU))
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <OPENBL_USART_EraseMemory+0x96>
 800666a:	89fb      	ldrh	r3, [r7, #14]
 800666c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <OPENBL_USART_EraseMemory+0x96>
 8006674:	89fb      	ldrh	r3, [r7, #14]
 8006676:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800667a:	4293      	cmp	r3, r2
 800667c:	d11c      	bne.n	80066b8 <OPENBL_USART_EraseMemory+0xd0>
          ramaddress[0] = (uint8_t)(data & 0x00FFU);
 800667e:	89fb      	ldrh	r3, [r7, #14]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	701a      	strb	r2, [r3, #0]
          ramaddress[1] = (uint8_t)((data & 0xFF00U) >> 8);
 8006686:	89fb      	ldrh	r3, [r7, #14]
 8006688:	0a1b      	lsrs	r3, r3, #8
 800668a:	b29a      	uxth	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3301      	adds	r3, #1
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
          error_value = OPENBL_MEM_MassErase(OPENBL_DEFAULT_MEM, (uint8_t *) USART_RAM_Buf, USART_RAM_BUFFER_SIZE);
 8006694:	f240 428c 	movw	r2, #1164	; 0x48c
 8006698:	493e      	ldr	r1, [pc, #248]	; (8006794 <OPENBL_USART_EraseMemory+0x1ac>)
 800669a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800669e:	f7ff fd9f 	bl	80061e0 <OPENBL_MEM_MassErase>
 80066a2:	4603      	mov	r3, r0
 80066a4:	71fb      	strb	r3, [r7, #7]
          if (error_value == SUCCESS)
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d102      	bne.n	80066b2 <OPENBL_USART_EraseMemory+0xca>
            status = ACK_BYTE;
 80066ac:	2379      	movs	r3, #121	; 0x79
 80066ae:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 80066b0:	e067      	b.n	8006782 <OPENBL_USART_EraseMemory+0x19a>
            status = NACK_BYTE;
 80066b2:	231f      	movs	r3, #31
 80066b4:	75fb      	strb	r3, [r7, #23]
          if (error_value == SUCCESS)
 80066b6:	e064      	b.n	8006782 <OPENBL_USART_EraseMemory+0x19a>
          status = NACK_BYTE;
 80066b8:	231f      	movs	r3, #31
 80066ba:	75fb      	strb	r3, [r7, #23]
 80066bc:	e061      	b.n	8006782 <OPENBL_USART_EraseMemory+0x19a>
      ramaddress = (uint8_t *) USART_RAM_Buf;
 80066be:	4b35      	ldr	r3, [pc, #212]	; (8006794 <OPENBL_USART_EraseMemory+0x1ac>)
 80066c0:	613b      	str	r3, [r7, #16]
      numpage = (uint32_t)data + 1U;
 80066c2:	89fb      	ldrh	r3, [r7, #14]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60bb      	str	r3, [r7, #8]
      *ramaddress = (uint8_t)(numpage & 0x00FFU);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	3301      	adds	r3, #1
 80066d4:	613b      	str	r3, [r7, #16]
      *ramaddress = (uint8_t)((numpage & 0xFF00U) >> 8);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3301      	adds	r3, #1
 80066e4:	613b      	str	r3, [r7, #16]
      for (counter = numpage; counter != 0U ; counter--)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	e02e      	b.n	800674a <OPENBL_USART_EraseMemory+0x162>
        data  = OPENBL_USART_ReadByte();
 80066ec:	f7fa fe28 	bl	8001340 <OPENBL_USART_ReadByte>
 80066f0:	4603      	mov	r3, r0
 80066f2:	81fb      	strh	r3, [r7, #14]
        xor  ^= data;
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	4053      	eors	r3, r2
 80066fa:	61fb      	str	r3, [r7, #28]
        data  = (uint16_t)((data & 0x00FFU) << 8);
 80066fc:	89fb      	ldrh	r3, [r7, #14]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	81fb      	strh	r3, [r7, #14]
        data |= (uint8_t)(OPENBL_USART_ReadByte() & 0x00FFU);
 8006702:	f7fa fe1d 	bl	8001340 <OPENBL_USART_ReadByte>
 8006706:	4603      	mov	r3, r0
 8006708:	b29a      	uxth	r2, r3
 800670a:	89fb      	ldrh	r3, [r7, #14]
 800670c:	4313      	orrs	r3, r2
 800670e:	81fb      	strh	r3, [r7, #14]
        xor  ^= ((uint32_t)data & 0x00FFU);
 8006710:	89fb      	ldrh	r3, [r7, #14]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	4053      	eors	r3, r2
 8006718:	61fb      	str	r3, [r7, #28]
        if (counter < (USART_RAM_BUFFER_SIZE / 2U))
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f240 2245 	movw	r2, #581	; 0x245
 8006720:	4293      	cmp	r3, r2
 8006722:	d80f      	bhi.n	8006744 <OPENBL_USART_EraseMemory+0x15c>
          *ramaddress = (uint8_t)(data & 0x00FFU);
 8006724:	89fb      	ldrh	r3, [r7, #14]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	701a      	strb	r2, [r3, #0]
          ramaddress++;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
          *ramaddress = (uint8_t)((data & 0xFF00U) >> 8);
 8006732:	89fb      	ldrh	r3, [r7, #14]
 8006734:	0a1b      	lsrs	r3, r3, #8
 8006736:	b29b      	uxth	r3, r3
 8006738:	b2da      	uxtb	r2, r3
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	701a      	strb	r2, [r3, #0]
          ramaddress++;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
      for (counter = numpage; counter != 0U ; counter--)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	3b01      	subs	r3, #1
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1cd      	bne.n	80066ec <OPENBL_USART_EraseMemory+0x104>
      if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 8006750:	f7fa fdf6 	bl	8001340 <OPENBL_USART_ReadByte>
 8006754:	4603      	mov	r3, r0
 8006756:	461a      	mov	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <OPENBL_USART_EraseMemory+0x17e>
        status = NACK_BYTE;
 8006760:	231f      	movs	r3, #31
 8006762:	75fb      	strb	r3, [r7, #23]
 8006764:	e00d      	b.n	8006782 <OPENBL_USART_EraseMemory+0x19a>
        error_value = OPENBL_MEM_Erase(OPENBL_DEFAULT_MEM, (uint8_t *) USART_RAM_Buf, USART_RAM_BUFFER_SIZE);
 8006766:	f240 428c 	movw	r2, #1164	; 0x48c
 800676a:	490a      	ldr	r1, [pc, #40]	; (8006794 <OPENBL_USART_EraseMemory+0x1ac>)
 800676c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8006770:	f7ff fd6c 	bl	800624c <OPENBL_MEM_Erase>
 8006774:	4603      	mov	r3, r0
 8006776:	71fb      	strb	r3, [r7, #7]
        if (error_value == SUCCESS)
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <OPENBL_USART_EraseMemory+0x19a>
          status = ACK_BYTE;
 800677e:	2379      	movs	r3, #121	; 0x79
 8006780:	75fb      	strb	r3, [r7, #23]
    OPENBL_USART_SendByte(status);
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	4618      	mov	r0, r3
 8006786:	f7fa fdef 	bl	8001368 <OPENBL_USART_SendByte>
}
 800678a:	bf00      	nop
 800678c:	3724      	adds	r7, #36	; 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}
 8006792:	bf00      	nop
 8006794:	2000097c 	.word	0x2000097c

08006798 <OPENBL_USART_WriteProtect>:
/**
 * @brief  This function is used to enable write protect.
 * @retval None.
 */
void OPENBL_USART_WriteProtect(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
  uint32_t xor;
  ErrorStatus error_value;
  uint8_t *ramaddress;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 800679e:	f7f9 fe34 	bl	800040a <Common_GetProtectionStatus>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <OPENBL_USART_WriteProtect+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 80067a8:	201f      	movs	r0, #31
 80067aa:	f7fa fddd 	bl	8001368 <OPENBL_USART_SendByte>
      {
        Common_StartPostProcessing();
      }
    }
  }
}
 80067ae:	e044      	b.n	800683a <OPENBL_USART_WriteProtect+0xa2>
    OPENBL_USART_SendByte(ACK_BYTE);
 80067b0:	2079      	movs	r0, #121	; 0x79
 80067b2:	f7fa fdd9 	bl	8001368 <OPENBL_USART_SendByte>
    data = OPENBL_USART_ReadByte();
 80067b6:	f7fa fdc3 	bl	8001340 <OPENBL_USART_ReadByte>
 80067ba:	4603      	mov	r3, r0
 80067bc:	60bb      	str	r3, [r7, #8]
    ramaddress = (uint8_t *) USART_RAM_Buf;
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <OPENBL_USART_WriteProtect+0xac>)
 80067c0:	60fb      	str	r3, [r7, #12]
    length     = data + 1U;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3301      	adds	r3, #1
 80067c6:	607b      	str	r3, [r7, #4]
    xor = data;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	613b      	str	r3, [r7, #16]
    for (counter = length; counter != 0U ; counter--)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e011      	b.n	80067f6 <OPENBL_USART_WriteProtect+0x5e>
      data  = OPENBL_USART_ReadByte();
 80067d2:	f7fa fdb5 	bl	8001340 <OPENBL_USART_ReadByte>
 80067d6:	4603      	mov	r3, r0
 80067d8:	60bb      	str	r3, [r7, #8]
      xor  ^= data;
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4053      	eors	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
      *(__IO uint8_t *)(ramaddress) = (uint8_t) data;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	701a      	strb	r2, [r3, #0]
      ramaddress++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
    for (counter = length; counter != 0U ; counter--)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ea      	bne.n	80067d2 <OPENBL_USART_WriteProtect+0x3a>
    if (OPENBL_USART_ReadByte() != (uint8_t) xor)
 80067fc:	f7fa fda0 	bl	8001340 <OPENBL_USART_ReadByte>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	429a      	cmp	r2, r3
 800680a:	d003      	beq.n	8006814 <OPENBL_USART_WriteProtect+0x7c>
      OPENBL_USART_SendByte(NACK_BYTE);
 800680c:	201f      	movs	r0, #31
 800680e:	f7fa fdab 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006812:	e012      	b.n	800683a <OPENBL_USART_WriteProtect+0xa2>
      ramaddress = (uint8_t *) USART_RAM_Buf;
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <OPENBL_USART_WriteProtect+0xac>)
 8006816:	60fb      	str	r3, [r7, #12]
      error_value = OPENBL_MEM_SetWriteProtection(ENABLE, OPENBL_DEFAULT_MEM, ramaddress, length);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8006820:	2001      	movs	r0, #1
 8006822:	f7ff fc7b 	bl	800611c <OPENBL_MEM_SetWriteProtection>
 8006826:	4603      	mov	r3, r0
 8006828:	70fb      	strb	r3, [r7, #3]
      OPENBL_USART_SendByte(ACK_BYTE);
 800682a:	2079      	movs	r0, #121	; 0x79
 800682c:	f7fa fd9c 	bl	8001368 <OPENBL_USART_SendByte>
      if (error_value == SUCCESS)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <OPENBL_USART_WriteProtect+0xa2>
        Common_StartPostProcessing();
 8006836:	f7f9 fe09 	bl	800044c <Common_StartPostProcessing>
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	2000097c 	.word	0x2000097c

08006848 <OPENBL_USART_WriteUnprotect>:
/**
 * @brief  This function is used to disable write protect.
 * @retval None.
 */
void OPENBL_USART_WriteUnprotect(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  ErrorStatus error_value;

  /* Check if the memory is not protected */
  if (Common_GetProtectionStatus() != RESET)
 800684e:	f7f9 fddc 	bl	800040a <Common_GetProtectionStatus>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <OPENBL_USART_WriteUnprotect+0x18>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006858:	201f      	movs	r0, #31
 800685a:	f7fa fd85 	bl	8001368 <OPENBL_USART_SendByte>
    if (error_value == SUCCESS)
    {
      Common_StartPostProcessing();
    }
  }
}
 800685e:	e013      	b.n	8006888 <OPENBL_USART_WriteUnprotect+0x40>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006860:	2079      	movs	r0, #121	; 0x79
 8006862:	f7fa fd81 	bl	8001368 <OPENBL_USART_SendByte>
    error_value = OPENBL_MEM_SetWriteProtection(DISABLE, OPENBL_DEFAULT_MEM, NULL, 0);
 8006866:	2300      	movs	r3, #0
 8006868:	2200      	movs	r2, #0
 800686a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800686e:	2000      	movs	r0, #0
 8006870:	f7ff fc54 	bl	800611c <OPENBL_MEM_SetWriteProtection>
 8006874:	4603      	mov	r3, r0
 8006876:	71fb      	strb	r3, [r7, #7]
    OPENBL_USART_SendByte(ACK_BYTE);
 8006878:	2079      	movs	r0, #121	; 0x79
 800687a:	f7fa fd75 	bl	8001368 <OPENBL_USART_SendByte>
    if (error_value == SUCCESS)
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <OPENBL_USART_WriteUnprotect+0x40>
      Common_StartPostProcessing();
 8006884:	f7f9 fde2 	bl	800044c <Common_StartPostProcessing>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <OPENBL_USART_GetAddress>:
/**
 * @brief  This function is used to get a valid address.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
uint8_t OPENBL_USART_GetAddress(uint32_t *Address)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]
  uint8_t status;
  uint8_t xor;

  data[3] = OPENBL_USART_ReadByte();
 800689c:	f7fa fd50 	bl	8001340 <OPENBL_USART_ReadByte>
 80068a0:	4603      	mov	r3, r0
 80068a2:	72fb      	strb	r3, [r7, #11]
  data[2] = OPENBL_USART_ReadByte();
 80068a4:	f7fa fd4c 	bl	8001340 <OPENBL_USART_ReadByte>
 80068a8:	4603      	mov	r3, r0
 80068aa:	72bb      	strb	r3, [r7, #10]
  data[1] = OPENBL_USART_ReadByte();
 80068ac:	f7fa fd48 	bl	8001340 <OPENBL_USART_ReadByte>
 80068b0:	4603      	mov	r3, r0
 80068b2:	727b      	strb	r3, [r7, #9]
  data[0] = OPENBL_USART_ReadByte();
 80068b4:	f7fa fd44 	bl	8001340 <OPENBL_USART_ReadByte>
 80068b8:	4603      	mov	r3, r0
 80068ba:	723b      	strb	r3, [r7, #8]

  xor = data[3] ^ data[2] ^ data[1] ^ data[0];
 80068bc:	7afa      	ldrb	r2, [r7, #11]
 80068be:	7abb      	ldrb	r3, [r7, #10]
 80068c0:	4053      	eors	r3, r2
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	7a7b      	ldrb	r3, [r7, #9]
 80068c6:	4053      	eors	r3, r2
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	7a3b      	ldrb	r3, [r7, #8]
 80068cc:	4053      	eors	r3, r2
 80068ce:	73bb      	strb	r3, [r7, #14]

  /* Check the integrity of received data */
  if (OPENBL_USART_ReadByte() != xor)
 80068d0:	f7fa fd36 	bl	8001340 <OPENBL_USART_ReadByte>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	4293      	cmp	r3, r2
 80068dc:	d002      	beq.n	80068e4 <OPENBL_USART_GetAddress+0x54>
  {
    status = NACK_BYTE;
 80068de:	231f      	movs	r3, #31
 80068e0:	73fb      	strb	r3, [r7, #15]
 80068e2:	e018      	b.n	8006916 <OPENBL_USART_GetAddress+0x86>
  }
  else
  {
    *Address = ((uint32_t)data[3] << 24) | ((uint32_t)data[2] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[0];
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	061a      	lsls	r2, r3, #24
 80068e8:	7abb      	ldrb	r3, [r7, #10]
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	431a      	orrs	r2, r3
 80068ee:	7a7b      	ldrb	r3, [r7, #9]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	4313      	orrs	r3, r2
 80068f4:	7a3a      	ldrb	r2, [r7, #8]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	601a      	str	r2, [r3, #0]

    /* Check if received address is valid or not */
    if (OPENBL_MEM_GetAddressArea(*Address) == AREA_ERROR)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff fb07 	bl	8005f14 <OPENBL_MEM_GetAddressArea>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <OPENBL_USART_GetAddress+0x82>
    {
      status = NACK_BYTE;
 800690c:	231f      	movs	r3, #31
 800690e:	73fb      	strb	r3, [r7, #15]
 8006910:	e001      	b.n	8006916 <OPENBL_USART_GetAddress+0x86>
    }
    else
    {
      status = ACK_BYTE;
 8006912:	2379      	movs	r3, #121	; 0x79
 8006914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <OPENBL_USART_SpecialCommand>:
/**
 * @brief  This function is used to execute special command commands.
 * @retval None.
 */
void OPENBL_USART_SpecialCommand(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t data;
  uint8_t xor;

  /* Point to the RAM USART buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t)USART_RAM_Buf;
 8006926:	4b3b      	ldr	r3, [pc, #236]	; (8006a14 <OPENBL_USART_SpecialCommand+0xf4>)
 8006928:	60bb      	str	r3, [r7, #8]

  /* Send special command code acknowledgment */
  OPENBL_USART_SendByte(ACK_BYTE);
 800692a:	2079      	movs	r0, #121	; 0x79
 800692c:	f7fa fd1c 	bl	8001368 <OPENBL_USART_SendByte>

  /* Get the command operation code */
  if (OPENBL_USART_GetSpecialCmdOpCode(&op_code, OPENBL_SPECIAL_CMD) == NACK_BYTE)
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	2101      	movs	r1, #1
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f9e3 	bl	8006d00 <OPENBL_USART_GetSpecialCmdOpCode>
 800693a:	4603      	mov	r3, r0
 800693c:	2b1f      	cmp	r3, #31
 800693e:	d103      	bne.n	8006948 <OPENBL_USART_SpecialCommand+0x28>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006940:	201f      	movs	r0, #31
 8006942:	f7fa fd11 	bl	8001368 <OPENBL_USART_SendByte>
        /* Send last acknowledgment */
        OPENBL_USART_SendByte(ACK_BYTE);
      }
    }
  }
}
 8006946:	e061      	b.n	8006a0c <OPENBL_USART_SpecialCommand+0xec>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006948:	2079      	movs	r0, #121	; 0x79
 800694a:	f7fa fd0d 	bl	8001368 <OPENBL_USART_SendByte>
    special_cmd->CmdType = OPENBL_SPECIAL_CMD;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 8006954:	88ba      	ldrh	r2, [r7, #4]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	73bb      	strb	r3, [r7, #14]
    data                     = OPENBL_USART_ReadByte();
 800695e:	f7fa fcef 	bl	8001340 <OPENBL_USART_ReadByte>
 8006962:	4603      	mov	r3, r0
 8006964:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	b29b      	uxth	r3, r3
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	b29a      	uxth	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 8006972:	7bba      	ldrb	r2, [r7, #14]
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	4053      	eors	r3, r2
 8006978:	73bb      	strb	r3, [r7, #14]
    data                      = OPENBL_USART_ReadByte();
 800697a:	f7fa fce1 	bl	8001340 <OPENBL_USART_ReadByte>
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	889a      	ldrh	r2, [r3, #4]
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	b29b      	uxth	r3, r3
 800698a:	4313      	orrs	r3, r2
 800698c:	b29a      	uxth	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 8006992:	7bba      	ldrb	r2, [r7, #14]
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	4053      	eors	r3, r2
 8006998:	73bb      	strb	r3, [r7, #14]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	889b      	ldrh	r3, [r3, #4]
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d903      	bls.n	80069aa <OPENBL_USART_SpecialCommand+0x8a>
      OPENBL_USART_SendByte(NACK_BYTE);
 80069a2:	201f      	movs	r0, #31
 80069a4:	f7fa fce0 	bl	8001368 <OPENBL_USART_SendByte>
}
 80069a8:	e030      	b.n	8006a0c <OPENBL_USART_SpecialCommand+0xec>
      if (special_cmd->SizeBuffer1 != 0U)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	889b      	ldrh	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <OPENBL_USART_SpecialCommand+0xc4>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	e00f      	b.n	80069d8 <OPENBL_USART_SpecialCommand+0xb8>
          data                        = OPENBL_USART_ReadByte();
 80069b8:	f7fa fcc2 	bl	8001340 <OPENBL_USART_ReadByte>
 80069bc:	4603      	mov	r3, r0
 80069be:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4413      	add	r3, r2
 80069c6:	79fa      	ldrb	r2, [r7, #7]
 80069c8:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 80069ca:	7bba      	ldrb	r2, [r7, #14]
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	4053      	eors	r3, r2
 80069d0:	73bb      	strb	r3, [r7, #14]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	3301      	adds	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	889b      	ldrh	r3, [r3, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d3e9      	bcc.n	80069b8 <OPENBL_USART_SpecialCommand+0x98>
      if (OPENBL_USART_ReadByte() != xor)
 80069e4:	f7fa fcac 	bl	8001340 <OPENBL_USART_ReadByte>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <OPENBL_USART_SpecialCommand+0xda>
        OPENBL_USART_SendByte(NACK_BYTE);
 80069f2:	201f      	movs	r0, #31
 80069f4:	f7fa fcb8 	bl	8001368 <OPENBL_USART_SendByte>
}
 80069f8:	e008      	b.n	8006a0c <OPENBL_USART_SpecialCommand+0xec>
        OPENBL_USART_SendByte(ACK_BYTE);
 80069fa:	2079      	movs	r0, #121	; 0x79
 80069fc:	f7fa fcb4 	bl	8001368 <OPENBL_USART_SendByte>
        OPENBL_USART_SpecialCommandProcess(special_cmd);
 8006a00:	68b8      	ldr	r0, [r7, #8]
 8006a02:	f7fa fcc9 	bl	8001398 <OPENBL_USART_SpecialCommandProcess>
        OPENBL_USART_SendByte(ACK_BYTE);
 8006a06:	2079      	movs	r0, #121	; 0x79
 8006a08:	f7fa fcae 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	2000097c 	.word	0x2000097c

08006a18 <OPENBL_USART_ExtendedSpecialCommand>:
/**
 * @brief  This function is used to execute extended special command commands.
 * @retval None.
 */
void OPENBL_USART_ExtendedSpecialCommand(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
  uint16_t index;
  uint8_t xor;
  uint8_t data;

  /* Point to the RAM USART buffer to gain size and reliability */
  special_cmd = (OPENBL_SpecialCmdTypeDef *)(uint32_t) USART_RAM_Buf;
 8006a1e:	4b68      	ldr	r3, [pc, #416]	; (8006bc0 <OPENBL_USART_ExtendedSpecialCommand+0x1a8>)
 8006a20:	60bb      	str	r3, [r7, #8]

  /* Send extended special command code acknowledgment */
  OPENBL_USART_SendByte(ACK_BYTE);
 8006a22:	2079      	movs	r0, #121	; 0x79
 8006a24:	f7fa fca0 	bl	8001368 <OPENBL_USART_SendByte>

  /* Get the command operation code */
  if (OPENBL_USART_GetSpecialCmdOpCode(&op_code, OPENBL_EXTENDED_SPECIAL_CMD) == NACK_BYTE)
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 f967 	bl	8006d00 <OPENBL_USART_GetSpecialCmdOpCode>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b1f      	cmp	r3, #31
 8006a36:	d103      	bne.n	8006a40 <OPENBL_USART_ExtendedSpecialCommand+0x28>
  {
    OPENBL_USART_SendByte(NACK_BYTE);
 8006a38:	201f      	movs	r0, #31
 8006a3a:	f7fa fc95 	bl	8001368 <OPENBL_USART_SendByte>
          }
        }
      }
    }
  }
}
 8006a3e:	e0ba      	b.n	8006bb6 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
    OPENBL_USART_SendByte(ACK_BYTE);
 8006a40:	2079      	movs	r0, #121	; 0x79
 8006a42:	f7fa fc91 	bl	8001368 <OPENBL_USART_SendByte>
    special_cmd->CmdType = OPENBL_EXTENDED_SPECIAL_CMD;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	701a      	strb	r2, [r3, #0]
    special_cmd->OpCode  = op_code;
 8006a4c:	88ba      	ldrh	r2, [r7, #4]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	805a      	strh	r2, [r3, #2]
    xor = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	737b      	strb	r3, [r7, #13]
    data                     = OPENBL_USART_ReadByte();
 8006a56:	f7fa fc73 	bl	8001340 <OPENBL_USART_ReadByte>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 = ((uint16_t)data) << 8;
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	809a      	strh	r2, [r3, #4]
    xor                     ^= data;
 8006a6a:	7b7a      	ldrb	r2, [r7, #13]
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	4053      	eors	r3, r2
 8006a70:	737b      	strb	r3, [r7, #13]
    data                      = OPENBL_USART_ReadByte();
 8006a72:	f7fa fc65 	bl	8001340 <OPENBL_USART_ReadByte>
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
    special_cmd->SizeBuffer1 |= (uint16_t)data;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	889a      	ldrh	r2, [r3, #4]
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	4313      	orrs	r3, r2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	809a      	strh	r2, [r3, #4]
    xor                      ^= data;
 8006a8a:	7b7a      	ldrb	r2, [r7, #13]
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	4053      	eors	r3, r2
 8006a90:	737b      	strb	r3, [r7, #13]
    if (special_cmd->SizeBuffer1 > SPECIAL_CMD_SIZE_BUFFER1)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	889b      	ldrh	r3, [r3, #4]
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d903      	bls.n	8006aa2 <OPENBL_USART_ExtendedSpecialCommand+0x8a>
      OPENBL_USART_SendByte(NACK_BYTE);
 8006a9a:	201f      	movs	r0, #31
 8006a9c:	f7fa fc64 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006aa0:	e089      	b.n	8006bb6 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
      if (special_cmd->SizeBuffer1 != 0U)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	889b      	ldrh	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d017      	beq.n	8006ada <OPENBL_USART_ExtendedSpecialCommand+0xc2>
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	81fb      	strh	r3, [r7, #14]
 8006aae:	e00f      	b.n	8006ad0 <OPENBL_USART_ExtendedSpecialCommand+0xb8>
          data                        = OPENBL_USART_ReadByte();
 8006ab0:	f7fa fc46 	bl	8001340 <OPENBL_USART_ReadByte>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	71fb      	strb	r3, [r7, #7]
          special_cmd->Buffer1[index] = data;
 8006ab8:	89fb      	ldrh	r3, [r7, #14]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	79fa      	ldrb	r2, [r7, #7]
 8006ac0:	719a      	strb	r2, [r3, #6]
          xor                        ^= data;
 8006ac2:	7b7a      	ldrb	r2, [r7, #13]
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	4053      	eors	r3, r2
 8006ac8:	737b      	strb	r3, [r7, #13]
        for (index = 0U; index < special_cmd->SizeBuffer1; index++)
 8006aca:	89fb      	ldrh	r3, [r7, #14]
 8006acc:	3301      	adds	r3, #1
 8006ace:	81fb      	strh	r3, [r7, #14]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	889b      	ldrh	r3, [r3, #4]
 8006ad4:	89fa      	ldrh	r2, [r7, #14]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3ea      	bcc.n	8006ab0 <OPENBL_USART_ExtendedSpecialCommand+0x98>
      if (OPENBL_USART_ReadByte() != xor)
 8006ada:	f7fa fc31 	bl	8001340 <OPENBL_USART_ReadByte>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	7b7b      	ldrb	r3, [r7, #13]
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <OPENBL_USART_ExtendedSpecialCommand+0xd8>
        OPENBL_USART_SendByte(NACK_BYTE);
 8006ae8:	201f      	movs	r0, #31
 8006aea:	f7fa fc3d 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006aee:	e062      	b.n	8006bb6 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
        OPENBL_USART_SendByte(ACK_BYTE);
 8006af0:	2079      	movs	r0, #121	; 0x79
 8006af2:	f7fa fc39 	bl	8001368 <OPENBL_USART_SendByte>
        xor                      = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	737b      	strb	r3, [r7, #13]
        data                     = OPENBL_USART_ReadByte();
 8006afa:	f7fa fc21 	bl	8001340 <OPENBL_USART_ReadByte>
 8006afe:	4603      	mov	r3, r0
 8006b00:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 = ((uint16_t)data) << 8;
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                     ^= data;
 8006b10:	7b7a      	ldrb	r2, [r7, #13]
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	4053      	eors	r3, r2
 8006b16:	737b      	strb	r3, [r7, #13]
        data                      = OPENBL_USART_ReadByte();
 8006b18:	f7fa fc12 	bl	8001340 <OPENBL_USART_ReadByte>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	71fb      	strb	r3, [r7, #7]
        special_cmd->SizeBuffer2 |= (uint16_t)data;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        xor                      ^= data;
 8006b34:	7b7a      	ldrb	r2, [r7, #13]
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	4053      	eors	r3, r2
 8006b3a:	737b      	strb	r3, [r7, #13]
        if (special_cmd->SizeBuffer2 > SPECIAL_CMD_SIZE_BUFFER2)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b46:	d903      	bls.n	8006b50 <OPENBL_USART_ExtendedSpecialCommand+0x138>
          OPENBL_USART_SendByte(NACK_BYTE);
 8006b48:	201f      	movs	r0, #31
 8006b4a:	f7fa fc0d 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006b4e:	e032      	b.n	8006bb6 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
          if (special_cmd->SizeBuffer2 != 0U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d019      	beq.n	8006b8e <OPENBL_USART_ExtendedSpecialCommand+0x176>
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	81fb      	strh	r3, [r7, #14]
 8006b5e:	e010      	b.n	8006b82 <OPENBL_USART_ExtendedSpecialCommand+0x16a>
              data                        = OPENBL_USART_ReadByte();
 8006b60:	f7fa fbee 	bl	8001340 <OPENBL_USART_ReadByte>
 8006b64:	4603      	mov	r3, r0
 8006b66:	71fb      	strb	r3, [r7, #7]
              special_cmd->Buffer2[index] = data;
 8006b68:	89fb      	ldrh	r3, [r7, #14]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	79fa      	ldrb	r2, [r7, #7]
 8006b70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
              xor                        ^= data;
 8006b74:	7b7a      	ldrb	r2, [r7, #13]
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	4053      	eors	r3, r2
 8006b7a:	737b      	strb	r3, [r7, #13]
            for (index = 0U; index < special_cmd->SizeBuffer2; index++)
 8006b7c:	89fb      	ldrh	r3, [r7, #14]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	81fb      	strh	r3, [r7, #14]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006b88:	89fa      	ldrh	r2, [r7, #14]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d3e8      	bcc.n	8006b60 <OPENBL_USART_ExtendedSpecialCommand+0x148>
          if (OPENBL_USART_ReadByte() != xor)
 8006b8e:	f7fa fbd7 	bl	8001340 <OPENBL_USART_ReadByte>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <OPENBL_USART_ExtendedSpecialCommand+0x18c>
            OPENBL_USART_SendByte(NACK_BYTE);
 8006b9c:	201f      	movs	r0, #31
 8006b9e:	f7fa fbe3 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006ba2:	e008      	b.n	8006bb6 <OPENBL_USART_ExtendedSpecialCommand+0x19e>
            OPENBL_USART_SendByte(ACK_BYTE);
 8006ba4:	2079      	movs	r0, #121	; 0x79
 8006ba6:	f7fa fbdf 	bl	8001368 <OPENBL_USART_SendByte>
            OPENBL_USART_SpecialCommandProcess(special_cmd);
 8006baa:	68b8      	ldr	r0, [r7, #8]
 8006bac:	f7fa fbf4 	bl	8001398 <OPENBL_USART_SpecialCommandProcess>
            OPENBL_USART_SendByte(ACK_BYTE);
 8006bb0:	2079      	movs	r0, #121	; 0x79
 8006bb2:	f7fa fbd9 	bl	8001368 <OPENBL_USART_SendByte>
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	2000097c 	.word	0x2000097c

08006bc4 <OPENBL_USART_ConstructCommandsTable>:
/**
  * @brief  This function is used to construct the command list table.
  * @return Returns the number of supported commands.
  */
static uint8_t OPENBL_USART_ConstructCommandsTable(OPENBL_CommandsTypeDef *pUsartCmd)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]

  if (pUsartCmd->GetCommand != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <OPENBL_USART_ConstructCommandsTable+0x22>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GET_COMMAND;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	4a48      	ldr	r2, [pc, #288]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006bdc:	2100      	movs	r1, #0
 8006bde:	54d1      	strb	r1, [r2, r3]
    i++;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	3301      	adds	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->GetVersion != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d006      	beq.n	8006bfc <OPENBL_USART_ConstructCommandsTable+0x38>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GET_VERSION;
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	4a42      	ldr	r2, [pc, #264]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	54d1      	strb	r1, [r2, r3]
    i++;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->GetID != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <OPENBL_USART_ConstructCommandsTable+0x4e>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GET_ID;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4a3d      	ldr	r2, [pc, #244]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c08:	2102      	movs	r1, #2
 8006c0a:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ReadMemory != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d006      	beq.n	8006c28 <OPENBL_USART_ConstructCommandsTable+0x64>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_READ_MEMORY;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	4a37      	ldr	r2, [pc, #220]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c1e:	2111      	movs	r1, #17
 8006c20:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	3301      	adds	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->Go != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d006      	beq.n	8006c3e <OPENBL_USART_ConstructCommandsTable+0x7a>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_GO;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	4a32      	ldr	r2, [pc, #200]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c34:	2121      	movs	r1, #33	; 0x21
 8006c36:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->WriteMemory != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <OPENBL_USART_ConstructCommandsTable+0x90>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_WRITE_MEMORY;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
 8006c48:	4a2c      	ldr	r2, [pc, #176]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c4a:	2131      	movs	r1, #49	; 0x31
 8006c4c:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	3301      	adds	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->EraseMemory != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <OPENBL_USART_ConstructCommandsTable+0xa6>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_EXT_ERASE_MEMORY;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	4a27      	ldr	r2, [pc, #156]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c60:	2144      	movs	r1, #68	; 0x44
 8006c62:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	3301      	adds	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->WriteProtect != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d006      	beq.n	8006c80 <OPENBL_USART_ConstructCommandsTable+0xbc>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_WRITE_PROTECT;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	4a21      	ldr	r2, [pc, #132]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c76:	2163      	movs	r1, #99	; 0x63
 8006c78:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->WriteUnprotect != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <OPENBL_USART_ConstructCommandsTable+0xd2>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_WRITE_UNPROTECT;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006c8c:	2173      	movs	r1, #115	; 0x73
 8006c8e:	54d1      	strb	r1, [r2, r3]
    i++;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	3301      	adds	r3, #1
 8006c94:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ReadoutProtect != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d006      	beq.n	8006cac <OPENBL_USART_ConstructCommandsTable+0xe8>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_READ_PROTECT;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006ca2:	2182      	movs	r1, #130	; 0x82
 8006ca4:	54d1      	strb	r1, [r2, r3]
    i++;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ReadoutUnprotect != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <OPENBL_USART_ConstructCommandsTable+0xfe>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_READ_UNPROTECT;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006cb8:	2192      	movs	r1, #146	; 0x92
 8006cba:	54d1      	strb	r1, [r2, r3]
    i++;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->SpecialCommand != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <OPENBL_USART_ConstructCommandsTable+0x114>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_SPECIAL_COMMAND;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	4a0b      	ldr	r2, [pc, #44]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006cce:	2150      	movs	r1, #80	; 0x50
 8006cd0:	54d1      	strb	r1, [r2, r3]
    i++;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
  }

  if (pUsartCmd->ExtendedSpecialCommand != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <OPENBL_USART_ConstructCommandsTable+0x12a>
  {
    a_OPENBL_USART_CommandsList[i] = CMD_EXTENDED_SPECIAL_COMMAND;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	4a06      	ldr	r2, [pc, #24]	; (8006cfc <OPENBL_USART_ConstructCommandsTable+0x138>)
 8006ce4:	2151      	movs	r1, #81	; 0x51
 8006ce6:	54d1      	strb	r1, [r2, r3]
    i++;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	3301      	adds	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
  }

  return (i);
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000e08 	.word	0x20000e08

08006d00 <OPENBL_USART_GetSpecialCmdOpCode>:
 * @param  OpCode Pointer to the operation code to be returned.
 * @param  CmdType Type of the command, Special command or extended special command.
 * @retval Returns NACK status in case of error else returns ACK status.
 */
static uint8_t OPENBL_USART_GetSpecialCmdOpCode(uint16_t *OpCode, OPENBL_SpecialCmdTypeTypeDef CmdType)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  uint8_t xor;
  uint8_t status;
  uint8_t index;

  /* Initialize the status variable */
  status = NACK_BYTE;
 8006d0c:	231f      	movs	r3, #31
 8006d0e:	73fb      	strb	r3, [r7, #15]

  /* Get the command OpCode (2 bytes) */
  op_code[0] = OPENBL_USART_ReadByte(); /* Read the MSB byte */
 8006d10:	f7fa fb16 	bl	8001340 <OPENBL_USART_ReadByte>
 8006d14:	4603      	mov	r3, r0
 8006d16:	723b      	strb	r3, [r7, #8]
  op_code[1] = OPENBL_USART_ReadByte(); /* Read the LSB byte */
 8006d18:	f7fa fb12 	bl	8001340 <OPENBL_USART_ReadByte>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	727b      	strb	r3, [r7, #9]

  /* Get the checksum */
  xor  = op_code[0];
 8006d20:	7a3b      	ldrb	r3, [r7, #8]
 8006d22:	737b      	strb	r3, [r7, #13]
  xor ^= op_code[1];
 8006d24:	7a7a      	ldrb	r2, [r7, #9]
 8006d26:	7b7b      	ldrb	r3, [r7, #13]
 8006d28:	4053      	eors	r3, r2
 8006d2a:	737b      	strb	r3, [r7, #13]

  if (OPENBL_USART_ReadByte() != xor)
 8006d2c:	f7fa fb08 	bl	8001340 <OPENBL_USART_ReadByte>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	7b7b      	ldrb	r3, [r7, #13]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d002      	beq.n	8006d40 <OPENBL_USART_GetSpecialCmdOpCode+0x40>
  {
    status = NACK_BYTE;
 8006d3a:	231f      	movs	r3, #31
 8006d3c:	73fb      	strb	r3, [r7, #15]
 8006d3e:	e03b      	b.n	8006db8 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
  }
  else
  {
    /* Get the operation code */
    *OpCode = ((uint16_t)op_code[0] << 8) | (uint16_t)op_code[1];
 8006d40:	7a3b      	ldrb	r3, [r7, #8]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	b21a      	sxth	r2, r3
 8006d46:	7a7b      	ldrb	r3, [r7, #9]
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b21b      	sxth	r3, r3
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	801a      	strh	r2, [r3, #0]

    if (CmdType == OPENBL_SPECIAL_CMD)
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d114      	bne.n	8006d84 <OPENBL_USART_GetSpecialCmdOpCode+0x84>
    {
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73bb      	strb	r3, [r7, #14]
 8006d5e:	e00d      	b.n	8006d7c <OPENBL_USART_GetSpecialCmdOpCode+0x7c>
      {
        if (SpecialCmdList[index] == *OpCode)
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <OPENBL_USART_GetSpecialCmdOpCode+0xc4>)
 8006d64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d102      	bne.n	8006d76 <OPENBL_USART_GetSpecialCmdOpCode+0x76>
        {
          status = ACK_BYTE;
 8006d70:	2379      	movs	r3, #121	; 0x79
 8006d72:	73fb      	strb	r3, [r7, #15]
          break;
 8006d74:	e020      	b.n	8006db8 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < SPECIAL_CMD_MAX_NUMBER; index++)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	73bb      	strb	r3, [r7, #14]
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0ee      	beq.n	8006d60 <OPENBL_USART_GetSpecialCmdOpCode+0x60>
 8006d82:	e019      	b.n	8006db8 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else if (CmdType == OPENBL_EXTENDED_SPECIAL_CMD)
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d114      	bne.n	8006db4 <OPENBL_USART_GetSpecialCmdOpCode+0xb4>
    {
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73bb      	strb	r3, [r7, #14]
 8006d8e:	e00d      	b.n	8006dac <OPENBL_USART_GetSpecialCmdOpCode+0xac>
      {
        if (ExtendedSpecialCmdList[index] == *OpCode)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <OPENBL_USART_GetSpecialCmdOpCode+0xc8>)
 8006d94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d102      	bne.n	8006da6 <OPENBL_USART_GetSpecialCmdOpCode+0xa6>
        {
          status = ACK_BYTE;
 8006da0:	2379      	movs	r3, #121	; 0x79
 8006da2:	73fb      	strb	r3, [r7, #15]
          break;
 8006da4:	e008      	b.n	8006db8 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
      for (index = 0U; index < EXTENDED_SPECIAL_CMD_MAX_NUMBER; index++)
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	3301      	adds	r3, #1
 8006daa:	73bb      	strb	r3, [r7, #14]
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ee      	beq.n	8006d90 <OPENBL_USART_GetSpecialCmdOpCode+0x90>
 8006db2:	e001      	b.n	8006db8 <OPENBL_USART_GetSpecialCmdOpCode+0xb8>
        }
      }
    }
    else
    {
      status = NACK_BYTE;
 8006db4:	231f      	movs	r3, #31
 8006db6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	2000003c 	.word	0x2000003c
 8006dc8:	20000040 	.word	0x20000040

08006dcc <memset>:
 8006dcc:	4402      	add	r2, r0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d100      	bne.n	8006dd6 <memset+0xa>
 8006dd4:	4770      	bx	lr
 8006dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dda:	e7f9      	b.n	8006dd0 <memset+0x4>

08006ddc <__libc_init_array>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	4d0d      	ldr	r5, [pc, #52]	; (8006e14 <__libc_init_array+0x38>)
 8006de0:	4c0d      	ldr	r4, [pc, #52]	; (8006e18 <__libc_init_array+0x3c>)
 8006de2:	1b64      	subs	r4, r4, r5
 8006de4:	10a4      	asrs	r4, r4, #2
 8006de6:	2600      	movs	r6, #0
 8006de8:	42a6      	cmp	r6, r4
 8006dea:	d109      	bne.n	8006e00 <__libc_init_array+0x24>
 8006dec:	4d0b      	ldr	r5, [pc, #44]	; (8006e1c <__libc_init_array+0x40>)
 8006dee:	4c0c      	ldr	r4, [pc, #48]	; (8006e20 <__libc_init_array+0x44>)
 8006df0:	f000 f818 	bl	8006e24 <_init>
 8006df4:	1b64      	subs	r4, r4, r5
 8006df6:	10a4      	asrs	r4, r4, #2
 8006df8:	2600      	movs	r6, #0
 8006dfa:	42a6      	cmp	r6, r4
 8006dfc:	d105      	bne.n	8006e0a <__libc_init_array+0x2e>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e04:	4798      	blx	r3
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7ee      	b.n	8006de8 <__libc_init_array+0xc>
 8006e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0e:	4798      	blx	r3
 8006e10:	3601      	adds	r6, #1
 8006e12:	e7f2      	b.n	8006dfa <__libc_init_array+0x1e>
 8006e14:	08006f40 	.word	0x08006f40
 8006e18:	08006f40 	.word	0x08006f40
 8006e1c:	08006f40 	.word	0x08006f40
 8006e20:	08006f44 	.word	0x08006f44

08006e24 <_init>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr

08006e30 <_fini>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	bf00      	nop
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr
 8006e3c:	0000      	movs	r0, r0
	...

08006e40 <__OPENBL_I2C_WaitNack_veneer>:
 8006e40:	f85f f000 	ldr.w	pc, [pc]	; 8006e44 <__OPENBL_I2C_WaitNack_veneer+0x4>
 8006e44:	200001f9 	.word	0x200001f9

08006e48 <__OPENBL_I2C_WaitStop_veneer>:
 8006e48:	f85f f000 	ldr.w	pc, [pc]	; 8006e4c <__OPENBL_I2C_WaitStop_veneer+0x4>
 8006e4c:	2000025d 	.word	0x2000025d

Disassembly of section .data:

20000000 <USART_Ops>:
20000000:	0800124d 080012a5 080012cd 08001311     M...............
20000010:	08001369                                i...

20000014 <I2C_Ops>:
20000014:	08000a25 00000000 08000a8d 08000ac1     %...............
20000024:	08000b55                                U...

20000028 <IWDG_Ops>:
20000028:	08000c75 00000000 00000000 00000000     u...............
20000038:	00000000                                ....

2000003c <SpecialCmdList>:
2000003c:	00000102                                ....

20000040 <ExtendedSpecialCmdList>:
20000040:	00000102                                ....

20000044 <EB_Descriptor>:
20000044:	1fff7400 1fff7800 00000400 00000006     .t...x..........
20000054:	0800046d 00000000 00000000 00000000     m...............
	...

20000070 <FLASH_Descriptor>:
20000070:	08000000 08040000 00040000 00000001     ................
20000080:	080004ab 080004c1 080005f1 08000641     ............A...
20000090:	080005ab 00000000 0800068d              ............

2000009c <OB1_Descriptor>:
2000009c:	1fff7800 1fff7870 00000070 00000003     .x..px..p.......
200000ac:	08000d19 08000d31 00000000 00000000     ....1...........
	...

200000c8 <OTP_Descriptor>:
200000c8:	1fff7000 1fff7400 00000400 00000004     .p...t..........
200000d8:	08000eb5 08000ecb 00000000 00000000     ................
	...

200000f4 <RAM_Descriptor>:
200000f4:	20001800 20010000 00010000 00000002     ... ... ........
20000104:	08000fc9 08000fdf 00000000 00000000     ................
20000114:	08001033 00000000 00000000              3...........

20000120 <ICP1_Descriptor>:
20000120:	1fff0000 1fff7000 00007000 00000005     .....p...p......
20000130:	08001061 00000000 00000000 00000000     a...............
	...

2000014c <SystemCoreClock>:
2000014c:	003d0900                                ..=.

20000150 <uwTickPrio>:
20000150:	00000010                                ....

20000154 <uwTickFreq>:
20000154:	00000001                                ....

20000158 <OPENBL_I2C_Commands.0>:
20000158:	08004d91 08004df5 08004e1b 08004e4d     .M...M...N..MN..
20000168:	08004f01 08004fbd 08005021 08005055     .O...O..!P..UP..
20000178:	08005079 08005269 08005349 08005391     yP..iR..IS...S..
20000188:	08005455 08005651 08005741 08005791     UT..QV..AW...W..
20000198:	080057cd 00000000 08005891 0800599d     .W.......X...Y..

200001a8 <OPENBL_USART_Commands.0>:
200001a8:	0800632d 08006385 080063ab 080063d1     -c...c...c...c..
200001b8:	08006475 0800652d 08006591 080065c5     ud..-e...e...e..
200001c8:	080065e9 08006799 08006849 00000000     .e...g..Ih......
	...
200001f0:	08006921 08006a19                       !i...j..

200001f8 <OPENBL_I2C_WaitNack>:
{
200001f8:	b480      	push	{r7}
200001fa:	b083      	sub	sp, #12
200001fc:	af00      	add	r7, sp, #0
  uint32_t timeout = 0U;
200001fe:	2300      	movs	r3, #0
20000200:	607b      	str	r3, [r7, #4]
  while ((I2Cx->ISR & I2C_ISR_NACKF) == 0)
20000202:	e011      	b.n	20000228 <OPENBL_I2C_WaitNack+0x30>
    IWDG->KR = IWDG_KEY_RELOAD;
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <OPENBL_I2C_WaitNack+0x54>)
20000206:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000020a:	601a      	str	r2, [r3, #0]
    if ((timeout++) >= OPENBL_I2C_TIMEOUT)
2000020c:	687b      	ldr	r3, [r7, #4]
2000020e:	1c5a      	adds	r2, r3, #1
20000210:	607a      	str	r2, [r7, #4]
20000212:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
20000216:	d307      	bcc.n	20000228 <OPENBL_I2C_WaitNack+0x30>
                     (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000218:	4b0d      	ldr	r3, [pc, #52]	; (20000250 <OPENBL_I2C_WaitNack+0x58>)
2000021a:	68db      	ldr	r3, [r3, #12]
2000021c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
      SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20000220:	490b      	ldr	r1, [pc, #44]	; (20000250 <OPENBL_I2C_WaitNack+0x58>)
                     (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000222:	4b0c      	ldr	r3, [pc, #48]	; (20000254 <OPENBL_I2C_WaitNack+0x5c>)
20000224:	4313      	orrs	r3, r2
      SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20000226:	60cb      	str	r3, [r1, #12]
  while ((I2Cx->ISR & I2C_ISR_NACKF) == 0)
20000228:	4b0b      	ldr	r3, [pc, #44]	; (20000258 <OPENBL_I2C_WaitNack+0x60>)
2000022a:	699b      	ldr	r3, [r3, #24]
2000022c:	f003 0310 	and.w	r3, r3, #16
20000230:	2b00      	cmp	r3, #0
20000232:	d0e7      	beq.n	20000204 <OPENBL_I2C_WaitNack+0xc>
  I2Cx->ICR |= I2C_ICR_NACKCF;
20000234:	4b08      	ldr	r3, [pc, #32]	; (20000258 <OPENBL_I2C_WaitNack+0x60>)
20000236:	69db      	ldr	r3, [r3, #28]
20000238:	4a07      	ldr	r2, [pc, #28]	; (20000258 <OPENBL_I2C_WaitNack+0x60>)
2000023a:	f043 0310 	orr.w	r3, r3, #16
2000023e:	61d3      	str	r3, [r2, #28]
}
20000240:	bf00      	nop
20000242:	370c      	adds	r7, #12
20000244:	46bd      	mov	sp, r7
20000246:	bc80      	pop	{r7}
20000248:	4770      	bx	lr
2000024a:	bf00      	nop
2000024c:	40003000 	.word	0x40003000
20000250:	e000ed00 	.word	0xe000ed00
20000254:	05fa0004 	.word	0x05fa0004
20000258:	40005800 	.word	0x40005800

2000025c <OPENBL_I2C_WaitStop>:
{
2000025c:	b480      	push	{r7}
2000025e:	b083      	sub	sp, #12
20000260:	af00      	add	r7, sp, #0
  uint32_t timeout = 0U;
20000262:	2300      	movs	r3, #0
20000264:	607b      	str	r3, [r7, #4]
  while ((I2Cx->ISR & I2C_ISR_STOPF) == 0)
20000266:	e011      	b.n	2000028c <OPENBL_I2C_WaitStop+0x30>
    IWDG->KR = IWDG_KEY_RELOAD;
20000268:	4b11      	ldr	r3, [pc, #68]	; (200002b0 <OPENBL_I2C_WaitStop+0x54>)
2000026a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000026e:	601a      	str	r2, [r3, #0]
    if ((timeout++) >= OPENBL_I2C_TIMEOUT)
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	1c5a      	adds	r2, r3, #1
20000274:	607a      	str	r2, [r7, #4]
20000276:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
2000027a:	d307      	bcc.n	2000028c <OPENBL_I2C_WaitStop+0x30>
                     (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2000027c:	4b0d      	ldr	r3, [pc, #52]	; (200002b4 <OPENBL_I2C_WaitStop+0x58>)
2000027e:	68db      	ldr	r3, [r3, #12]
20000280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
      SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20000284:	490b      	ldr	r1, [pc, #44]	; (200002b4 <OPENBL_I2C_WaitStop+0x58>)
                     (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000286:	4b0c      	ldr	r3, [pc, #48]	; (200002b8 <OPENBL_I2C_WaitStop+0x5c>)
20000288:	4313      	orrs	r3, r2
      SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2000028a:	60cb      	str	r3, [r1, #12]
  while ((I2Cx->ISR & I2C_ISR_STOPF) == 0)
2000028c:	4b0b      	ldr	r3, [pc, #44]	; (200002bc <OPENBL_I2C_WaitStop+0x60>)
2000028e:	699b      	ldr	r3, [r3, #24]
20000290:	f003 0320 	and.w	r3, r3, #32
20000294:	2b00      	cmp	r3, #0
20000296:	d0e7      	beq.n	20000268 <OPENBL_I2C_WaitStop+0xc>
  I2Cx->ICR |= I2C_ICR_STOPCF;
20000298:	4b08      	ldr	r3, [pc, #32]	; (200002bc <OPENBL_I2C_WaitStop+0x60>)
2000029a:	69db      	ldr	r3, [r3, #28]
2000029c:	4a07      	ldr	r2, [pc, #28]	; (200002bc <OPENBL_I2C_WaitStop+0x60>)
2000029e:	f043 0320 	orr.w	r3, r3, #32
200002a2:	61d3      	str	r3, [r2, #28]
}
200002a4:	bf00      	nop
200002a6:	370c      	adds	r7, #12
200002a8:	46bd      	mov	sp, r7
200002aa:	bc80      	pop	{r7}
200002ac:	4770      	bx	lr
200002ae:	bf00      	nop
200002b0:	40003000 	.word	0x40003000
200002b4:	e000ed00 	.word	0xe000ed00
200002b8:	05fa0004 	.word	0x05fa0004
200002bc:	40005800 	.word	0x40005800

200002c0 <OPENBL_I2C_SendBusyByte>:
{
200002c0:	b580      	push	{r7, lr}
200002c2:	b082      	sub	sp, #8
200002c4:	af00      	add	r7, sp, #0
  uint32_t timeout = 0;
200002c6:	2300      	movs	r3, #0
200002c8:	607b      	str	r3, [r7, #4]
  if (((I2Cx->ISR & I2C_ISR_ADDR) != 0))
200002ca:	4b18      	ldr	r3, [pc, #96]	; (2000032c <OPENBL_I2C_SendBusyByte+0x6c>)
200002cc:	699b      	ldr	r3, [r3, #24]
200002ce:	f003 0308 	and.w	r3, r3, #8
200002d2:	2b00      	cmp	r3, #0
200002d4:	d025      	beq.n	20000322 <OPENBL_I2C_SendBusyByte+0x62>
    I2Cx->ICR |= I2C_ICR_ADDRCF;
200002d6:	4b15      	ldr	r3, [pc, #84]	; (2000032c <OPENBL_I2C_SendBusyByte+0x6c>)
200002d8:	69db      	ldr	r3, [r3, #28]
200002da:	4a14      	ldr	r2, [pc, #80]	; (2000032c <OPENBL_I2C_SendBusyByte+0x6c>)
200002dc:	f043 0308 	orr.w	r3, r3, #8
200002e0:	61d3      	str	r3, [r2, #28]
    while ((I2Cx->ISR & I2C_ISR_TXIS) == 0)
200002e2:	e011      	b.n	20000308 <OPENBL_I2C_SendBusyByte+0x48>
      IWDG->KR = IWDG_KEY_RELOAD;
200002e4:	4b12      	ldr	r3, [pc, #72]	; (20000330 <OPENBL_I2C_SendBusyByte+0x70>)
200002e6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
200002ea:	601a      	str	r2, [r3, #0]
      if ((timeout++) >= OPENBL_I2C_TIMEOUT)
200002ec:	687b      	ldr	r3, [r7, #4]
200002ee:	1c5a      	adds	r2, r3, #1
200002f0:	607a      	str	r2, [r7, #4]
200002f2:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
200002f6:	d307      	bcc.n	20000308 <OPENBL_I2C_SendBusyByte+0x48>
                       (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200002f8:	4b0e      	ldr	r3, [pc, #56]	; (20000334 <OPENBL_I2C_SendBusyByte+0x74>)
200002fa:	68db      	ldr	r3, [r3, #12]
200002fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20000300:	490c      	ldr	r1, [pc, #48]	; (20000334 <OPENBL_I2C_SendBusyByte+0x74>)
                       (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000302:	4b0d      	ldr	r3, [pc, #52]	; (20000338 <OPENBL_I2C_SendBusyByte+0x78>)
20000304:	4313      	orrs	r3, r2
        SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20000306:	60cb      	str	r3, [r1, #12]
    while ((I2Cx->ISR & I2C_ISR_TXIS) == 0)
20000308:	4b08      	ldr	r3, [pc, #32]	; (2000032c <OPENBL_I2C_SendBusyByte+0x6c>)
2000030a:	699b      	ldr	r3, [r3, #24]
2000030c:	f003 0302 	and.w	r3, r3, #2
20000310:	2b00      	cmp	r3, #0
20000312:	d0e7      	beq.n	200002e4 <OPENBL_I2C_SendBusyByte+0x24>
    I2Cx->TXDR = BUSY_BYTE;
20000314:	4b05      	ldr	r3, [pc, #20]	; (2000032c <OPENBL_I2C_SendBusyByte+0x6c>)
20000316:	2276      	movs	r2, #118	; 0x76
20000318:	629a      	str	r2, [r3, #40]	; 0x28
    OPENBL_I2C_WaitNack();
2000031a:	f7ff ff6d 	bl	200001f8 <OPENBL_I2C_WaitNack>
    OPENBL_I2C_WaitStop();
2000031e:	f7ff ff9d 	bl	2000025c <OPENBL_I2C_WaitStop>
}
20000322:	bf00      	nop
20000324:	3708      	adds	r7, #8
20000326:	46bd      	mov	sp, r7
20000328:	bd80      	pop	{r7, pc}
2000032a:	bf00      	nop
2000032c:	40005800 	.word	0x40005800
20000330:	40003000 	.word	0x40003000
20000334:	e000ed00 	.word	0xe000ed00
20000338:	05fa0004 	.word	0x05fa0004
2000033c:	00000000 	.word	0x00000000
